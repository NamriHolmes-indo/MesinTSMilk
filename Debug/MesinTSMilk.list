
MesinTSMilk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b50  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025d5c  08005ce8  08005ce8  00015ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802ba44  0802ba44  00040010  2**0
                  CONTENTS
  4 .ARM          00000008  0802ba44  0802ba44  0003ba44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802ba4c  0802ba4c  00040010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802ba4c  0802ba4c  0003ba4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802ba50  0802ba50  0003ba50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0802ba54  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000010  0802ba64  00040010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  0802ba64  00040130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001065c  00000000  00000000  00040083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020e9  00000000  00000000  000506df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc0  00000000  00000000  000527c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000242d  00000000  00000000  00053788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011fa5  00000000  00000000  00055bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b743  00000000  00000000  00067b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000c54  00000000  00000000  0010329d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004370  00000000  00000000  00103ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00108264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005cd0 	.word	0x08005cd0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08005cd0 	.word	0x08005cd0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
static void MX_USART1_UART_Init(void);

uint32_t ID;

int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af02      	add	r7, sp, #8
  HAL_Init();
 80004da:	f003 fc11 	bl	8003d00 <HAL_Init>
  SystemClock_Config();
 80004de:	f000 f837 	bl	8000550 <SystemClock_Config>

  MX_GPIO_Init();
 80004e2:	f000 f97d 	bl	80007e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004e6:	f000 f89b 	bl	8000620 <MX_ADC1_Init>
  MX_CRC_Init();
 80004ea:	f000 f8eb 	bl	80006c4 <MX_CRC_Init>
  MX_TIM1_Init();
 80004ee:	f000 f8fd 	bl	80006ec <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80004f2:	f000 f94b 	bl	800078c <MX_USART1_UART_Init>
  HAL_InitTick(0);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f003 fc24 	bl	8003d44 <HAL_InitTick>

  HAL_TIM_Base_Start(&htim1);
 80004fc:	4811      	ldr	r0, [pc, #68]	; (8000544 <main+0x70>)
 80004fe:	f004 fe4f 	bl	80051a0 <HAL_TIM_Base_Start>
  ID = readID();
 8000502:	f001 fd69 	bl	8001fd8 <readID>
 8000506:	4603      	mov	r3, r0
 8000508:	461a      	mov	r2, r3
 800050a:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <main+0x74>)
 800050c:	601a      	str	r2, [r3, #0]

  HAL_Delay(100);
 800050e:	2064      	movs	r0, #100	; 0x64
 8000510:	f003 fc68 	bl	8003de4 <HAL_Delay>
  tft_init (ID);
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <main+0x74>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	b29b      	uxth	r3, r3
 800051a:	4618      	mov	r0, r3
 800051c:	f001 f99c 	bl	8001858 <tft_init>
  setRotation(1);
 8000520:	2001      	movs	r0, #1
 8000522:	f002 fb91 	bl	8002c48 <setRotation>
  fillScreen(WHITE);
 8000526:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800052a:	f003 f915 	bl	8003758 <fillScreen>

  drawRGBBitmap(0, 0, image_data_logo2, 320, 240);
 800052e:	23f0      	movs	r3, #240	; 0xf0
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000536:	4a05      	ldr	r2, [pc, #20]	; (800054c <main+0x78>)
 8000538:	2100      	movs	r1, #0
 800053a:	2000      	movs	r0, #0
 800053c:	f003 fb68 	bl	8003c10 <drawRGBBitmap>

  while (1)
 8000540:	e7fe      	b.n	8000540 <main+0x6c>
 8000542:	bf00      	nop
 8000544:	2000007c 	.word	0x2000007c
 8000548:	20000108 	.word	0x20000108
 800054c:	08005cec 	.word	0x08005cec

08000550 <SystemClock_Config>:
	printnewtstr(10, 235, WHITE, &mono9x7, 1, "Ngonsul-IT");
	printnewtstr(170, 235, BLUE, &mono9x7bold, 1, "Status>>");
}

void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0320 	add.w	r3, r7, #32
 800055a:	2230      	movs	r2, #48	; 0x30
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f005 fb8a 	bl	8005c78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	2300      	movs	r3, #0
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	4b27      	ldr	r3, [pc, #156]	; (8000618 <SystemClock_Config+0xc8>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	4a26      	ldr	r2, [pc, #152]	; (8000618 <SystemClock_Config+0xc8>)
 800057e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000582:	6413      	str	r3, [r2, #64]	; 0x40
 8000584:	4b24      	ldr	r3, [pc, #144]	; (8000618 <SystemClock_Config+0xc8>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	4b21      	ldr	r3, [pc, #132]	; (800061c <SystemClock_Config+0xcc>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a20      	ldr	r2, [pc, #128]	; (800061c <SystemClock_Config+0xcc>)
 800059a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800059e:	6013      	str	r3, [r2, #0]
 80005a0:	4b1e      	ldr	r3, [pc, #120]	; (800061c <SystemClock_Config+0xcc>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ac:	2302      	movs	r3, #2
 80005ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b0:	2301      	movs	r3, #1
 80005b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b4:	2310      	movs	r3, #16
 80005b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b8:	2302      	movs	r3, #2
 80005ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005bc:	2300      	movs	r3, #0
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005c0:	2308      	movs	r3, #8
 80005c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80005c4:	2364      	movs	r3, #100	; 0x64
 80005c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005cc:	2304      	movs	r3, #4
 80005ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0320 	add.w	r3, r7, #32
 80005d4:	4618      	mov	r0, r3
 80005d6:	f004 f93b 	bl	8004850 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005e0:	f000 f974 	bl	80008cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e8:	2302      	movs	r3, #2
 80005ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	2103      	movs	r1, #3
 8000600:	4618      	mov	r0, r3
 8000602:	f004 fb9d 	bl	8004d40 <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800060c:	f000 f95e 	bl	80008cc <Error_Handler>
  }
}
 8000610:	bf00      	nop
 8000612:	3750      	adds	r7, #80	; 0x50
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000626:	463b      	mov	r3, r7
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000632:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000634:	4a21      	ldr	r2, [pc, #132]	; (80006bc <MX_ADC1_Init+0x9c>)
 8000636:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <MX_ADC1_Init+0x98>)
 800063a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800063e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000640:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000646:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800064c:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <MX_ADC1_Init+0x98>)
 800064e:	2200      	movs	r2, #0
 8000650:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800065a:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <MX_ADC1_Init+0x98>)
 800065c:	2200      	movs	r2, #0
 800065e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000662:	4a17      	ldr	r2, [pc, #92]	; (80006c0 <MX_ADC1_Init+0xa0>)
 8000664:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000666:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_ADC1_Init+0x98>)
 800066e:	2201      	movs	r2, #1
 8000670:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000674:	2200      	movs	r2, #0
 8000676:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_ADC1_Init+0x98>)
 800067c:	2201      	movs	r2, #1
 800067e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000680:	480d      	ldr	r0, [pc, #52]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000682:	f003 fbd3 	bl	8003e2c <HAL_ADC_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800068c:	f000 f91e 	bl	80008cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000690:	2307      	movs	r3, #7
 8000692:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000694:	2301      	movs	r3, #1
 8000696:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069c:	463b      	mov	r3, r7
 800069e:	4619      	mov	r1, r3
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_ADC1_Init+0x98>)
 80006a2:	f003 fc07 	bl	8003eb4 <HAL_ADC_ConfigChannel>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006ac:	f000 f90e 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	2000002c 	.word	0x2000002c
 80006bc:	40012000 	.word	0x40012000
 80006c0:	0f000001 	.word	0x0f000001

080006c4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_CRC_Init+0x20>)
 80006ca:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <MX_CRC_Init+0x24>)
 80006cc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_CRC_Init+0x20>)
 80006d0:	f003 ff03 	bl	80044da <HAL_CRC_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006da:	f000 f8f7 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000074 	.word	0x20000074
 80006e8:	40023000 	.word	0x40023000

080006ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000700:	463b      	mov	r3, r7
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000708:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <MX_TIM1_Init+0x98>)
 800070a:	4a1f      	ldr	r2, [pc, #124]	; (8000788 <MX_TIM1_Init+0x9c>)
 800070c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800070e:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_TIM1_Init+0x98>)
 8000710:	2200      	movs	r2, #0
 8000712:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <MX_TIM1_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800071a:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_TIM1_Init+0x98>)
 800071c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000720:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_TIM1_Init+0x98>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_TIM1_Init+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_TIM1_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000734:	4813      	ldr	r0, [pc, #76]	; (8000784 <MX_TIM1_Init+0x98>)
 8000736:	f004 fce3 	bl	8005100 <HAL_TIM_Base_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000740:	f000 f8c4 	bl	80008cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000748:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800074a:	f107 0308 	add.w	r3, r7, #8
 800074e:	4619      	mov	r1, r3
 8000750:	480c      	ldr	r0, [pc, #48]	; (8000784 <MX_TIM1_Init+0x98>)
 8000752:	f004 fd7f 	bl	8005254 <HAL_TIM_ConfigClockSource>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800075c:	f000 f8b6 	bl	80008cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000760:	2300      	movs	r3, #0
 8000762:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000768:	463b      	mov	r3, r7
 800076a:	4619      	mov	r1, r3
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_TIM1_Init+0x98>)
 800076e:	f004 ff53 	bl	8005618 <HAL_TIMEx_MasterConfigSynchronization>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000778:	f000 f8a8 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	3718      	adds	r7, #24
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	2000007c 	.word	0x2000007c
 8000788:	40010000 	.word	0x40010000

0800078c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 8000792:	4a12      	ldr	r2, [pc, #72]	; (80007dc <MX_USART1_UART_Init+0x50>)
 8000794:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 8000798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800079c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007c4:	f004 ff96 	bl	80056f4 <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007ce:	f000 f87d 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000c4 	.word	0x200000c4
 80007dc:	40011000 	.word	0x40011000

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	4b31      	ldr	r3, [pc, #196]	; (80008c0 <MX_GPIO_Init+0xe0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a30      	ldr	r2, [pc, #192]	; (80008c0 <MX_GPIO_Init+0xe0>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b2e      	ldr	r3, [pc, #184]	; (80008c0 <MX_GPIO_Init+0xe0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b2a      	ldr	r3, [pc, #168]	; (80008c0 <MX_GPIO_Init+0xe0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a29      	ldr	r2, [pc, #164]	; (80008c0 <MX_GPIO_Init+0xe0>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b27      	ldr	r3, [pc, #156]	; (80008c0 <MX_GPIO_Init+0xe0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <MX_GPIO_Init+0xe0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a22      	ldr	r2, [pc, #136]	; (80008c0 <MX_GPIO_Init+0xe0>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <MX_GPIO_Init+0xe0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|LCD_CS_Pin|LCD_RS_Pin|LCD_WR_Pin
 800084a:	2200      	movs	r2, #0
 800084c:	f248 012f 	movw	r1, #32815	; 0x802f
 8000850:	481c      	ldr	r0, [pc, #112]	; (80008c4 <MX_GPIO_Init+0xe4>)
 8000852:	f003 ffe3 	bl	800481c <HAL_GPIO_WritePin>
                          |LCD_D7_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D0_Pin|LCD_D1_Pin|PWM_Pin|LCD_D3_Pin
 8000856:	2200      	movs	r2, #0
 8000858:	f241 017b 	movw	r1, #4219	; 0x107b
 800085c:	481a      	ldr	r0, [pc, #104]	; (80008c8 <MX_GPIO_Init+0xe8>)
 800085e:	f003 ffdd 	bl	800481c <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_RST_Pin LCD_CS_Pin LCD_RS_Pin LCD_WR_Pin
                           LCD_D7_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_CS_Pin|LCD_RS_Pin|LCD_WR_Pin
 8000862:	f248 032f 	movw	r3, #32815	; 0x802f
 8000866:	60fb      	str	r3, [r7, #12]
                          |LCD_D7_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	2301      	movs	r3, #1
 800086a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	4619      	mov	r1, r3
 800087a:	4812      	ldr	r0, [pc, #72]	; (80008c4 <MX_GPIO_Init+0xe4>)
 800087c:	f003 fe4a 	bl	8004514 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RD_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin;
 8000880:	2310      	movs	r3, #16
 8000882:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LCD_RD_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	4619      	mov	r1, r3
 8000892:	480c      	ldr	r0, [pc, #48]	; (80008c4 <MX_GPIO_Init+0xe4>)
 8000894:	f003 fe3e 	bl	8004514 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D0_Pin LCD_D1_Pin PWM_Pin LCD_D3_Pin
                           LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin */
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|PWM_Pin|LCD_D3_Pin
 8000898:	f241 037b 	movw	r3, #4219	; 0x107b
 800089c:	60fb      	str	r3, [r7, #12]
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_GPIO_Init+0xe8>)
 80008b2:	f003 fe2f 	bl	8004514 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b6:	bf00      	nop
 80008b8:	3720      	adds	r7, #32
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020000 	.word	0x40020000
 80008c8:	40020400 	.word	0x40020400

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <Error_Handler+0x8>
	...

080008d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <HAL_MspInit+0x4c>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	4a0f      	ldr	r2, [pc, #60]	; (8000924 <HAL_MspInit+0x4c>)
 80008e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ec:	6453      	str	r3, [r2, #68]	; 0x44
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <HAL_MspInit+0x4c>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	4a08      	ldr	r2, [pc, #32]	; (8000924 <HAL_MspInit+0x4c>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000908:	6413      	str	r3, [r2, #64]	; 0x40
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800

08000928 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a17      	ldr	r2, [pc, #92]	; (80009a4 <HAL_ADC_MspInit+0x7c>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d127      	bne.n	800099a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <HAL_ADC_MspInit+0x80>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	4a15      	ldr	r2, [pc, #84]	; (80009a8 <HAL_ADC_MspInit+0x80>)
 8000954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000958:	6453      	str	r3, [r2, #68]	; 0x44
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <HAL_ADC_MspInit+0x80>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <HAL_ADC_MspInit+0x80>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <HAL_ADC_MspInit+0x80>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <HAL_ADC_MspInit+0x80>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = PT100_RTD_Pin;
 8000982:	2380      	movs	r3, #128	; 0x80
 8000984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000986:	2303      	movs	r3, #3
 8000988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PT100_RTD_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4619      	mov	r1, r3
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <HAL_ADC_MspInit+0x84>)
 8000996:	f003 fdbd 	bl	8004514 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800099a:	bf00      	nop
 800099c:	3728      	adds	r7, #40	; 0x28
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40012000 	.word	0x40012000
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020000 	.word	0x40020000

080009b0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0b      	ldr	r2, [pc, #44]	; (80009ec <HAL_CRC_MspInit+0x3c>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d10d      	bne.n	80009de <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <HAL_CRC_MspInit+0x40>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a09      	ldr	r2, [pc, #36]	; (80009f0 <HAL_CRC_MspInit+0x40>)
 80009cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <HAL_CRC_MspInit+0x40>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80009de:	bf00      	nop
 80009e0:	3714      	adds	r7, #20
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	40023000 	.word	0x40023000
 80009f0:	40023800 	.word	0x40023800

080009f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a0b      	ldr	r2, [pc, #44]	; (8000a30 <HAL_TIM_Base_MspInit+0x3c>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d10d      	bne.n	8000a22 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <HAL_TIM_Base_MspInit+0x40>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	4a09      	ldr	r2, [pc, #36]	; (8000a34 <HAL_TIM_Base_MspInit+0x40>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6453      	str	r3, [r2, #68]	; 0x44
 8000a16:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <HAL_TIM_Base_MspInit+0x40>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a22:	bf00      	nop
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40010000 	.word	0x40010000
 8000a34:	40023800 	.word	0x40023800

08000a38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a19      	ldr	r2, [pc, #100]	; (8000abc <HAL_UART_MspInit+0x84>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d12c      	bne.n	8000ab4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	4a17      	ldr	r2, [pc, #92]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a64:	f043 0310 	orr.w	r3, r3, #16
 8000a68:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	f003 0310 	and.w	r3, r3, #16
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a10      	ldr	r2, [pc, #64]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a92:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000aa4:	2307      	movs	r3, #7
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <HAL_UART_MspInit+0x8c>)
 8000ab0:	f003 fd30 	bl	8004514 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	; 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40011000 	.word	0x40011000
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <NMI_Handler+0x4>

08000ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <HardFault_Handler+0x4>

08000ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <MemManage_Handler+0x4>

08000ada <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <BusFault_Handler+0x4>

08000ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <UsageFault_Handler+0x4>

08000ae6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b14:	f003 f946 	bl	8003da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <SystemInit+0x20>)
 8000b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b26:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <SystemInit+0x20>)
 8000b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <delay>:


/****************** delay in microseconds ***********************/
extern TIM_HandleTypeDef htim1;
void delay (uint32_t time)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <delay+0x2c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8000b50:	bf00      	nop
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <delay+0x2c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d8f9      	bhi.n	8000b52 <delay+0x12>
}
 8000b5e:	bf00      	nop
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	2000007c 	.word	0x2000007c

08000b70 <PIN_LOW>:

/********************************************** NO CHNAGES AFTER THIS ************************************************/


void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000b7c:	887b      	ldrh	r3, [r7, #2]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	4619      	mov	r1, r3
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f003 fe4a 	bl	800481c <HAL_GPIO_WritePin>
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <PIN_HIGH>:

void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000b9c:	887b      	ldrh	r3, [r7, #2]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f003 fe3a 	bl	800481c <HAL_GPIO_WritePin>
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <PIN_INPUT>:

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	460b      	mov	r3, r1
 8000bba:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8000bbc:	887b      	ldrh	r3, [r7, #2]
 8000bbe:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	4619      	mov	r1, r3
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f003 fca0 	bl	8004514 <HAL_GPIO_Init>
}
 8000bd4:	bf00      	nop
 8000bd6:	3720      	adds	r7, #32
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	460b      	mov	r3, r1
 8000be6:	807b      	strh	r3, [r7, #2]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8000be8:	887b      	ldrh	r3, [r7, #2]
 8000bea:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000bf8:	f107 030c 	add.w	r3, r7, #12
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f003 fc88 	bl	8004514 <HAL_GPIO_Init>
}
 8000c04:	bf00      	nop
 8000c06:	3720      	adds	r7, #32
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <width+0x14>)
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000004 	.word	0x20000004

08000c24 <height>:

uint16_t height(void)
{ return _height; }
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <height+0x14>)
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	20000006 	.word	0x20000006

08000c3c <color565_to_555>:
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h);

void setReadDir (void);
void setWriteDir (void);
static uint8_t done_reset, is8347, is555, is9797;
static uint16_t color565_to_555(uint16_t color) {
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
 8000c46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c4e:	b21a      	sxth	r2, r3
 8000c50:	88fb      	ldrh	r3, [r7, #6]
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000c5a:	b21b      	sxth	r3, r3
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	b21a      	sxth	r2, r3
 8000c60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	b21b      	sxth	r3, r3
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	b21b      	sxth	r3, r3
 8000c6e:	b29b      	uxth	r3, r3
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <color555_to_565>:
static uint16_t color555_to_565(uint16_t color) {
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x0400) >> 5) | ((color & 0x3F) >> 1); //extend Green LSB
 8000c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c8a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c8e:	b21a      	sxth	r2, r3
 8000c90:	88fb      	ldrh	r3, [r7, #6]
 8000c92:	115b      	asrs	r3, r3, #5
 8000c94:	b21b      	sxth	r3, r3
 8000c96:	f003 0320 	and.w	r3, r3, #32
 8000c9a:	b21b      	sxth	r3, r3
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	b21a      	sxth	r2, r3
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
 8000ca2:	105b      	asrs	r3, r3, #1
 8000ca4:	b21b      	sxth	r3, r3
 8000ca6:	f003 031f 	and.w	r3, r3, #31
 8000caa:	b21b      	sxth	r3, r3
 8000cac:	4313      	orrs	r3, r2
 8000cae:	b21b      	sxth	r3, r3
 8000cb0:	b29b      	uxth	r3, r3
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <color565_to_r>:
static uint8_t color565_to_r(uint16_t color) {
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 8000cc8:	88fb      	ldrh	r3, [r7, #6]
 8000cca:	121b      	asrs	r3, r3, #8
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	f023 0307 	bic.w	r3, r3, #7
 8000cd2:	b2db      	uxtb	r3, r3
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <color565_to_g>:
static uint8_t color565_to_g(uint16_t color) {
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	10db      	asrs	r3, r3, #3
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	f023 0303 	bic.w	r3, r3, #3
 8000cf4:	b2db      	uxtb	r3, r3
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <color565_to_b>:
static uint8_t color565_to_b(uint16_t color) {
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	4603      	mov	r3, r0
 8000d0a:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 8000d0c:	88fb      	ldrh	r3, [r7, #6]
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	b2db      	uxtb	r3, r3
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <color565>:

uint16_t color565(uint8_t r, uint8_t g, uint8_t b) { return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3); }
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4603      	mov	r3, r0
 8000d26:	71fb      	strb	r3, [r7, #7]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	71bb      	strb	r3, [r7, #6]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	717b      	strb	r3, [r7, #5]
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	021b      	lsls	r3, r3, #8
 8000d34:	b21b      	sxth	r3, r3
 8000d36:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000d3a:	f023 0307 	bic.w	r3, r3, #7
 8000d3e:	b21a      	sxth	r2, r3
 8000d40:	79bb      	ldrb	r3, [r7, #6]
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	b21b      	sxth	r3, r3
 8000d46:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000d4a:	b21b      	sxth	r3, r3
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	b21a      	sxth	r2, r3
 8000d50:	797b      	ldrb	r3, [r7, #5]
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	b21b      	sxth	r3, r3
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	b21b      	sxth	r3, r3
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <readPixel>:
uint16_t readPixel(int16_t x, int16_t y) { uint16_t color; readGRAM(x, y, &color, 1, 1); return color; }
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af02      	add	r7, sp, #8
 8000d70:	4603      	mov	r3, r0
 8000d72:	460a      	mov	r2, r1
 8000d74:	80fb      	strh	r3, [r7, #6]
 8000d76:	4613      	mov	r3, r2
 8000d78:	80bb      	strh	r3, [r7, #4]
 8000d7a:	f107 020e 	add.w	r2, r7, #14
 8000d7e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000d82:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000d86:	2301      	movs	r3, #1
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	f001 fa64 	bl	8002258 <readGRAM>
 8000d90:	89fb      	ldrh	r3, [r7, #14]
 8000d92:	4618      	mov	r0, r3
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	460a      	mov	r2, r1
 8000da4:	80fb      	strh	r3, [r7, #6]
 8000da6:	4613      	mov	r3, r2
 8000da8:	80bb      	strh	r3, [r7, #4]
 8000daa:	88ba      	ldrh	r2, [r7, #4]
 8000dac:	88fb      	ldrh	r3, [r7, #6]
 8000dae:	4611      	mov	r1, r2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 f903 	bl	8000fbc <writecmddata>
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <pushCommand>:

static void init_table(const void *table, int16_t size);

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block);

void pushCommand(uint16_t cmd, uint8_t * block, int8_t N) { WriteCmdParamN(cmd, N, block); }
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	6039      	str	r1, [r7, #0]
 8000dc8:	80fb      	strh	r3, [r7, #6]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	717b      	strb	r3, [r7, #5]
 8000dce:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8000dd2:	88fb      	ldrh	r3, [r7, #6]
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f9aa 	bl	8001130 <WriteCmdParamN>
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <startWrite>:

uint16_t _lcd_ID, _lcd_rev, _lcd_madctl, _lcd_drivOut, _MC, _MP, _MW, _SC, _EC, _SP, _EP;

//extern GFXfont *gfxFont;

void startWrite() {}
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <endWrite>:
void endWrite() {}
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <setReadDir>:

void setReadDir (void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 8000e04:	2101      	movs	r1, #1
 8000e06:	4811      	ldr	r0, [pc, #68]	; (8000e4c <setReadDir+0x4c>)
 8000e08:	f7ff fed2 	bl	8000bb0 <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	480f      	ldr	r0, [pc, #60]	; (8000e4c <setReadDir+0x4c>)
 8000e10:	f7ff fece 	bl	8000bb0 <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 8000e14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e18:	480d      	ldr	r0, [pc, #52]	; (8000e50 <setReadDir+0x50>)
 8000e1a:	f7ff fec9 	bl	8000bb0 <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 8000e1e:	2108      	movs	r1, #8
 8000e20:	480a      	ldr	r0, [pc, #40]	; (8000e4c <setReadDir+0x4c>)
 8000e22:	f7ff fec5 	bl	8000bb0 <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 8000e26:	2110      	movs	r1, #16
 8000e28:	4808      	ldr	r0, [pc, #32]	; (8000e4c <setReadDir+0x4c>)
 8000e2a:	f7ff fec1 	bl	8000bb0 <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 8000e2e:	2120      	movs	r1, #32
 8000e30:	4806      	ldr	r0, [pc, #24]	; (8000e4c <setReadDir+0x4c>)
 8000e32:	f7ff febd 	bl	8000bb0 <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 8000e36:	2140      	movs	r1, #64	; 0x40
 8000e38:	4804      	ldr	r0, [pc, #16]	; (8000e4c <setReadDir+0x4c>)
 8000e3a:	f7ff feb9 	bl	8000bb0 <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 8000e3e:	2120      	movs	r1, #32
 8000e40:	4803      	ldr	r0, [pc, #12]	; (8000e50 <setReadDir+0x50>)
 8000e42:	f7ff feb5 	bl	8000bb0 <PIN_INPUT>
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40020400 	.word	0x40020400
 8000e50:	40020000 	.word	0x40020000

08000e54 <setWriteDir>:

void setWriteDir (void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 8000e58:	2101      	movs	r1, #1
 8000e5a:	4811      	ldr	r0, [pc, #68]	; (8000ea0 <setWriteDir+0x4c>)
 8000e5c:	f7ff febe 	bl	8000bdc <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 8000e60:	2102      	movs	r1, #2
 8000e62:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <setWriteDir+0x4c>)
 8000e64:	f7ff feba 	bl	8000bdc <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 8000e68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e6c:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <setWriteDir+0x50>)
 8000e6e:	f7ff feb5 	bl	8000bdc <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 8000e72:	2108      	movs	r1, #8
 8000e74:	480a      	ldr	r0, [pc, #40]	; (8000ea0 <setWriteDir+0x4c>)
 8000e76:	f7ff feb1 	bl	8000bdc <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8000e7a:	2110      	movs	r1, #16
 8000e7c:	4808      	ldr	r0, [pc, #32]	; (8000ea0 <setWriteDir+0x4c>)
 8000e7e:	f7ff fead 	bl	8000bdc <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 8000e82:	2120      	movs	r1, #32
 8000e84:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <setWriteDir+0x4c>)
 8000e86:	f7ff fea9 	bl	8000bdc <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8000e8a:	2140      	movs	r1, #64	; 0x40
 8000e8c:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <setWriteDir+0x4c>)
 8000e8e:	f7ff fea5 	bl	8000bdc <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 8000e92:	2120      	movs	r1, #32
 8000e94:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <setWriteDir+0x50>)
 8000e96:	f7ff fea1 	bl	8000bdc <PIN_OUTPUT>
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <write24>:
    }
    CS_IDLE;
}

static void write24(uint16_t color)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80fb      	strh	r3, [r7, #6]
    uint8_t r = color565_to_r(color);
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff02 	bl	8000cbe <color565_to_r>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	73fb      	strb	r3, [r7, #15]
    uint8_t g = color565_to_g(color);
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff0d 	bl	8000ce0 <color565_to_g>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	73bb      	strb	r3, [r7, #14]
    uint8_t b = color565_to_b(color);
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff18 	bl	8000d02 <color565_to_b>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	737b      	strb	r3, [r7, #13]
    write8(r);
 8000ed6:	4b36      	ldr	r3, [pc, #216]	; (8000fb0 <write24+0x108>)
 8000ed8:	4a36      	ldr	r2, [pc, #216]	; (8000fb4 <write24+0x10c>)
 8000eda:	619a      	str	r2, [r3, #24]
 8000edc:	4b36      	ldr	r3, [pc, #216]	; (8000fb8 <write24+0x110>)
 8000ede:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8000ee2:	619a      	str	r2, [r3, #24]
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	035b      	lsls	r3, r3, #13
 8000ee8:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	109b      	asrs	r3, r3, #2
 8000ef0:	f003 0320 	and.w	r3, r3, #32
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	4b2e      	ldr	r3, [pc, #184]	; (8000fb0 <write24+0x108>)
 8000ef8:	619a      	str	r2, [r3, #24]
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	4a2e      	ldr	r2, [pc, #184]	; (8000fb8 <write24+0x110>)
 8000efe:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8000f02:	6193      	str	r3, [r2, #24]
 8000f04:	2102      	movs	r1, #2
 8000f06:	482a      	ldr	r0, [pc, #168]	; (8000fb0 <write24+0x108>)
 8000f08:	f7ff fe32 	bl	8000b70 <PIN_LOW>
 8000f0c:	2102      	movs	r1, #2
 8000f0e:	4828      	ldr	r0, [pc, #160]	; (8000fb0 <write24+0x108>)
 8000f10:	f7ff fe3e 	bl	8000b90 <PIN_HIGH>
 8000f14:	2102      	movs	r1, #2
 8000f16:	4826      	ldr	r0, [pc, #152]	; (8000fb0 <write24+0x108>)
 8000f18:	f7ff fe3a 	bl	8000b90 <PIN_HIGH>
    write8(g);
 8000f1c:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <write24+0x108>)
 8000f1e:	4a25      	ldr	r2, [pc, #148]	; (8000fb4 <write24+0x10c>)
 8000f20:	619a      	str	r2, [r3, #24]
 8000f22:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <write24+0x110>)
 8000f24:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8000f28:	619a      	str	r2, [r3, #24]
 8000f2a:	7bbb      	ldrb	r3, [r7, #14]
 8000f2c:	035b      	lsls	r3, r3, #13
 8000f2e:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8000f32:	7bbb      	ldrb	r3, [r7, #14]
 8000f34:	109b      	asrs	r3, r3, #2
 8000f36:	f003 0320 	and.w	r3, r3, #32
 8000f3a:	431a      	orrs	r2, r3
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <write24+0x108>)
 8000f3e:	619a      	str	r2, [r3, #24]
 8000f40:	7bbb      	ldrb	r3, [r7, #14]
 8000f42:	4a1d      	ldr	r2, [pc, #116]	; (8000fb8 <write24+0x110>)
 8000f44:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8000f48:	6193      	str	r3, [r2, #24]
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	4818      	ldr	r0, [pc, #96]	; (8000fb0 <write24+0x108>)
 8000f4e:	f7ff fe0f 	bl	8000b70 <PIN_LOW>
 8000f52:	2102      	movs	r1, #2
 8000f54:	4816      	ldr	r0, [pc, #88]	; (8000fb0 <write24+0x108>)
 8000f56:	f7ff fe1b 	bl	8000b90 <PIN_HIGH>
 8000f5a:	2102      	movs	r1, #2
 8000f5c:	4814      	ldr	r0, [pc, #80]	; (8000fb0 <write24+0x108>)
 8000f5e:	f7ff fe17 	bl	8000b90 <PIN_HIGH>
    write8(b);
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <write24+0x108>)
 8000f64:	4a13      	ldr	r2, [pc, #76]	; (8000fb4 <write24+0x10c>)
 8000f66:	619a      	str	r2, [r3, #24]
 8000f68:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <write24+0x110>)
 8000f6a:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8000f6e:	619a      	str	r2, [r3, #24]
 8000f70:	7b7b      	ldrb	r3, [r7, #13]
 8000f72:	035b      	lsls	r3, r3, #13
 8000f74:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8000f78:	7b7b      	ldrb	r3, [r7, #13]
 8000f7a:	109b      	asrs	r3, r3, #2
 8000f7c:	f003 0320 	and.w	r3, r3, #32
 8000f80:	431a      	orrs	r2, r3
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <write24+0x108>)
 8000f84:	619a      	str	r2, [r3, #24]
 8000f86:	7b7b      	ldrb	r3, [r7, #13]
 8000f88:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <write24+0x110>)
 8000f8a:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8000f8e:	6193      	str	r3, [r2, #24]
 8000f90:	2102      	movs	r1, #2
 8000f92:	4807      	ldr	r0, [pc, #28]	; (8000fb0 <write24+0x108>)
 8000f94:	f7ff fdec 	bl	8000b70 <PIN_LOW>
 8000f98:	2102      	movs	r1, #2
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <write24+0x108>)
 8000f9c:	f7ff fdf8 	bl	8000b90 <PIN_HIGH>
 8000fa0:	2102      	movs	r1, #2
 8000fa2:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <write24+0x108>)
 8000fa4:	f7ff fdf4 	bl	8000b90 <PIN_HIGH>
}
 8000fa8:	bf00      	nop
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	80200000 	.word	0x80200000
 8000fb8:	40020400 	.word	0x40020400

08000fbc <writecmddata>:

static void writecmddata(uint16_t cmd, uint16_t dat)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	460a      	mov	r2, r1
 8000fc6:	80fb      	strh	r3, [r7, #6]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	80bb      	strh	r3, [r7, #4]
    CS_ACTIVE;
 8000fcc:	2108      	movs	r1, #8
 8000fce:	4855      	ldr	r0, [pc, #340]	; (8001124 <writecmddata+0x168>)
 8000fd0:	f7ff fdce 	bl	8000b70 <PIN_LOW>
    WriteCmd(cmd);
 8000fd4:	2104      	movs	r1, #4
 8000fd6:	4853      	ldr	r0, [pc, #332]	; (8001124 <writecmddata+0x168>)
 8000fd8:	f7ff fdca 	bl	8000b70 <PIN_LOW>
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	0a1b      	lsrs	r3, r3, #8
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	88fb      	ldrh	r3, [r7, #6]
 8000fe6:	73bb      	strb	r3, [r7, #14]
 8000fe8:	4b4e      	ldr	r3, [pc, #312]	; (8001124 <writecmddata+0x168>)
 8000fea:	4a4f      	ldr	r2, [pc, #316]	; (8001128 <writecmddata+0x16c>)
 8000fec:	619a      	str	r2, [r3, #24]
 8000fee:	4b4f      	ldr	r3, [pc, #316]	; (800112c <writecmddata+0x170>)
 8000ff0:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8000ff4:	619a      	str	r2, [r3, #24]
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	035b      	lsls	r3, r3, #13
 8000ffa:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	109b      	asrs	r3, r3, #2
 8001002:	f003 0320 	and.w	r3, r3, #32
 8001006:	431a      	orrs	r2, r3
 8001008:	4b46      	ldr	r3, [pc, #280]	; (8001124 <writecmddata+0x168>)
 800100a:	619a      	str	r2, [r3, #24]
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	4a47      	ldr	r2, [pc, #284]	; (800112c <writecmddata+0x170>)
 8001010:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8001014:	6193      	str	r3, [r2, #24]
 8001016:	2102      	movs	r1, #2
 8001018:	4842      	ldr	r0, [pc, #264]	; (8001124 <writecmddata+0x168>)
 800101a:	f7ff fda9 	bl	8000b70 <PIN_LOW>
 800101e:	2102      	movs	r1, #2
 8001020:	4840      	ldr	r0, [pc, #256]	; (8001124 <writecmddata+0x168>)
 8001022:	f7ff fdb5 	bl	8000b90 <PIN_HIGH>
 8001026:	2102      	movs	r1, #2
 8001028:	483e      	ldr	r0, [pc, #248]	; (8001124 <writecmddata+0x168>)
 800102a:	f7ff fdb1 	bl	8000b90 <PIN_HIGH>
 800102e:	4b3d      	ldr	r3, [pc, #244]	; (8001124 <writecmddata+0x168>)
 8001030:	4a3d      	ldr	r2, [pc, #244]	; (8001128 <writecmddata+0x16c>)
 8001032:	619a      	str	r2, [r3, #24]
 8001034:	4b3d      	ldr	r3, [pc, #244]	; (800112c <writecmddata+0x170>)
 8001036:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 800103a:	619a      	str	r2, [r3, #24]
 800103c:	7bbb      	ldrb	r3, [r7, #14]
 800103e:	035b      	lsls	r3, r3, #13
 8001040:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8001044:	7bbb      	ldrb	r3, [r7, #14]
 8001046:	109b      	asrs	r3, r3, #2
 8001048:	f003 0320 	and.w	r3, r3, #32
 800104c:	431a      	orrs	r2, r3
 800104e:	4b35      	ldr	r3, [pc, #212]	; (8001124 <writecmddata+0x168>)
 8001050:	619a      	str	r2, [r3, #24]
 8001052:	7bbb      	ldrb	r3, [r7, #14]
 8001054:	4a35      	ldr	r2, [pc, #212]	; (800112c <writecmddata+0x170>)
 8001056:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 800105a:	6193      	str	r3, [r2, #24]
 800105c:	2102      	movs	r1, #2
 800105e:	4831      	ldr	r0, [pc, #196]	; (8001124 <writecmddata+0x168>)
 8001060:	f7ff fd86 	bl	8000b70 <PIN_LOW>
 8001064:	2102      	movs	r1, #2
 8001066:	482f      	ldr	r0, [pc, #188]	; (8001124 <writecmddata+0x168>)
 8001068:	f7ff fd92 	bl	8000b90 <PIN_HIGH>
 800106c:	2102      	movs	r1, #2
 800106e:	482d      	ldr	r0, [pc, #180]	; (8001124 <writecmddata+0x168>)
 8001070:	f7ff fd8e 	bl	8000b90 <PIN_HIGH>
 8001074:	2104      	movs	r1, #4
 8001076:	482b      	ldr	r0, [pc, #172]	; (8001124 <writecmddata+0x168>)
 8001078:	f7ff fd8a 	bl	8000b90 <PIN_HIGH>
    WriteData(dat);
 800107c:	88bb      	ldrh	r3, [r7, #4]
 800107e:	0a1b      	lsrs	r3, r3, #8
 8001080:	b29b      	uxth	r3, r3
 8001082:	737b      	strb	r3, [r7, #13]
 8001084:	88bb      	ldrh	r3, [r7, #4]
 8001086:	733b      	strb	r3, [r7, #12]
 8001088:	4b26      	ldr	r3, [pc, #152]	; (8001124 <writecmddata+0x168>)
 800108a:	4a27      	ldr	r2, [pc, #156]	; (8001128 <writecmddata+0x16c>)
 800108c:	619a      	str	r2, [r3, #24]
 800108e:	4b27      	ldr	r3, [pc, #156]	; (800112c <writecmddata+0x170>)
 8001090:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8001094:	619a      	str	r2, [r3, #24]
 8001096:	7b7b      	ldrb	r3, [r7, #13]
 8001098:	035b      	lsls	r3, r3, #13
 800109a:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 800109e:	7b7b      	ldrb	r3, [r7, #13]
 80010a0:	109b      	asrs	r3, r3, #2
 80010a2:	f003 0320 	and.w	r3, r3, #32
 80010a6:	431a      	orrs	r2, r3
 80010a8:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <writecmddata+0x168>)
 80010aa:	619a      	str	r2, [r3, #24]
 80010ac:	7b7b      	ldrb	r3, [r7, #13]
 80010ae:	4a1f      	ldr	r2, [pc, #124]	; (800112c <writecmddata+0x170>)
 80010b0:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 80010b4:	6193      	str	r3, [r2, #24]
 80010b6:	2102      	movs	r1, #2
 80010b8:	481a      	ldr	r0, [pc, #104]	; (8001124 <writecmddata+0x168>)
 80010ba:	f7ff fd59 	bl	8000b70 <PIN_LOW>
 80010be:	2102      	movs	r1, #2
 80010c0:	4818      	ldr	r0, [pc, #96]	; (8001124 <writecmddata+0x168>)
 80010c2:	f7ff fd65 	bl	8000b90 <PIN_HIGH>
 80010c6:	2102      	movs	r1, #2
 80010c8:	4816      	ldr	r0, [pc, #88]	; (8001124 <writecmddata+0x168>)
 80010ca:	f7ff fd61 	bl	8000b90 <PIN_HIGH>
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <writecmddata+0x168>)
 80010d0:	4a15      	ldr	r2, [pc, #84]	; (8001128 <writecmddata+0x16c>)
 80010d2:	619a      	str	r2, [r3, #24]
 80010d4:	4b15      	ldr	r3, [pc, #84]	; (800112c <writecmddata+0x170>)
 80010d6:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 80010da:	619a      	str	r2, [r3, #24]
 80010dc:	7b3b      	ldrb	r3, [r7, #12]
 80010de:	035b      	lsls	r3, r3, #13
 80010e0:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 80010e4:	7b3b      	ldrb	r3, [r7, #12]
 80010e6:	109b      	asrs	r3, r3, #2
 80010e8:	f003 0320 	and.w	r3, r3, #32
 80010ec:	431a      	orrs	r2, r3
 80010ee:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <writecmddata+0x168>)
 80010f0:	619a      	str	r2, [r3, #24]
 80010f2:	7b3b      	ldrb	r3, [r7, #12]
 80010f4:	4a0d      	ldr	r2, [pc, #52]	; (800112c <writecmddata+0x170>)
 80010f6:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 80010fa:	6193      	str	r3, [r2, #24]
 80010fc:	2102      	movs	r1, #2
 80010fe:	4809      	ldr	r0, [pc, #36]	; (8001124 <writecmddata+0x168>)
 8001100:	f7ff fd36 	bl	8000b70 <PIN_LOW>
 8001104:	2102      	movs	r1, #2
 8001106:	4807      	ldr	r0, [pc, #28]	; (8001124 <writecmddata+0x168>)
 8001108:	f7ff fd42 	bl	8000b90 <PIN_HIGH>
 800110c:	2102      	movs	r1, #2
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <writecmddata+0x168>)
 8001110:	f7ff fd3e 	bl	8000b90 <PIN_HIGH>
    CS_IDLE;
 8001114:	2108      	movs	r1, #8
 8001116:	4803      	ldr	r0, [pc, #12]	; (8001124 <writecmddata+0x168>)
 8001118:	f7ff fd3a 	bl	8000b90 <PIN_HIGH>
}
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40020000 	.word	0x40020000
 8001128:	80200000 	.word	0x80200000
 800112c:	40020400 	.word	0x40020400

08001130 <WriteCmdParamN>:

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	603a      	str	r2, [r7, #0]
 800113a:	80fb      	strh	r3, [r7, #6]
 800113c:	460b      	mov	r3, r1
 800113e:	717b      	strb	r3, [r7, #5]
    CS_ACTIVE;
 8001140:	2108      	movs	r1, #8
 8001142:	4878      	ldr	r0, [pc, #480]	; (8001324 <WriteCmdParamN+0x1f4>)
 8001144:	f7ff fd14 	bl	8000b70 <PIN_LOW>
    WriteCmd(cmd);
 8001148:	2104      	movs	r1, #4
 800114a:	4876      	ldr	r0, [pc, #472]	; (8001324 <WriteCmdParamN+0x1f4>)
 800114c:	f7ff fd10 	bl	8000b70 <PIN_LOW>
 8001150:	88fb      	ldrh	r3, [r7, #6]
 8001152:	0a1b      	lsrs	r3, r3, #8
 8001154:	b29b      	uxth	r3, r3
 8001156:	73fb      	strb	r3, [r7, #15]
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	73bb      	strb	r3, [r7, #14]
 800115c:	4b71      	ldr	r3, [pc, #452]	; (8001324 <WriteCmdParamN+0x1f4>)
 800115e:	4a72      	ldr	r2, [pc, #456]	; (8001328 <WriteCmdParamN+0x1f8>)
 8001160:	619a      	str	r2, [r3, #24]
 8001162:	4b72      	ldr	r3, [pc, #456]	; (800132c <WriteCmdParamN+0x1fc>)
 8001164:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8001168:	619a      	str	r2, [r3, #24]
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	035b      	lsls	r3, r3, #13
 800116e:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	109b      	asrs	r3, r3, #2
 8001176:	f003 0320 	and.w	r3, r3, #32
 800117a:	431a      	orrs	r2, r3
 800117c:	4b69      	ldr	r3, [pc, #420]	; (8001324 <WriteCmdParamN+0x1f4>)
 800117e:	619a      	str	r2, [r3, #24]
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	4a6a      	ldr	r2, [pc, #424]	; (800132c <WriteCmdParamN+0x1fc>)
 8001184:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8001188:	6193      	str	r3, [r2, #24]
 800118a:	2102      	movs	r1, #2
 800118c:	4865      	ldr	r0, [pc, #404]	; (8001324 <WriteCmdParamN+0x1f4>)
 800118e:	f7ff fcef 	bl	8000b70 <PIN_LOW>
 8001192:	2102      	movs	r1, #2
 8001194:	4863      	ldr	r0, [pc, #396]	; (8001324 <WriteCmdParamN+0x1f4>)
 8001196:	f7ff fcfb 	bl	8000b90 <PIN_HIGH>
 800119a:	2102      	movs	r1, #2
 800119c:	4861      	ldr	r0, [pc, #388]	; (8001324 <WriteCmdParamN+0x1f4>)
 800119e:	f7ff fcf7 	bl	8000b90 <PIN_HIGH>
 80011a2:	4b60      	ldr	r3, [pc, #384]	; (8001324 <WriteCmdParamN+0x1f4>)
 80011a4:	4a60      	ldr	r2, [pc, #384]	; (8001328 <WriteCmdParamN+0x1f8>)
 80011a6:	619a      	str	r2, [r3, #24]
 80011a8:	4b60      	ldr	r3, [pc, #384]	; (800132c <WriteCmdParamN+0x1fc>)
 80011aa:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 80011ae:	619a      	str	r2, [r3, #24]
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	035b      	lsls	r3, r3, #13
 80011b4:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 80011b8:	7bbb      	ldrb	r3, [r7, #14]
 80011ba:	109b      	asrs	r3, r3, #2
 80011bc:	f003 0320 	and.w	r3, r3, #32
 80011c0:	431a      	orrs	r2, r3
 80011c2:	4b58      	ldr	r3, [pc, #352]	; (8001324 <WriteCmdParamN+0x1f4>)
 80011c4:	619a      	str	r2, [r3, #24]
 80011c6:	7bbb      	ldrb	r3, [r7, #14]
 80011c8:	4a58      	ldr	r2, [pc, #352]	; (800132c <WriteCmdParamN+0x1fc>)
 80011ca:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	2102      	movs	r1, #2
 80011d2:	4854      	ldr	r0, [pc, #336]	; (8001324 <WriteCmdParamN+0x1f4>)
 80011d4:	f7ff fccc 	bl	8000b70 <PIN_LOW>
 80011d8:	2102      	movs	r1, #2
 80011da:	4852      	ldr	r0, [pc, #328]	; (8001324 <WriteCmdParamN+0x1f4>)
 80011dc:	f7ff fcd8 	bl	8000b90 <PIN_HIGH>
 80011e0:	2102      	movs	r1, #2
 80011e2:	4850      	ldr	r0, [pc, #320]	; (8001324 <WriteCmdParamN+0x1f4>)
 80011e4:	f7ff fcd4 	bl	8000b90 <PIN_HIGH>
 80011e8:	2104      	movs	r1, #4
 80011ea:	484e      	ldr	r0, [pc, #312]	; (8001324 <WriteCmdParamN+0x1f4>)
 80011ec:	f7ff fcd0 	bl	8000b90 <PIN_HIGH>
    while (N-- > 0) {
 80011f0:	e086      	b.n	8001300 <WriteCmdParamN+0x1d0>
        uint8_t u8 = *block++;
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	603a      	str	r2, [r7, #0]
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	737b      	strb	r3, [r7, #13]
        write8(u8);
 80011fc:	4b49      	ldr	r3, [pc, #292]	; (8001324 <WriteCmdParamN+0x1f4>)
 80011fe:	4a4a      	ldr	r2, [pc, #296]	; (8001328 <WriteCmdParamN+0x1f8>)
 8001200:	619a      	str	r2, [r3, #24]
 8001202:	4b4a      	ldr	r3, [pc, #296]	; (800132c <WriteCmdParamN+0x1fc>)
 8001204:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8001208:	619a      	str	r2, [r3, #24]
 800120a:	7b7b      	ldrb	r3, [r7, #13]
 800120c:	035b      	lsls	r3, r3, #13
 800120e:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8001212:	7b7b      	ldrb	r3, [r7, #13]
 8001214:	109b      	asrs	r3, r3, #2
 8001216:	f003 0320 	and.w	r3, r3, #32
 800121a:	431a      	orrs	r2, r3
 800121c:	4b41      	ldr	r3, [pc, #260]	; (8001324 <WriteCmdParamN+0x1f4>)
 800121e:	619a      	str	r2, [r3, #24]
 8001220:	7b7b      	ldrb	r3, [r7, #13]
 8001222:	4a42      	ldr	r2, [pc, #264]	; (800132c <WriteCmdParamN+0x1fc>)
 8001224:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8001228:	6193      	str	r3, [r2, #24]
 800122a:	2102      	movs	r1, #2
 800122c:	483d      	ldr	r0, [pc, #244]	; (8001324 <WriteCmdParamN+0x1f4>)
 800122e:	f7ff fc9f 	bl	8000b70 <PIN_LOW>
 8001232:	2102      	movs	r1, #2
 8001234:	483b      	ldr	r0, [pc, #236]	; (8001324 <WriteCmdParamN+0x1f4>)
 8001236:	f7ff fcab 	bl	8000b90 <PIN_HIGH>
 800123a:	2102      	movs	r1, #2
 800123c:	4839      	ldr	r0, [pc, #228]	; (8001324 <WriteCmdParamN+0x1f4>)
 800123e:	f7ff fca7 	bl	8000b90 <PIN_HIGH>
        if (N && is8347) {
 8001242:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d05a      	beq.n	8001300 <WriteCmdParamN+0x1d0>
 800124a:	4b39      	ldr	r3, [pc, #228]	; (8001330 <WriteCmdParamN+0x200>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d056      	beq.n	8001300 <WriteCmdParamN+0x1d0>
            cmd++;
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	3301      	adds	r3, #1
 8001256:	80fb      	strh	r3, [r7, #6]
            WriteCmd(cmd);
 8001258:	2104      	movs	r1, #4
 800125a:	4832      	ldr	r0, [pc, #200]	; (8001324 <WriteCmdParamN+0x1f4>)
 800125c:	f7ff fc88 	bl	8000b70 <PIN_LOW>
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	0a1b      	lsrs	r3, r3, #8
 8001264:	b29b      	uxth	r3, r3
 8001266:	733b      	strb	r3, [r7, #12]
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	72fb      	strb	r3, [r7, #11]
 800126c:	4b2d      	ldr	r3, [pc, #180]	; (8001324 <WriteCmdParamN+0x1f4>)
 800126e:	4a2e      	ldr	r2, [pc, #184]	; (8001328 <WriteCmdParamN+0x1f8>)
 8001270:	619a      	str	r2, [r3, #24]
 8001272:	4b2e      	ldr	r3, [pc, #184]	; (800132c <WriteCmdParamN+0x1fc>)
 8001274:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8001278:	619a      	str	r2, [r3, #24]
 800127a:	7b3b      	ldrb	r3, [r7, #12]
 800127c:	035b      	lsls	r3, r3, #13
 800127e:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8001282:	7b3b      	ldrb	r3, [r7, #12]
 8001284:	109b      	asrs	r3, r3, #2
 8001286:	f003 0320 	and.w	r3, r3, #32
 800128a:	431a      	orrs	r2, r3
 800128c:	4b25      	ldr	r3, [pc, #148]	; (8001324 <WriteCmdParamN+0x1f4>)
 800128e:	619a      	str	r2, [r3, #24]
 8001290:	7b3b      	ldrb	r3, [r7, #12]
 8001292:	4a26      	ldr	r2, [pc, #152]	; (800132c <WriteCmdParamN+0x1fc>)
 8001294:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8001298:	6193      	str	r3, [r2, #24]
 800129a:	2102      	movs	r1, #2
 800129c:	4821      	ldr	r0, [pc, #132]	; (8001324 <WriteCmdParamN+0x1f4>)
 800129e:	f7ff fc67 	bl	8000b70 <PIN_LOW>
 80012a2:	2102      	movs	r1, #2
 80012a4:	481f      	ldr	r0, [pc, #124]	; (8001324 <WriteCmdParamN+0x1f4>)
 80012a6:	f7ff fc73 	bl	8000b90 <PIN_HIGH>
 80012aa:	2102      	movs	r1, #2
 80012ac:	481d      	ldr	r0, [pc, #116]	; (8001324 <WriteCmdParamN+0x1f4>)
 80012ae:	f7ff fc6f 	bl	8000b90 <PIN_HIGH>
 80012b2:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <WriteCmdParamN+0x1f4>)
 80012b4:	4a1c      	ldr	r2, [pc, #112]	; (8001328 <WriteCmdParamN+0x1f8>)
 80012b6:	619a      	str	r2, [r3, #24]
 80012b8:	4b1c      	ldr	r3, [pc, #112]	; (800132c <WriteCmdParamN+0x1fc>)
 80012ba:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 80012be:	619a      	str	r2, [r3, #24]
 80012c0:	7afb      	ldrb	r3, [r7, #11]
 80012c2:	035b      	lsls	r3, r3, #13
 80012c4:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 80012c8:	7afb      	ldrb	r3, [r7, #11]
 80012ca:	109b      	asrs	r3, r3, #2
 80012cc:	f003 0320 	and.w	r3, r3, #32
 80012d0:	431a      	orrs	r2, r3
 80012d2:	4b14      	ldr	r3, [pc, #80]	; (8001324 <WriteCmdParamN+0x1f4>)
 80012d4:	619a      	str	r2, [r3, #24]
 80012d6:	7afb      	ldrb	r3, [r7, #11]
 80012d8:	4a14      	ldr	r2, [pc, #80]	; (800132c <WriteCmdParamN+0x1fc>)
 80012da:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 80012de:	6193      	str	r3, [r2, #24]
 80012e0:	2102      	movs	r1, #2
 80012e2:	4810      	ldr	r0, [pc, #64]	; (8001324 <WriteCmdParamN+0x1f4>)
 80012e4:	f7ff fc44 	bl	8000b70 <PIN_LOW>
 80012e8:	2102      	movs	r1, #2
 80012ea:	480e      	ldr	r0, [pc, #56]	; (8001324 <WriteCmdParamN+0x1f4>)
 80012ec:	f7ff fc50 	bl	8000b90 <PIN_HIGH>
 80012f0:	2102      	movs	r1, #2
 80012f2:	480c      	ldr	r0, [pc, #48]	; (8001324 <WriteCmdParamN+0x1f4>)
 80012f4:	f7ff fc4c 	bl	8000b90 <PIN_HIGH>
 80012f8:	2104      	movs	r1, #4
 80012fa:	480a      	ldr	r0, [pc, #40]	; (8001324 <WriteCmdParamN+0x1f4>)
 80012fc:	f7ff fc48 	bl	8000b90 <PIN_HIGH>
    while (N-- > 0) {
 8001300:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001304:	b2da      	uxtb	r2, r3
 8001306:	3a01      	subs	r2, #1
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	717a      	strb	r2, [r7, #5]
 800130c:	2b00      	cmp	r3, #0
 800130e:	f73f af70 	bgt.w	80011f2 <WriteCmdParamN+0xc2>
        }
    }
    CS_IDLE;
 8001312:	2108      	movs	r1, #8
 8001314:	4803      	ldr	r0, [pc, #12]	; (8001324 <WriteCmdParamN+0x1f4>)
 8001316:	f7ff fc3b 	bl	8000b90 <PIN_HIGH>
}
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40020000 	.word	0x40020000
 8001328:	80200000 	.word	0x80200000
 800132c:	40020400 	.word	0x40020400
 8001330:	2000010d 	.word	0x2000010d

08001334 <WriteCmdParam4>:

static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 8001334:	b590      	push	{r4, r7, lr}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	4604      	mov	r4, r0
 800133c:	4608      	mov	r0, r1
 800133e:	4611      	mov	r1, r2
 8001340:	461a      	mov	r2, r3
 8001342:	4623      	mov	r3, r4
 8001344:	71fb      	strb	r3, [r7, #7]
 8001346:	4603      	mov	r3, r0
 8001348:	71bb      	strb	r3, [r7, #6]
 800134a:	460b      	mov	r3, r1
 800134c:	717b      	strb	r3, [r7, #5]
 800134e:	4613      	mov	r3, r2
 8001350:	713b      	strb	r3, [r7, #4]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 8001352:	79bb      	ldrb	r3, [r7, #6]
 8001354:	733b      	strb	r3, [r7, #12]
 8001356:	797b      	ldrb	r3, [r7, #5]
 8001358:	737b      	strb	r3, [r7, #13]
 800135a:	793b      	ldrb	r3, [r7, #4]
 800135c:	73bb      	strb	r3, [r7, #14]
 800135e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001362:	73fb      	strb	r3, [r7, #15]
    WriteCmdParamN(cmd, 4, d);
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	b29b      	uxth	r3, r3
 8001368:	f107 020c 	add.w	r2, r7, #12
 800136c:	2104      	movs	r1, #4
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fede 	bl	8001130 <WriteCmdParamN>
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	bd90      	pop	{r4, r7, pc}

0800137c <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F
static void init_table(const void *table, int16_t size)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	627b      	str	r3, [r7, #36]	; 0x24

    while (size > 0)
 800138c:	e046      	b.n	800141c <init_table+0xa0>
    {
        uint8_t cmd = pgm_read_byte(p++);
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	1c5a      	adds	r2, r3, #1
 8001392:	627a      	str	r2, [r7, #36]	; 0x24
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        uint8_t len = pgm_read_byte(p++);
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	1c5a      	adds	r2, r3, #1
 800139e:	627a      	str	r2, [r7, #36]	; 0x24
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (cmd == TFTLCD_DELAY8)
 80013a6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80013aa:	2b7f      	cmp	r3, #127	; 0x7f
 80013ac:	d108      	bne.n	80013c0 <init_table+0x44>
        {
            delay(len);
 80013ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fbc4 	bl	8000b40 <delay>
            len = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80013be:	e024      	b.n	800140a <init_table+0x8e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 80013c0:	2300      	movs	r3, #0
 80013c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80013c6:	e010      	b.n	80013ea <init_table+0x6e>
                dat[i] = pgm_read_byte(p++);
 80013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	627a      	str	r2, [r7, #36]	; 0x24
 80013ce:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80013d2:	7819      	ldrb	r1, [r3, #0]
 80013d4:	f102 0328 	add.w	r3, r2, #40	; 0x28
 80013d8:	443b      	add	r3, r7
 80013da:	460a      	mov	r2, r1
 80013dc:	f803 2c20 	strb.w	r2, [r3, #-32]
            for (uint8_t i = 0; i < len; i++)
 80013e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80013e4:	3301      	adds	r3, #1
 80013e6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80013ea:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80013ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d3e8      	bcc.n	80013c8 <init_table+0x4c>
            WriteCmdParamN(cmd, len, dat);
 80013f6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8001400:	f107 0208 	add.w	r2, r7, #8
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fe93 	bl	8001130 <WriteCmdParamN>
        }
        size -= len + 2;
 800140a:	887a      	ldrh	r2, [r7, #2]
 800140c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001410:	b29b      	uxth	r3, r3
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	b29b      	uxth	r3, r3
 8001416:	3b02      	subs	r3, #2
 8001418:	b29b      	uxth	r3, r3
 800141a:	807b      	strh	r3, [r7, #2]
    while (size > 0)
 800141c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001420:	2b00      	cmp	r3, #0
 8001422:	dcb4      	bgt.n	800138e <init_table+0x12>
    }
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	3728      	adds	r7, #40	; 0x28
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <init_table16>:


static void init_table16(const void *table, int16_t size)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b084      	sub	sp, #16
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
 8001436:	460b      	mov	r3, r1
 8001438:	807b      	strh	r3, [r7, #2]
    uint16_t *p = (uint16_t *) table;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	60fb      	str	r3, [r7, #12]
    while (size > 0) {
 800143e:	e01d      	b.n	800147c <init_table16+0x4e>
        uint16_t cmd = pgm_read_word(p++);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	1c9a      	adds	r2, r3, #2
 8001444:	60fa      	str	r2, [r7, #12]
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	817b      	strh	r3, [r7, #10]
        uint16_t d = pgm_read_word(p++);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	1c9a      	adds	r2, r3, #2
 800144e:	60fa      	str	r2, [r7, #12]
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	813b      	strh	r3, [r7, #8]
        if (cmd == TFTLCD_DELAY)
 8001454:	897b      	ldrh	r3, [r7, #10]
 8001456:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800145a:	4293      	cmp	r3, r2
 800145c:	d104      	bne.n	8001468 <init_table16+0x3a>
            delay(d);
 800145e:	893b      	ldrh	r3, [r7, #8]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fb6d 	bl	8000b40 <delay>
 8001466:	e005      	b.n	8001474 <init_table16+0x46>
        else {
			writecmddata(cmd, d);                      //static function
 8001468:	893a      	ldrh	r2, [r7, #8]
 800146a:	897b      	ldrh	r3, [r7, #10]
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fda4 	bl	8000fbc <writecmddata>
        }
        size -= 2 * sizeof(int16_t);
 8001474:	887b      	ldrh	r3, [r7, #2]
 8001476:	3b04      	subs	r3, #4
 8001478:	b29b      	uxth	r3, r3
 800147a:	807b      	strh	r3, [r7, #2]
    while (size > 0) {
 800147c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001480:	2b00      	cmp	r3, #0
 8001482:	dcdd      	bgt.n	8001440 <init_table16+0x12>
    }
}
 8001484:	bf00      	nop
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <reset>:



void reset(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
    done_reset = 1;
 8001494:	4b1f      	ldr	r3, [pc, #124]	; (8001514 <reset+0x84>)
 8001496:	2201      	movs	r2, #1
 8001498:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 800149a:	f7ff fcdb 	bl	8000e54 <setWriteDir>
    CTL_INIT();
 800149e:	2101      	movs	r1, #1
 80014a0:	481d      	ldr	r0, [pc, #116]	; (8001518 <reset+0x88>)
 80014a2:	f7ff fb9b 	bl	8000bdc <PIN_OUTPUT>
 80014a6:	2102      	movs	r1, #2
 80014a8:	481b      	ldr	r0, [pc, #108]	; (8001518 <reset+0x88>)
 80014aa:	f7ff fb97 	bl	8000bdc <PIN_OUTPUT>
 80014ae:	2104      	movs	r1, #4
 80014b0:	4819      	ldr	r0, [pc, #100]	; (8001518 <reset+0x88>)
 80014b2:	f7ff fb93 	bl	8000bdc <PIN_OUTPUT>
 80014b6:	2108      	movs	r1, #8
 80014b8:	4817      	ldr	r0, [pc, #92]	; (8001518 <reset+0x88>)
 80014ba:	f7ff fb8f 	bl	8000bdc <PIN_OUTPUT>
 80014be:	2110      	movs	r1, #16
 80014c0:	4815      	ldr	r0, [pc, #84]	; (8001518 <reset+0x88>)
 80014c2:	f7ff fb8b 	bl	8000bdc <PIN_OUTPUT>
    CS_IDLE;
 80014c6:	2108      	movs	r1, #8
 80014c8:	4813      	ldr	r0, [pc, #76]	; (8001518 <reset+0x88>)
 80014ca:	f7ff fb61 	bl	8000b90 <PIN_HIGH>
    RD_IDLE;
 80014ce:	2101      	movs	r1, #1
 80014d0:	4811      	ldr	r0, [pc, #68]	; (8001518 <reset+0x88>)
 80014d2:	f7ff fb5d 	bl	8000b90 <PIN_HIGH>
    WR_IDLE;
 80014d6:	2102      	movs	r1, #2
 80014d8:	480f      	ldr	r0, [pc, #60]	; (8001518 <reset+0x88>)
 80014da:	f7ff fb59 	bl	8000b90 <PIN_HIGH>
    RESET_IDLE;
 80014de:	2110      	movs	r1, #16
 80014e0:	480d      	ldr	r0, [pc, #52]	; (8001518 <reset+0x88>)
 80014e2:	f7ff fb55 	bl	8000b90 <PIN_HIGH>
    delay(50);
 80014e6:	2032      	movs	r0, #50	; 0x32
 80014e8:	f7ff fb2a 	bl	8000b40 <delay>
    RESET_ACTIVE;
 80014ec:	2110      	movs	r1, #16
 80014ee:	480a      	ldr	r0, [pc, #40]	; (8001518 <reset+0x88>)
 80014f0:	f7ff fb3e 	bl	8000b70 <PIN_LOW>
    delay(100);
 80014f4:	2064      	movs	r0, #100	; 0x64
 80014f6:	f7ff fb23 	bl	8000b40 <delay>
    RESET_IDLE;
 80014fa:	2110      	movs	r1, #16
 80014fc:	4806      	ldr	r0, [pc, #24]	; (8001518 <reset+0x88>)
 80014fe:	f7ff fb47 	bl	8000b90 <PIN_HIGH>
    delay(100);
 8001502:	2064      	movs	r0, #100	; 0x64
 8001504:	f7ff fb1c 	bl	8000b40 <delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 8001508:	2100      	movs	r1, #0
 800150a:	20b0      	movs	r0, #176	; 0xb0
 800150c:	f7ff fc45 	bl	8000d9a <WriteCmdData>
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	2000010c 	.word	0x2000010c
 8001518:	40020000 	.word	0x40020000

0800151c <read16bits>:

static uint16_t read16bits(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 8001522:	2101      	movs	r1, #1
 8001524:	4862      	ldr	r0, [pc, #392]	; (80016b0 <read16bits+0x194>)
 8001526:	f7ff fb33 	bl	8000b90 <PIN_HIGH>
 800152a:	2101      	movs	r1, #1
 800152c:	4860      	ldr	r0, [pc, #384]	; (80016b0 <read16bits+0x194>)
 800152e:	f7ff fb1f 	bl	8000b70 <PIN_LOW>
 8001532:	2101      	movs	r1, #1
 8001534:	485e      	ldr	r0, [pc, #376]	; (80016b0 <read16bits+0x194>)
 8001536:	f7ff fb1b 	bl	8000b70 <PIN_LOW>
 800153a:	2101      	movs	r1, #1
 800153c:	485c      	ldr	r0, [pc, #368]	; (80016b0 <read16bits+0x194>)
 800153e:	f7ff fb17 	bl	8000b70 <PIN_LOW>
 8001542:	2101      	movs	r1, #1
 8001544:	485a      	ldr	r0, [pc, #360]	; (80016b0 <read16bits+0x194>)
 8001546:	f7ff fb13 	bl	8000b70 <PIN_LOW>
 800154a:	4b5a      	ldr	r3, [pc, #360]	; (80016b4 <read16bits+0x198>)
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	b29b      	uxth	r3, r3
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	b29a      	uxth	r2, r3
 8001556:	4b57      	ldr	r3, [pc, #348]	; (80016b4 <read16bits+0x198>)
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	b29b      	uxth	r3, r3
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	b29b      	uxth	r3, r3
 8001562:	4313      	orrs	r3, r2
 8001564:	b29a      	uxth	r2, r3
 8001566:	4b52      	ldr	r3, [pc, #328]	; (80016b0 <read16bits+0x194>)
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	0b5b      	lsrs	r3, r3, #13
 800156c:	b29b      	uxth	r3, r3
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	b29b      	uxth	r3, r3
 8001574:	4313      	orrs	r3, r2
 8001576:	b29a      	uxth	r2, r3
 8001578:	4b4e      	ldr	r3, [pc, #312]	; (80016b4 <read16bits+0x198>)
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	b29b      	uxth	r3, r3
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	b29b      	uxth	r3, r3
 8001584:	4313      	orrs	r3, r2
 8001586:	b29a      	uxth	r2, r3
 8001588:	4b4a      	ldr	r3, [pc, #296]	; (80016b4 <read16bits+0x198>)
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	b29b      	uxth	r3, r3
 800158e:	f003 0310 	and.w	r3, r3, #16
 8001592:	b29b      	uxth	r3, r3
 8001594:	4313      	orrs	r3, r2
 8001596:	b29a      	uxth	r2, r3
 8001598:	4b46      	ldr	r3, [pc, #280]	; (80016b4 <read16bits+0x198>)
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	b29b      	uxth	r3, r3
 800159e:	f003 0320 	and.w	r3, r3, #32
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	4313      	orrs	r3, r2
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	4b42      	ldr	r3, [pc, #264]	; (80016b4 <read16bits+0x198>)
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	4313      	orrs	r3, r2
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <read16bits+0x194>)
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	b29b      	uxth	r3, r3
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	4313      	orrs	r3, r2
 80015ca:	80fb      	strh	r3, [r7, #6]
 80015cc:	2101      	movs	r1, #1
 80015ce:	4838      	ldr	r0, [pc, #224]	; (80016b0 <read16bits+0x194>)
 80015d0:	f7ff fade 	bl	8000b90 <PIN_HIGH>
 80015d4:	2101      	movs	r1, #1
 80015d6:	4836      	ldr	r0, [pc, #216]	; (80016b0 <read16bits+0x194>)
 80015d8:	f7ff fada 	bl	8000b90 <PIN_HIGH>
    READ_8(lo);
 80015dc:	2101      	movs	r1, #1
 80015de:	4834      	ldr	r0, [pc, #208]	; (80016b0 <read16bits+0x194>)
 80015e0:	f7ff fad6 	bl	8000b90 <PIN_HIGH>
 80015e4:	2101      	movs	r1, #1
 80015e6:	4832      	ldr	r0, [pc, #200]	; (80016b0 <read16bits+0x194>)
 80015e8:	f7ff fac2 	bl	8000b70 <PIN_LOW>
 80015ec:	2101      	movs	r1, #1
 80015ee:	4830      	ldr	r0, [pc, #192]	; (80016b0 <read16bits+0x194>)
 80015f0:	f7ff fabe 	bl	8000b70 <PIN_LOW>
 80015f4:	2101      	movs	r1, #1
 80015f6:	482e      	ldr	r0, [pc, #184]	; (80016b0 <read16bits+0x194>)
 80015f8:	f7ff faba 	bl	8000b70 <PIN_LOW>
 80015fc:	2101      	movs	r1, #1
 80015fe:	482c      	ldr	r0, [pc, #176]	; (80016b0 <read16bits+0x194>)
 8001600:	f7ff fab6 	bl	8000b70 <PIN_LOW>
 8001604:	4b2b      	ldr	r3, [pc, #172]	; (80016b4 <read16bits+0x198>)
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	b2da      	uxtb	r2, r3
 8001610:	4b28      	ldr	r3, [pc, #160]	; (80016b4 <read16bits+0x198>)
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	b2db      	uxtb	r3, r3
 800161c:	4313      	orrs	r3, r2
 800161e:	b2da      	uxtb	r2, r3
 8001620:	4b23      	ldr	r3, [pc, #140]	; (80016b0 <read16bits+0x194>)
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	0b5b      	lsrs	r3, r3, #13
 8001626:	b2db      	uxtb	r3, r3
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	b2db      	uxtb	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <read16bits+0x198>)
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	f003 0308 	and.w	r3, r3, #8
 800163c:	b2db      	uxtb	r3, r3
 800163e:	4313      	orrs	r3, r2
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <read16bits+0x198>)
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	b2db      	uxtb	r3, r3
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	b2db      	uxtb	r3, r3
 800164e:	4313      	orrs	r3, r2
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <read16bits+0x198>)
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	f003 0320 	and.w	r3, r3, #32
 800165c:	b2db      	uxtb	r3, r3
 800165e:	4313      	orrs	r3, r2
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <read16bits+0x198>)
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	b2db      	uxtb	r3, r3
 8001668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800166c:	b2db      	uxtb	r3, r3
 800166e:	4313      	orrs	r3, r2
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <read16bits+0x194>)
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	b2db      	uxtb	r3, r3
 800167c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001680:	b2db      	uxtb	r3, r3
 8001682:	4313      	orrs	r3, r2
 8001684:	717b      	strb	r3, [r7, #5]
 8001686:	2101      	movs	r1, #1
 8001688:	4809      	ldr	r0, [pc, #36]	; (80016b0 <read16bits+0x194>)
 800168a:	f7ff fa81 	bl	8000b90 <PIN_HIGH>
 800168e:	2101      	movs	r1, #1
 8001690:	4807      	ldr	r0, [pc, #28]	; (80016b0 <read16bits+0x194>)
 8001692:	f7ff fa7d 	bl	8000b90 <PIN_HIGH>
    return (ret << 8) | lo;
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	021b      	lsls	r3, r3, #8
 800169a:	b21a      	sxth	r2, r3
 800169c:	797b      	ldrb	r3, [r7, #5]
 800169e:	b21b      	sxth	r3, r3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	b29b      	uxth	r3, r3
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40020000 	.word	0x40020000
 80016b4:	40020400 	.word	0x40020400

080016b8 <readReg>:

uint16_t readReg(uint16_t reg, int8_t index)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	460a      	mov	r2, r1
 80016c2:	80fb      	strh	r3, [r7, #6]
 80016c4:	4613      	mov	r3, r2
 80016c6:	717b      	strb	r3, [r7, #5]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 80016c8:	4b3e      	ldr	r3, [pc, #248]	; (80017c4 <readReg+0x10c>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <readReg+0x1c>
        reset();
 80016d0:	f7ff fede 	bl	8001490 <reset>
    CS_ACTIVE;
 80016d4:	2108      	movs	r1, #8
 80016d6:	483c      	ldr	r0, [pc, #240]	; (80017c8 <readReg+0x110>)
 80016d8:	f7ff fa4a 	bl	8000b70 <PIN_LOW>
    WriteCmd(reg);
 80016dc:	2104      	movs	r1, #4
 80016de:	483a      	ldr	r0, [pc, #232]	; (80017c8 <readReg+0x110>)
 80016e0:	f7ff fa46 	bl	8000b70 <PIN_LOW>
 80016e4:	88fb      	ldrh	r3, [r7, #6]
 80016e6:	0a1b      	lsrs	r3, r3, #8
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	73fb      	strb	r3, [r7, #15]
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	73bb      	strb	r3, [r7, #14]
 80016f0:	4b35      	ldr	r3, [pc, #212]	; (80017c8 <readReg+0x110>)
 80016f2:	4a36      	ldr	r2, [pc, #216]	; (80017cc <readReg+0x114>)
 80016f4:	619a      	str	r2, [r3, #24]
 80016f6:	4b36      	ldr	r3, [pc, #216]	; (80017d0 <readReg+0x118>)
 80016f8:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 80016fc:	619a      	str	r2, [r3, #24]
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	035b      	lsls	r3, r3, #13
 8001702:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	109b      	asrs	r3, r3, #2
 800170a:	f003 0320 	and.w	r3, r3, #32
 800170e:	431a      	orrs	r2, r3
 8001710:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <readReg+0x110>)
 8001712:	619a      	str	r2, [r3, #24]
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	4a2e      	ldr	r2, [pc, #184]	; (80017d0 <readReg+0x118>)
 8001718:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 800171c:	6193      	str	r3, [r2, #24]
 800171e:	2102      	movs	r1, #2
 8001720:	4829      	ldr	r0, [pc, #164]	; (80017c8 <readReg+0x110>)
 8001722:	f7ff fa25 	bl	8000b70 <PIN_LOW>
 8001726:	2102      	movs	r1, #2
 8001728:	4827      	ldr	r0, [pc, #156]	; (80017c8 <readReg+0x110>)
 800172a:	f7ff fa31 	bl	8000b90 <PIN_HIGH>
 800172e:	2102      	movs	r1, #2
 8001730:	4825      	ldr	r0, [pc, #148]	; (80017c8 <readReg+0x110>)
 8001732:	f7ff fa2d 	bl	8000b90 <PIN_HIGH>
 8001736:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <readReg+0x110>)
 8001738:	4a24      	ldr	r2, [pc, #144]	; (80017cc <readReg+0x114>)
 800173a:	619a      	str	r2, [r3, #24]
 800173c:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <readReg+0x118>)
 800173e:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8001742:	619a      	str	r2, [r3, #24]
 8001744:	7bbb      	ldrb	r3, [r7, #14]
 8001746:	035b      	lsls	r3, r3, #13
 8001748:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 800174c:	7bbb      	ldrb	r3, [r7, #14]
 800174e:	109b      	asrs	r3, r3, #2
 8001750:	f003 0320 	and.w	r3, r3, #32
 8001754:	431a      	orrs	r2, r3
 8001756:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <readReg+0x110>)
 8001758:	619a      	str	r2, [r3, #24]
 800175a:	7bbb      	ldrb	r3, [r7, #14]
 800175c:	4a1c      	ldr	r2, [pc, #112]	; (80017d0 <readReg+0x118>)
 800175e:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8001762:	6193      	str	r3, [r2, #24]
 8001764:	2102      	movs	r1, #2
 8001766:	4818      	ldr	r0, [pc, #96]	; (80017c8 <readReg+0x110>)
 8001768:	f7ff fa02 	bl	8000b70 <PIN_LOW>
 800176c:	2102      	movs	r1, #2
 800176e:	4816      	ldr	r0, [pc, #88]	; (80017c8 <readReg+0x110>)
 8001770:	f7ff fa0e 	bl	8000b90 <PIN_HIGH>
 8001774:	2102      	movs	r1, #2
 8001776:	4814      	ldr	r0, [pc, #80]	; (80017c8 <readReg+0x110>)
 8001778:	f7ff fa0a 	bl	8000b90 <PIN_HIGH>
 800177c:	2104      	movs	r1, #4
 800177e:	4812      	ldr	r0, [pc, #72]	; (80017c8 <readReg+0x110>)
 8001780:	f7ff fa06 	bl	8000b90 <PIN_HIGH>
    setReadDir();
 8001784:	f7ff fb3c 	bl	8000e00 <setReadDir>
    delay(1);    //1us should be adequate
 8001788:	2001      	movs	r0, #1
 800178a:	f7ff f9d9 	bl	8000b40 <delay>
    //    READ_16(ret);
    do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 800178e:	f7ff fec5 	bl	800151c <read16bits>
 8001792:	4603      	mov	r3, r0
 8001794:	81bb      	strh	r3, [r7, #12]
 8001796:	797b      	ldrb	r3, [r7, #5]
 8001798:	3b01      	subs	r3, #1
 800179a:	b2db      	uxtb	r3, r3
 800179c:	717b      	strb	r3, [r7, #5]
 800179e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	daf3      	bge.n	800178e <readReg+0xd6>
    RD_IDLE;
 80017a6:	2101      	movs	r1, #1
 80017a8:	4807      	ldr	r0, [pc, #28]	; (80017c8 <readReg+0x110>)
 80017aa:	f7ff f9f1 	bl	8000b90 <PIN_HIGH>
    CS_IDLE;
 80017ae:	2108      	movs	r1, #8
 80017b0:	4805      	ldr	r0, [pc, #20]	; (80017c8 <readReg+0x110>)
 80017b2:	f7ff f9ed 	bl	8000b90 <PIN_HIGH>
    setWriteDir();
 80017b6:	f7ff fb4d 	bl	8000e54 <setWriteDir>
    return ret;
 80017ba:	89bb      	ldrh	r3, [r7, #12]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	2000010c 	.word	0x2000010c
 80017c8:	40020000 	.word	0x40020000
 80017cc:	80200000 	.word	0x80200000
 80017d0:	40020400 	.word	0x40020400

080017d4 <readReg32>:

uint32_t readReg32(uint16_t reg)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ff68 	bl	80016b8 <readReg>
 80017e8:	4603      	mov	r3, r0
 80017ea:	81fb      	strh	r3, [r7, #14]
    uint16_t l = readReg(reg, 1);
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	2101      	movs	r1, #1
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff61 	bl	80016b8 <readReg>
 80017f6:	4603      	mov	r3, r0
 80017f8:	81bb      	strh	r3, [r7, #12]
    return ((uint32_t) h << 16) | (l);
 80017fa:	89fb      	ldrh	r3, [r7, #14]
 80017fc:	041a      	lsls	r2, r3, #16
 80017fe:	89bb      	ldrh	r3, [r7, #12]
 8001800:	4313      	orrs	r3, r2
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <readReg40>:

uint32_t readReg40(uint16_t reg)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b084      	sub	sp, #16
 800180e:	af00      	add	r7, sp, #0
 8001810:	4603      	mov	r3, r0
 8001812:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	2100      	movs	r1, #0
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff4d 	bl	80016b8 <readReg>
 800181e:	4603      	mov	r3, r0
 8001820:	81fb      	strh	r3, [r7, #14]
    uint16_t m = readReg(reg, 1);
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	2101      	movs	r1, #1
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff ff46 	bl	80016b8 <readReg>
 800182c:	4603      	mov	r3, r0
 800182e:	81bb      	strh	r3, [r7, #12]
    uint16_t l = readReg(reg, 2);
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	2102      	movs	r1, #2
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff3f 	bl	80016b8 <readReg>
 800183a:	4603      	mov	r3, r0
 800183c:	817b      	strh	r3, [r7, #10]
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 800183e:	89fb      	ldrh	r3, [r7, #14]
 8001840:	061b      	lsls	r3, r3, #24
 8001842:	89ba      	ldrh	r2, [r7, #12]
 8001844:	0212      	lsls	r2, r2, #8
 8001846:	4313      	orrs	r3, r2
 8001848:	897a      	ldrh	r2, [r7, #10]
 800184a:	0a12      	lsrs	r2, r2, #8
 800184c:	b292      	uxth	r2, r2
 800184e:	4313      	orrs	r3, r2
}
 8001850:	4618      	mov	r0, r3
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <tft_init>:

void tft_init(uint16_t ID)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	80fb      	strh	r3, [r7, #6]
	int dummy=0;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
    int16_t table_size;
    _lcd_xor = 0;
 800186a:	4bd3      	ldr	r3, [pc, #844]	; (8001bb8 <tft_init+0x360>)
 800186c:	2200      	movs	r2, #0
 800186e:	801a      	strh	r2, [r3, #0]
    switch (_lcd_ID = ID) {
 8001870:	4ad2      	ldr	r2, [pc, #840]	; (8001bbc <tft_init+0x364>)
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	8013      	strh	r3, [r2, #0]
 8001876:	4bd1      	ldr	r3, [pc, #836]	; (8001bbc <tft_init+0x364>)
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	f24c 5205 	movw	r2, #50437	; 0xc505
 800187e:	4293      	cmp	r3, r2
 8001880:	f000 8321 	beq.w	8001ec6 <tft_init+0x66e>
 8001884:	f24c 5205 	movw	r2, #50437	; 0xc505
 8001888:	4293      	cmp	r3, r2
 800188a:	f300 8334 	bgt.w	8001ef6 <tft_init+0x69e>
 800188e:	f24b 5209 	movw	r2, #46345	; 0xb509
 8001892:	4293      	cmp	r3, r2
 8001894:	f000 8320 	beq.w	8001ed8 <tft_init+0x680>
 8001898:	f24b 5209 	movw	r2, #46345	; 0xb509
 800189c:	4293      	cmp	r3, r2
 800189e:	f300 832a 	bgt.w	8001ef6 <tft_init+0x69e>
 80018a2:	f24b 5205 	movw	r2, #46341	; 0xb505
 80018a6:	4293      	cmp	r3, r2
 80018a8:	f000 830d 	beq.w	8001ec6 <tft_init+0x66e>
 80018ac:	f24b 5205 	movw	r2, #46341	; 0xb505
 80018b0:	4293      	cmp	r3, r2
 80018b2:	f300 8320 	bgt.w	8001ef6 <tft_init+0x69e>
 80018b6:	f64a 4211 	movw	r2, #44049	; 0xac11
 80018ba:	4293      	cmp	r3, r2
 80018bc:	f000 8253 	beq.w	8001d66 <tft_init+0x50e>
 80018c0:	f64a 4211 	movw	r2, #44049	; 0xac11
 80018c4:	4293      	cmp	r3, r2
 80018c6:	f300 8316 	bgt.w	8001ef6 <tft_init+0x69e>
 80018ca:	f249 4288 	movw	r2, #38024	; 0x9488
 80018ce:	4293      	cmp	r3, r2
 80018d0:	f300 8311 	bgt.w	8001ef6 <tft_init+0x69e>
 80018d4:	f249 4287 	movw	r2, #38023	; 0x9487
 80018d8:	4293      	cmp	r3, r2
 80018da:	f280 82dd 	bge.w	8001e98 <tft_init+0x640>
 80018de:	f249 4286 	movw	r2, #38022	; 0x9486
 80018e2:	4293      	cmp	r3, r2
 80018e4:	f000 82be 	beq.w	8001e64 <tft_init+0x60c>
 80018e8:	f249 4286 	movw	r2, #38022	; 0x9486
 80018ec:	4293      	cmp	r3, r2
 80018ee:	f300 8302 	bgt.w	8001ef6 <tft_init+0x69e>
 80018f2:	f249 4281 	movw	r2, #38017	; 0x9481
 80018f6:	4293      	cmp	r3, r2
 80018f8:	f000 8276 	beq.w	8001de8 <tft_init+0x590>
 80018fc:	f249 4281 	movw	r2, #38017	; 0x9481
 8001900:	4293      	cmp	r3, r2
 8001902:	f300 82f8 	bgt.w	8001ef6 <tft_init+0x69e>
 8001906:	f249 3242 	movw	r2, #37698	; 0x9342
 800190a:	4293      	cmp	r3, r2
 800190c:	f300 82f3 	bgt.w	8001ef6 <tft_init+0x69e>
 8001910:	f249 3202 	movw	r2, #37634	; 0x9302
 8001914:	4293      	cmp	r3, r2
 8001916:	f280 80af 	bge.w	8001a78 <tft_init+0x220>
 800191a:	f249 0290 	movw	r2, #37008	; 0x9090
 800191e:	4293      	cmp	r3, r2
 8001920:	f000 81a9 	beq.w	8001c76 <tft_init+0x41e>
 8001924:	f249 0290 	movw	r2, #37008	; 0x9090
 8001928:	4293      	cmp	r3, r2
 800192a:	f300 82e4 	bgt.w	8001ef6 <tft_init+0x69e>
 800192e:	f248 3257 	movw	r2, #33623	; 0x8357
 8001932:	4293      	cmp	r3, r2
 8001934:	f000 819a 	beq.w	8001c6c <tft_init+0x414>
 8001938:	f248 3257 	movw	r2, #33623	; 0x8357
 800193c:	4293      	cmp	r3, r2
 800193e:	f300 82da 	bgt.w	8001ef6 <tft_init+0x69e>
 8001942:	f248 0231 	movw	r2, #32817	; 0x8031
 8001946:	4293      	cmp	r3, r2
 8001948:	f000 8187 	beq.w	8001c5a <tft_init+0x402>
 800194c:	f248 0231 	movw	r2, #32817	; 0x8031
 8001950:	4293      	cmp	r3, r2
 8001952:	f300 82d0 	bgt.w	8001ef6 <tft_init+0x69e>
 8001956:	f247 7296 	movw	r2, #30614	; 0x7796
 800195a:	4293      	cmp	r3, r2
 800195c:	f000 8297 	beq.w	8001e8e <tft_init+0x636>
 8001960:	f247 7296 	movw	r2, #30614	; 0x7796
 8001964:	4293      	cmp	r3, r2
 8001966:	f300 82c6 	bgt.w	8001ef6 <tft_init+0x69e>
 800196a:	f247 7293 	movw	r2, #30611	; 0x7793
 800196e:	4293      	cmp	r3, r2
 8001970:	f000 82b2 	beq.w	8001ed8 <tft_init+0x680>
 8001974:	f247 7293 	movw	r2, #30611	; 0x7793
 8001978:	4293      	cmp	r3, r2
 800197a:	f300 82bc 	bgt.w	8001ef6 <tft_init+0x69e>
 800197e:	f247 7289 	movw	r2, #30601	; 0x7789
 8001982:	4293      	cmp	r3, r2
 8001984:	f000 8160 	beq.w	8001c48 <tft_init+0x3f0>
 8001988:	f247 7289 	movw	r2, #30601	; 0x7789
 800198c:	4293      	cmp	r3, r2
 800198e:	f300 82b2 	bgt.w	8001ef6 <tft_init+0x69e>
 8001992:	f646 0214 	movw	r2, #26644	; 0x6814
 8001996:	4293      	cmp	r3, r2
 8001998:	f000 8141 	beq.w	8001c1e <tft_init+0x3c6>
 800199c:	f646 0214 	movw	r2, #26644	; 0x6814
 80019a0:	4293      	cmp	r3, r2
 80019a2:	f300 82a8 	bgt.w	8001ef6 <tft_init+0x69e>
 80019a6:	f646 0209 	movw	r2, #26633	; 0x6809
 80019aa:	4293      	cmp	r3, r2
 80019ac:	f000 81a4 	beq.w	8001cf8 <tft_init+0x4a0>
 80019b0:	f646 0209 	movw	r2, #26633	; 0x6809
 80019b4:	4293      	cmp	r3, r2
 80019b6:	f300 829e 	bgt.w	8001ef6 <tft_init+0x69e>
 80019ba:	f245 4208 	movw	r2, #21512	; 0x5408
 80019be:	4293      	cmp	r3, r2
 80019c0:	f000 818a 	beq.w	8001cd8 <tft_init+0x480>
 80019c4:	f245 4208 	movw	r2, #21512	; 0x5408
 80019c8:	4293      	cmp	r3, r2
 80019ca:	f300 8294 	bgt.w	8001ef6 <tft_init+0x69e>
 80019ce:	f245 3210 	movw	r2, #21264	; 0x5310
 80019d2:	4293      	cmp	r3, r2
 80019d4:	f000 810e 	beq.w	8001bf4 <tft_init+0x39c>
 80019d8:	f245 3210 	movw	r2, #21264	; 0x5310
 80019dc:	4293      	cmp	r3, r2
 80019de:	f300 828a 	bgt.w	8001ef6 <tft_init+0x69e>
 80019e2:	f242 0253 	movw	r2, #8275	; 0x2053
 80019e6:	4293      	cmp	r3, r2
 80019e8:	f000 81b8 	beq.w	8001d5c <tft_init+0x504>
 80019ec:	f242 0253 	movw	r2, #8275	; 0x2053
 80019f0:	4293      	cmp	r3, r2
 80019f2:	f300 8280 	bgt.w	8001ef6 <tft_init+0x69e>
 80019f6:	f241 6202 	movw	r2, #5634	; 0x1602
 80019fa:	4293      	cmp	r3, r2
 80019fc:	f000 81a5 	beq.w	8001d4a <tft_init+0x4f2>
 8001a00:	f241 6202 	movw	r2, #5634	; 0x1602
 8001a04:	4293      	cmp	r3, r2
 8001a06:	f300 8276 	bgt.w	8001ef6 <tft_init+0x69e>
 8001a0a:	f241 5281 	movw	r2, #5505	; 0x1581
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	f000 81e5 	beq.w	8001dde <tft_init+0x586>
 8001a14:	f241 5281 	movw	r2, #5505	; 0x1581
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	f300 826c 	bgt.w	8001ef6 <tft_init+0x69e>
 8001a1e:	f241 5226 	movw	r2, #5414	; 0x1526
 8001a22:	4293      	cmp	r3, r2
 8001a24:	f000 80dd 	beq.w	8001be2 <tft_init+0x38a>
 8001a28:	f241 5226 	movw	r2, #5414	; 0x1526
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	f300 8262 	bgt.w	8001ef6 <tft_init+0x69e>
 8001a32:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8001a36:	f000 80cb 	beq.w	8001bd0 <tft_init+0x378>
 8001a3a:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8001a3e:	f300 825a 	bgt.w	8001ef6 <tft_init+0x69e>
 8001a42:	f241 5211 	movw	r2, #5393	; 0x1511
 8001a46:	4293      	cmp	r3, r2
 8001a48:	f000 80a2 	beq.w	8001b90 <tft_init+0x338>
 8001a4c:	f241 5211 	movw	r2, #5393	; 0x1511
 8001a50:	4293      	cmp	r3, r2
 8001a52:	f300 8250 	bgt.w	8001ef6 <tft_init+0x69e>
 8001a56:	f241 5205 	movw	r2, #5381	; 0x1505
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	f000 8141 	beq.w	8001ce2 <tft_init+0x48a>
 8001a60:	f241 5205 	movw	r2, #5381	; 0x1505
 8001a64:	4293      	cmp	r3, r2
 8001a66:	f300 8246 	bgt.w	8001ef6 <tft_init+0x69e>
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	f000 812f 	beq.w	8001cce <tft_init+0x476>
 8001a70:	2b99      	cmp	r3, #153	; 0x99
 8001a72:	f000 8117 	beq.w	8001ca4 <tft_init+0x44c>
 8001a76:	e23e      	b.n	8001ef6 <tft_init+0x69e>
 8001a78:	f5a3 4313 	sub.w	r3, r3, #37632	; 0x9300
 8001a7c:	3b02      	subs	r3, #2
 8001a7e:	2b40      	cmp	r3, #64	; 0x40
 8001a80:	f200 8239 	bhi.w	8001ef6 <tft_init+0x69e>
 8001a84:	a201      	add	r2, pc, #4	; (adr r2, 8001a8c <tft_init+0x234>)
 8001a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8a:	bf00      	nop
 8001a8c:	08001d71 	.word	0x08001d71
 8001a90:	08001ef7 	.word	0x08001ef7
 8001a94:	08001ef7 	.word	0x08001ef7
 8001a98:	08001ef7 	.word	0x08001ef7
 8001a9c:	08001ef7 	.word	0x08001ef7
 8001aa0:	08001ef7 	.word	0x08001ef7
 8001aa4:	08001ef7 	.word	0x08001ef7
 8001aa8:	08001ef7 	.word	0x08001ef7
 8001aac:	08001ef7 	.word	0x08001ef7
 8001ab0:	08001ef7 	.word	0x08001ef7
 8001ab4:	08001ef7 	.word	0x08001ef7
 8001ab8:	08001ef7 	.word	0x08001ef7
 8001abc:	08001ef7 	.word	0x08001ef7
 8001ac0:	08001ef7 	.word	0x08001ef7
 8001ac4:	08001ef7 	.word	0x08001ef7
 8001ac8:	08001ef7 	.word	0x08001ef7
 8001acc:	08001ef7 	.word	0x08001ef7
 8001ad0:	08001ef7 	.word	0x08001ef7
 8001ad4:	08001ef7 	.word	0x08001ef7
 8001ad8:	08001ef7 	.word	0x08001ef7
 8001adc:	08001ef7 	.word	0x08001ef7
 8001ae0:	08001ef7 	.word	0x08001ef7
 8001ae4:	08001ef7 	.word	0x08001ef7
 8001ae8:	08001ef7 	.word	0x08001ef7
 8001aec:	08001ef7 	.word	0x08001ef7
 8001af0:	08001ef7 	.word	0x08001ef7
 8001af4:	08001ef7 	.word	0x08001ef7
 8001af8:	08001ef7 	.word	0x08001ef7
 8001afc:	08001ef7 	.word	0x08001ef7
 8001b00:	08001ef7 	.word	0x08001ef7
 8001b04:	08001ce3 	.word	0x08001ce3
 8001b08:	08001ef7 	.word	0x08001ef7
 8001b0c:	08001ef7 	.word	0x08001ef7
 8001b10:	08001ef7 	.word	0x08001ef7
 8001b14:	08001ef7 	.word	0x08001ef7
 8001b18:	08001d03 	.word	0x08001d03
 8001b1c:	08001ef7 	.word	0x08001ef7
 8001b20:	08001d23 	.word	0x08001d23
 8001b24:	08001d03 	.word	0x08001d03
 8001b28:	08001d85 	.word	0x08001d85
 8001b2c:	08001ef7 	.word	0x08001ef7
 8001b30:	08001ef7 	.word	0x08001ef7
 8001b34:	08001ef7 	.word	0x08001ef7
 8001b38:	08001ef7 	.word	0x08001ef7
 8001b3c:	08001ef7 	.word	0x08001ef7
 8001b40:	08001ef7 	.word	0x08001ef7
 8001b44:	08001ef7 	.word	0x08001ef7
 8001b48:	08001d0d 	.word	0x08001d0d
 8001b4c:	08001ef7 	.word	0x08001ef7
 8001b50:	08001ef7 	.word	0x08001ef7
 8001b54:	08001ef7 	.word	0x08001ef7
 8001b58:	08001d0d 	.word	0x08001d0d
 8001b5c:	08001ef7 	.word	0x08001ef7
 8001b60:	08001ef7 	.word	0x08001ef7
 8001b64:	08001d7b 	.word	0x08001d7b
 8001b68:	08001ef7 	.word	0x08001ef7
 8001b6c:	08001ef7 	.word	0x08001ef7
 8001b70:	08001ef7 	.word	0x08001ef7
 8001b74:	08001ef7 	.word	0x08001ef7
 8001b78:	08001ef7 	.word	0x08001ef7
 8001b7c:	08001ef7 	.word	0x08001ef7
 8001b80:	08001ef7 	.word	0x08001ef7
 8001b84:	08001d9b 	.word	0x08001d9b
 8001b88:	08001da5 	.word	0x08001da5
 8001b8c:	08001db7 	.word	0x08001db7
        init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
        break;
#endif

    case 0x1511:                // Unknown from Levy
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <tft_init+0x368>)
 8001b92:	2203      	movs	r2, #3
 8001b94:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61511_regValues[]  = {
			0xB0, 1, 0x00,       //Command Access Protect
        };
        table8_ads = R61511_regValues, table_size = sizeof(R61511_regValues);
 8001b96:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <tft_init+0x36c>)
 8001b98:	61fb      	str	r3, [r7, #28]
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <tft_init+0x370>)
 8001ba0:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001ba8:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001baa:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <tft_init+0x374>)
 8001bac:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001bb4:	801a      	strh	r2, [r3, #0]
        break;
 8001bb6:	e1a4      	b.n	8001f02 <tft_init+0x6aa>
 8001bb8:	20000112 	.word	0x20000112
 8001bbc:	20000116 	.word	0x20000116
 8001bc0:	20000114 	.word	0x20000114
 8001bc4:	0802b504 	.word	0x0802b504
 8001bc8:	08000c25 	.word	0x08000c25
 8001bcc:	08000c0d 	.word	0x08000c0d

    case 0x1520:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001bd0:	4b91      	ldr	r3, [pc, #580]	; (8001e18 <tft_init+0x5c0>)
 8001bd2:	f240 4213 	movw	r2, #1043	; 0x413
 8001bd6:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61520_regValues[]  = {
            0xB0, 1, 0x00,      //Command Access Protect
            0xC0, 1, 0x0A,      //DM=1, BGR=1
        };
        table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 8001bd8:	4b90      	ldr	r3, [pc, #576]	; (8001e1c <tft_init+0x5c4>)
 8001bda:	61fb      	str	r3, [r7, #28]
 8001bdc:	2306      	movs	r3, #6
 8001bde:	837b      	strh	r3, [r7, #26]
        break;
 8001be0:	e18f      	b.n	8001f02 <tft_init+0x6aa>

	case 0x1526:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001be2:	4b8d      	ldr	r3, [pc, #564]	; (8001e18 <tft_init+0x5c0>)
 8001be4:	f240 4213 	movw	r2, #1043	; 0x413
 8001be8:	801a      	strh	r2, [r3, #0]
            0xB0, 1, 0x03,      //Command Access
            0xE2, 1, 0x3F,      //Command Write Access
            0xC0, 1, 0x22,      //REV=0, BGR=1, SS=0
            0xE2, 1, 0x00,      //Command Write Protect
        };
        table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 8001bea:	4b8d      	ldr	r3, [pc, #564]	; (8001e20 <tft_init+0x5c8>)
 8001bec:	61fb      	str	r3, [r7, #28]
 8001bee:	230c      	movs	r3, #12
 8001bf0:	837b      	strh	r3, [r7, #26]
        break;
 8001bf2:	e186      	b.n	8001f02 <tft_init+0x6aa>
        init_table16(LGDP4535_regValues, sizeof(LGDP4535_regValues));
        break;
#endif

    case 0x5310:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | INVERT_RGB | READ_24BITS;
 8001bf4:	4b88      	ldr	r3, [pc, #544]	; (8001e18 <tft_init+0x5c0>)
 8001bf6:	f640 6213 	movw	r2, #3603	; 0xe13
 8001bfa:	801a      	strh	r2, [r3, #0]
        static const uint8_t NT35310_regValues[]  = {        //
            TFTLCD_DELAY8, 10,    //just some dummy
        };
        table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 8001bfc:	4b89      	ldr	r3, [pc, #548]	; (8001e24 <tft_init+0x5cc>)
 8001bfe:	61fb      	str	r3, [r7, #28]
 8001c00:	2302      	movs	r3, #2
 8001c02:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001c04:	4b88      	ldr	r3, [pc, #544]	; (8001e28 <tft_init+0x5d0>)
 8001c06:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001c0e:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001c10:	4b86      	ldr	r3, [pc, #536]	; (8001e2c <tft_init+0x5d4>)
 8001c12:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c1a:	801a      	strh	r2, [r3, #0]
        break;
 8001c1c:	e171      	b.n	8001f02 <tft_init+0x6aa>

#ifdef SUPPORT_68140
    case 0x6814:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8001c1e:	4b7e      	ldr	r3, [pc, #504]	; (8001e18 <tft_init+0x5c0>)
 8001c20:	f240 4203 	movw	r2, #1027	; 0x403
 8001c24:	801a      	strh	r2, [r3, #0]
		static const uint8_t RM68140_regValues_max[]  = {        //
            0x3A, 1, 0x55,      //Pixel format .kbv my Mega Shield
        };
        table8_ads = RM68140_regValues_max, table_size = sizeof(RM68140_regValues_max);
 8001c26:	4b82      	ldr	r3, [pc, #520]	; (8001e30 <tft_init+0x5d8>)
 8001c28:	61fb      	str	r3, [r7, #28]
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001c2e:	4b7e      	ldr	r3, [pc, #504]	; (8001e28 <tft_init+0x5d0>)
 8001c30:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001c38:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001c3a:	4b7c      	ldr	r3, [pc, #496]	; (8001e2c <tft_init+0x5d4>)
 8001c3c:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c44:	801a      	strh	r2, [r3, #0]
        break;
 8001c46:	e15c      	b.n	8001f02 <tft_init+0x6aa>
        init_table16(ST7781_regValues, sizeof(ST7781_regValues));
        break;
#endif

    case 0x7789:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001c48:	4b73      	ldr	r3, [pc, #460]	; (8001e18 <tft_init+0x5c0>)
 8001c4a:	f240 4213 	movw	r2, #1043	; 0x413
 8001c4e:	801a      	strh	r2, [r3, #0]
            (0x55), 1, 0x90,    //WRCACE  [00]
            (0xD0), 2, 0xA4, 0xA1,      //PWCTRL1: Power Control 1 [A4 A1]
            (0xE0), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x2A, 0x3C, 0x55, 0x4B, 0x08, 0x16, 0x14, 0x19, 0x20,     //PVGAMCTRL: Positive Voltage Gamma control
            (0xE1), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x29, 0x36, 0x54, 0x4B, 0x0D, 0x16, 0x14, 0x21, 0x20,     //NVGAMCTRL: Negative Voltage Gamma control
        };
        table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 8001c50:	4b78      	ldr	r3, [pc, #480]	; (8001e34 <tft_init+0x5dc>)
 8001c52:	61fb      	str	r3, [r7, #28]
 8001c54:	2341      	movs	r3, #65	; 0x41
 8001c56:	837b      	strh	r3, [r7, #26]
        break;
 8001c58:	e153      	b.n	8001f02 <tft_init+0x6aa>

    case 0x8031:      //Unknown BangGood thanks PrinceCharles
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 8001c5a:	4b6f      	ldr	r3, [pc, #444]	; (8001e18 <tft_init+0x5c0>)
 8001c5c:	f241 4213 	movw	r2, #5139	; 0x1413
 8001c60:	801a      	strh	r2, [r3, #0]
        static const uint8_t FK8031_regValues[]  = {
            // 0xF2:8.2 = SM, 0xF2:8.0 = REV. invertDisplay(), vertScroll() do not work
            0xF2,11, 0x16, 0x16, 0x03, 0x08, 0x08, 0x08, 0x08, 0x10, 0x04, 0x16, 0x16, // f.k. 0xF2:8.2 SM=1
            0xFD, 3, 0x11, 0x02, 0x35,     //f.k 0xFD:1.1 creates contiguous scan lins
        };
        table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 8001c62:	4b75      	ldr	r3, [pc, #468]	; (8001e38 <tft_init+0x5e0>)
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	2312      	movs	r3, #18
 8001c68:	837b      	strh	r3, [r7, #26]
        break;
 8001c6a:	e14a      	b.n	8001f02 <tft_init+0x6aa>
        //        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
        break;
#endif

    case 0x8357:                //BIG CHANGE: HX8357-B is now 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN;
 8001c6c:	4b6a      	ldr	r3, [pc, #424]	; (8001e18 <tft_init+0x5c0>)
 8001c6e:	f241 4203 	movw	r2, #5123	; 0x1403
 8001c72:	801a      	strh	r2, [r3, #0]
        goto common_8357;
 8001c74:	e003      	b.n	8001c7e <tft_init+0x426>
    case 0x9090:                //BIG CHANGE: HX8357-D was 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 8001c76:	4b68      	ldr	r3, [pc, #416]	; (8001e18 <tft_init+0x5c0>)
 8001c78:	f241 4213 	movw	r2, #5139	; 0x1413
 8001c7c:	801a      	strh	r2, [r3, #0]
      common_8357:
	  	dummy=1;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	617b      	str	r3, [r7, #20]
        static const uint8_t HX8357C_regValues[]  = {
            TFTLCD_DELAY8, 1,  //dummy table
        };
        table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 8001c82:	4b6e      	ldr	r3, [pc, #440]	; (8001e3c <tft_init+0x5e4>)
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	2302      	movs	r3, #2
 8001c88:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001c8a:	4b67      	ldr	r3, [pc, #412]	; (8001e28 <tft_init+0x5d0>)
 8001c8c:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001c94:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001c96:	4b65      	ldr	r3, [pc, #404]	; (8001e2c <tft_init+0x5d4>)
 8001c98:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ca0:	801a      	strh	r2, [r3, #0]
        break;
 8001ca2:	e12e      	b.n	8001f02 <tft_init+0x6aa>

    case 0x0099:                //HX8357-D matches datasheet
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 8001ca4:	4b5c      	ldr	r3, [pc, #368]	; (8001e18 <tft_init+0x5c0>)
 8001ca6:	f241 4213 	movw	r2, #5139	; 0x1413
 8001caa:	801a      	strh	r2, [r3, #0]
#ifdef SUPPORT_8357D_GAMMA
            // HX8357D_SETGAMMA [0B 0C 11 1D 25 37 43 4B 4E 47 41 39 35 31 2E 21 1C 1D 1D 26 31 44 4E 56 44 3F 39 33 31 2E 28 1D E0 01]
            (0xE0),34, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x00, 0x01,
#endif
        };
        table8_ads = HX8357_99_regValues, table_size = sizeof(HX8357_99_regValues);
 8001cac:	4b64      	ldr	r3, [pc, #400]	; (8001e40 <tft_init+0x5e8>)
 8001cae:	61fb      	str	r3, [r7, #28]
 8001cb0:	231d      	movs	r3, #29
 8001cb2:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001cb4:	4b5c      	ldr	r3, [pc, #368]	; (8001e28 <tft_init+0x5d0>)
 8001cb6:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001cbe:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001cc0:	4b5a      	ldr	r3, [pc, #360]	; (8001e2c <tft_init+0x5d4>)
 8001cc2:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001cca:	801a      	strh	r2, [r3, #0]
        break;
 8001ccc:	e119      	b.n	8001f02 <tft_init+0x6aa>
        *p16 = 176;
        break;
#endif

    case 0x0001:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS; //no RGB bug. thanks Ivo_Deshev
 8001cce:	4b52      	ldr	r3, [pc, #328]	; (8001e18 <tft_init+0x5c0>)
 8001cd0:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8001cd4:	801a      	strh	r2, [r3, #0]
        goto common_9320;
 8001cd6:	e008      	b.n	8001cea <tft_init+0x492>
    case 0x5408:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR; //Red 2.4" thanks jorgenv, Ardlab_Gent
 8001cd8:	4b4f      	ldr	r3, [pc, #316]	; (8001e18 <tft_init+0x5c0>)
 8001cda:	f241 0204 	movw	r2, #4100	; 0x1004
 8001cde:	801a      	strh	r2, [r3, #0]
//        _lcd_capable = 0 | REV_SCREEN | READ_BGR | INVERT_GS; //Blue 2.8" might be different
        goto common_9320;
 8001ce0:	e003      	b.n	8001cea <tft_init+0x492>
    case 0x1505:                //R61505 thanks Ravi_kanchan2004. R61505V, R61505W different
    case 0x9320:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR;
 8001ce2:	4b4d      	ldr	r3, [pc, #308]	; (8001e18 <tft_init+0x5c0>)
 8001ce4:	f241 0204 	movw	r2, #4100	; 0x1004
 8001ce8:	801a      	strh	r2, [r3, #0]
      common_9320:
	    dummy=1;
 8001cea:	2301      	movs	r3, #1
 8001cec:	617b      	str	r3, [r7, #20]
            0x0098, 0x0000,
            //-----Display on-----------------------
            0x0007, 0x0173,
            TFTLCD_DELAY, 50,
        };
        init_table16(ILI9320_regValues, sizeof(ILI9320_regValues));
 8001cee:	21d8      	movs	r1, #216	; 0xd8
 8001cf0:	4854      	ldr	r0, [pc, #336]	; (8001e44 <tft_init+0x5ec>)
 8001cf2:	f7ff fb9c 	bl	800142e <init_table16>
        break;
 8001cf6:	e104      	b.n	8001f02 <tft_init+0x6aa>
    case 0x6809:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS | AUTO_READINC;
 8001cf8:	4b47      	ldr	r3, [pc, #284]	; (8001e18 <tft_init+0x5c0>)
 8001cfa:	f241 1202 	movw	r2, #4354	; 0x1102
 8001cfe:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8001d00:	e008      	b.n	8001d14 <tft_init+0x4bc>
    case 0x9328:
    case 0x9325:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS;
 8001d02:	4b45      	ldr	r3, [pc, #276]	; (8001e18 <tft_init+0x5c0>)
 8001d04:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8001d08:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8001d0a:	e003      	b.n	8001d14 <tft_init+0x4bc>
    case 0x9331:
    case 0x9335:
        _lcd_capable = 0 | REV_SCREEN;
 8001d0c:	4b42      	ldr	r3, [pc, #264]	; (8001e18 <tft_init+0x5c0>)
 8001d0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d12:	801a      	strh	r2, [r3, #0]
      common_93x5:
	    dummy=1;
 8001d14:	2301      	movs	r3, #1
 8001d16:	617b      	str	r3, [r7, #20]
            //-------------- Panel Control -------------------//
            0x0090, 0x0010,
            0x0092, 0x0000,
            0x0007, 0x0133,     // 262K color and display ON
        };
        init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 8001d18:	21cc      	movs	r1, #204	; 0xcc
 8001d1a:	484b      	ldr	r0, [pc, #300]	; (8001e48 <tft_init+0x5f0>)
 8001d1c:	f7ff fb87 	bl	800142e <init_table16>
        break;
 8001d20:	e0ef      	b.n	8001f02 <tft_init+0x6aa>
        *p16 = 240;
        break;
#endif

    case 0x9327:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8001d22:	4b3d      	ldr	r3, [pc, #244]	; (8001e18 <tft_init+0x5c0>)
 8001d24:	f240 4203 	movw	r2, #1027	; 0x403
 8001d28:	801a      	strh	r2, [r3, #0]
            //            0xC8, 15, 0x00, 0x77, 0x77, 0x04, 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0xCA, 1, 0x00,      //DGC LUT ???
            0xEA, 1, 0x80,      //3-Gamma Function Enable
            //                     0xB0, 1, 0x03,      //Enable Protect
        };
        table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 8001d2a:	4b48      	ldr	r3, [pc, #288]	; (8001e4c <tft_init+0x5f4>)
 8001d2c:	61fb      	str	r3, [r7, #28]
 8001d2e:	231e      	movs	r3, #30
 8001d30:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001d32:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <tft_init+0x5d0>)
 8001d34:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001d3c:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001d3e:	4b3b      	ldr	r3, [pc, #236]	; (8001e2c <tft_init+0x5d4>)
 8001d40:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	22f0      	movs	r2, #240	; 0xf0
 8001d46:	801a      	strh	r2, [r3, #0]
        break;
 8001d48:	e0db      	b.n	8001f02 <tft_init+0x6aa>
    case 0x1602:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not readGRAM
 8001d4a:	4b33      	ldr	r3, [pc, #204]	; (8001e18 <tft_init+0x5c0>)
 8001d4c:	f240 4203 	movw	r2, #1027	; 0x403
 8001d50:	801a      	strh	r2, [r3, #0]
        static const uint8_t XX1602_regValues[]  = {
            0xB8, 1, 0x01,      //GS [00]
            0xC0, 1, 0x0E,      //??Power [0A]
        };
        table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 8001d52:	4b3f      	ldr	r3, [pc, #252]	; (8001e50 <tft_init+0x5f8>)
 8001d54:	61fb      	str	r3, [r7, #28]
 8001d56:	2306      	movs	r3, #6
 8001d58:	837b      	strh	r3, [r7, #26]
        break;
 8001d5a:	e0d2      	b.n	8001f02 <tft_init+0x6aa>

    case 0x2053:    //weird from BangGood
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN | READ_BGR;
 8001d5c:	4b2e      	ldr	r3, [pc, #184]	; (8001e18 <tft_init+0x5c0>)
 8001d5e:	f241 4217 	movw	r2, #5143	; 0x1417
 8001d62:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8001d64:	e012      	b.n	8001d8c <tft_init+0x534>
    case 0xAC11:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN; //thanks viliam
 8001d66:	4b2c      	ldr	r3, [pc, #176]	; (8001e18 <tft_init+0x5c0>)
 8001d68:	f241 4213 	movw	r2, #5139	; 0x1413
 8001d6c:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8001d6e:	e00d      	b.n	8001d8c <tft_init+0x534>
    case 0x9302:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8001d70:	4b29      	ldr	r3, [pc, #164]	; (8001e18 <tft_init+0x5c0>)
 8001d72:	f240 4203 	movw	r2, #1027	; 0x403
 8001d76:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8001d78:	e008      	b.n	8001d8c <tft_init+0x534>
    case 0x9338:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001d7a:	4b27      	ldr	r3, [pc, #156]	; (8001e18 <tft_init+0x5c0>)
 8001d7c:	f240 4213 	movw	r2, #1043	; 0x413
 8001d80:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8001d82:	e003      	b.n	8001d8c <tft_init+0x534>
    case 0x9329:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | REV_SCREEN;
 8001d84:	4b24      	ldr	r3, [pc, #144]	; (8001e18 <tft_init+0x5c0>)
 8001d86:	f241 6203 	movw	r2, #5635	; 0x1603
 8001d8a:	801a      	strh	r2, [r3, #0]
	  common_9329:
	    dummy=1;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	617b      	str	r3, [r7, #20]
//            0xF6, 3, 0x01, 0x01, 0x00,  //Interface Control needs EXTC=1 MX_EOR=1, TM=0, RIM=0
//            0xB6, 3, 0x0A, 0x82, 0x27,  //Display Function [0A 82 27]
//            0xB7, 1, 0x06,      //Entry Mode Set [06]
            0x36, 1, 0x00,      //Memory Access [00] pointless but stops an empty array
        };
        table8_ads = ILI9329_regValues, table_size = sizeof(ILI9329_regValues);
 8001d90:	4b30      	ldr	r3, [pc, #192]	; (8001e54 <tft_init+0x5fc>)
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	2303      	movs	r3, #3
 8001d96:	837b      	strh	r3, [r7, #26]
        break;
 8001d98:	e0b3      	b.n	8001f02 <tft_init+0x6aa>

    case 0x9340:                //ILI9340 thanks Ravi_kanchan2004.
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 8001d9a:	4b1f      	ldr	r3, [pc, #124]	; (8001e18 <tft_init+0x5c0>)
 8001d9c:	f241 4213 	movw	r2, #5139	; 0x1413
 8001da0:	801a      	strh	r2, [r3, #0]
        goto common_9341;
 8001da2:	bf00      	nop
    case 0x9341:
      common_9341:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001da4:	4b1c      	ldr	r3, [pc, #112]	; (8001e18 <tft_init+0x5c0>)
 8001da6:	f240 4213 	movw	r2, #1043	; 0x413
 8001daa:	801a      	strh	r2, [r3, #0]
            0xC7, 1, 0xC0,      //VCOM 2 [C0]
            0x36, 1, 0x88,      //Memory Access [00]
            0xB1, 2, 0x00, 0x1B,        //Frame Control [00 1B]
            0xB7, 1, 0x07,      //Entry Mode [00]
        };
        table8_ads = ILI9341_regValues_2_4, table_size = sizeof(ILI9341_regValues_2_4);   //
 8001dac:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <tft_init+0x600>)
 8001dae:	61fb      	str	r3, [r7, #28]
 8001db0:	2365      	movs	r3, #101	; 0x65
 8001db2:	837b      	strh	r3, [r7, #26]
        break;
 8001db4:	e0a5      	b.n	8001f02 <tft_init+0x6aa>
#if defined(SUPPORT_9342)
    case 0x9342:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | INVERT_GS | REV_SCREEN;
 8001db6:	4b18      	ldr	r3, [pc, #96]	; (8001e18 <tft_init+0x5c0>)
 8001db8:	f241 5213 	movw	r2, #5395	; 0x1513
 8001dbc:	801a      	strh	r2, [r3, #0]
            (0xC7), 1, 0xA4,
            (0xB8), 1, 0x0B,
            (0xE0), 15, 0x0F, 0x24, 0x21, 0x0C, 0x0F, 0x06, 0x50, 0x75, 0x3F, 0x07, 0x12, 0x05, 0x11, 0x0B, 0x08,
            (0xE1), 15, 0x08, 0x1D, 0x20, 0x02, 0x0E, 0x04, 0x31, 0x24, 0x42, 0x03, 0x0B, 0x09, 0x30, 0x36, 0x0F,
        };
        table8_ads = ILI9342_regValues_CPT24, table_size = sizeof(ILI9342_regValues_CPT24);   //
 8001dbe:	4b27      	ldr	r3, [pc, #156]	; (8001e5c <tft_init+0x604>)
 8001dc0:	61fb      	str	r3, [r7, #28]
 8001dc2:	2338      	movs	r3, #56	; 0x38
 8001dc4:	837b      	strh	r3, [r7, #26]
        //        table8_ads = ILI9342_regValues_Tianma23, table_size = sizeof(ILI9342_regValues_Tianma23);   //
        //        table8_ads = ILI9342_regValues_HSD23, table_size = sizeof(ILI9342_regValues_HSD23);   //
        p16 = (int16_t *) & height;
 8001dc6:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <tft_init+0x5d0>)
 8001dc8:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	22f0      	movs	r2, #240	; 0xf0
 8001dce:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001dd0:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <tft_init+0x5d4>)
 8001dd2:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001dda:	801a      	strh	r2, [r3, #0]
        break;
 8001ddc:	e091      	b.n	8001f02 <tft_init+0x6aa>
#endif
    case 0x1581:                        //no BGR in MADCTL.  set BGR in Panel Control
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS; //thanks zdravke
 8001dde:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <tft_init+0x5c0>)
 8001de0:	f240 4213 	movw	r2, #1043	; 0x413
 8001de4:	801a      	strh	r2, [r3, #0]
		goto common_9481;
 8001de6:	e003      	b.n	8001df0 <tft_init+0x598>
    case 0x9481:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <tft_init+0x5c0>)
 8001dea:	f240 4207 	movw	r2, #1031	; 0x407
 8001dee:	801a      	strh	r2, [r3, #0]
	  common_9481:
	    dummy=1;
 8001df0:	2301      	movs	r3, #1
 8001df2:	617b      	str	r3, [r7, #20]
            0x0C, 2, 0x00, 0x55, //RDCOLMOD
			0xB4, 1, 0x00,      //SETDISPLAY
//			0xB3, 4, 0x00, 0x01, 0x06, 0x01,  //SETGRAM simple example
			0xB3, 4, 0x00, 0x01, 0x06, 0x30,  //jpegs example
        };
        table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 8001df4:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <tft_init+0x608>)
 8001df6:	61fb      	str	r3, [r7, #28]
 8001df8:	2345      	movs	r3, #69	; 0x45
 8001dfa:	837b      	strh	r3, [r7, #26]
//        table8_ads = ILI9481_CPT29_regValues, table_size = sizeof(ILI9481_CPT29_regValues);
//        table8_ads = ILI9481_PVI35_regValues, table_size = sizeof(ILI9481_PVI35_regValues);
//        table8_ads = ILI9481_AUO317_regValues, table_size = sizeof(ILI9481_AUO317_regValues);
//        table8_ads = ILI9481_CMO35_regValues, table_size = sizeof(ILI9481_CMO35_regValues);
//        table8_ads = ILI9481_RGB_regValues, table_size = sizeof(ILI9481_RGB_regValues);
        p16 = (int16_t *) & height;
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <tft_init+0x5d0>)
 8001dfe:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001e06:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <tft_init+0x5d4>)
 8001e0a:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e12:	801a      	strh	r2, [r3, #0]
        break;
 8001e14:	e075      	b.n	8001f02 <tft_init+0x6aa>
 8001e16:	bf00      	nop
 8001e18:	20000114 	.word	0x20000114
 8001e1c:	0802b508 	.word	0x0802b508
 8001e20:	0802b510 	.word	0x0802b510
 8001e24:	0802b51c 	.word	0x0802b51c
 8001e28:	08000c25 	.word	0x08000c25
 8001e2c:	08000c0d 	.word	0x08000c0d
 8001e30:	0802b520 	.word	0x0802b520
 8001e34:	0802b524 	.word	0x0802b524
 8001e38:	0802b568 	.word	0x0802b568
 8001e3c:	0802b57c 	.word	0x0802b57c
 8001e40:	0802b580 	.word	0x0802b580
 8001e44:	0802b5a0 	.word	0x0802b5a0
 8001e48:	0802b678 	.word	0x0802b678
 8001e4c:	0802b744 	.word	0x0802b744
 8001e50:	0802b764 	.word	0x0802b764
 8001e54:	0802b76c 	.word	0x0802b76c
 8001e58:	0802b770 	.word	0x0802b770
 8001e5c:	0802b7d8 	.word	0x0802b7d8
 8001e60:	0802b810 	.word	0x0802b810
    case 0x9486:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 8001e64:	4b50      	ldr	r3, [pc, #320]	; (8001fa8 <tft_init+0x750>)
 8001e66:	f240 4203 	movw	r2, #1027	; 0x403
 8001e6a:	801a      	strh	r2, [r3, #0]
            // 4.2 WTK 3.5 Inch Initial Code too white
			0xE0, 15, 0x0F, 0x10, 0x08, 0x05, 0x09, 0x05, 0x37, 0x98, 0x26, 0x07, 0x0F, 0x02, 0x09, 0x07, 0x00,
			0xE1, 15, 0x0F, 0x38, 0x36, 0x0D, 0x10, 0x08, 0x59, 0x76, 0x48, 0x0A, 0x16, 0x0A, 0x37, 0x2F, 0x00,
#endif
        };
        table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 8001e6c:	4b4f      	ldr	r3, [pc, #316]	; (8001fac <tft_init+0x754>)
 8001e6e:	61fb      	str	r3, [r7, #28]
 8001e70:	233b      	movs	r3, #59	; 0x3b
 8001e72:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001e74:	4b4e      	ldr	r3, [pc, #312]	; (8001fb0 <tft_init+0x758>)
 8001e76:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001e7e:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001e80:	4b4c      	ldr	r3, [pc, #304]	; (8001fb4 <tft_init+0x75c>)
 8001e82:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e8a:	801a      	strh	r2, [r3, #0]
        break;
 8001e8c:	e039      	b.n	8001f02 <tft_init+0x6aa>
    case 0x7796:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;   //thanks to safari1
 8001e8e:	4b46      	ldr	r3, [pc, #280]	; (8001fa8 <tft_init+0x750>)
 8001e90:	f240 4203 	movw	r2, #1027	; 0x403
 8001e94:	801a      	strh	r2, [r3, #0]
        goto common_9488;
 8001e96:	e003      	b.n	8001ea0 <tft_init+0x648>
    case 0x9487:                //with thanks to Charlyf
    case 0x9488:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001e98:	4b43      	ldr	r3, [pc, #268]	; (8001fa8 <tft_init+0x750>)
 8001e9a:	f240 4213 	movw	r2, #1043	; 0x413
 8001e9e:	801a      	strh	r2, [r3, #0]
      common_9488:
	    dummy=1;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	617b      	str	r3, [r7, #20]
            0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B] .kbv NL=480
            0xB7, 1, 0xC6,      //Entry Mode      [06]
            0x3A, 1, 0x55,      //Interlace Pixel Format [XX]
            0xF7, 4, 0xA9, 0x51, 0x2C, 0x82,    //Adjustment Control 3 [A9 51 2C 82]
        };
        table8_ads = ILI9488_regValues_max, table_size = sizeof(ILI9488_regValues_max);
 8001ea4:	4b44      	ldr	r3, [pc, #272]	; (8001fb8 <tft_init+0x760>)
 8001ea6:	61fb      	str	r3, [r7, #28]
 8001ea8:	232b      	movs	r3, #43	; 0x2b
 8001eaa:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001eac:	4b40      	ldr	r3, [pc, #256]	; (8001fb0 <tft_init+0x758>)
 8001eae:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001eb6:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001eb8:	4b3e      	ldr	r3, [pc, #248]	; (8001fb4 <tft_init+0x75c>)
 8001eba:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ec2:	801a      	strh	r2, [r3, #0]
        break;
 8001ec4:	e01d      	b.n	8001f02 <tft_init+0x6aa>
    case 0xB505:                //R61505V
    case 0xC505:                //R61505W
        _lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 8001ec6:	4b38      	ldr	r3, [pc, #224]	; (8001fa8 <tft_init+0x750>)
 8001ec8:	f241 0208 	movw	r2, #4104	; 0x1008
 8001ecc:	801a      	strh	r2, [r3, #0]
            0x0092, 0x0100,
            0x0093, 0x0701,
            TFTLCD_DELAY, 80,
            0x0007, 0x0100,     //BASEE=1--Display On
        };
        init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 8001ece:	21b0      	movs	r1, #176	; 0xb0
 8001ed0:	483a      	ldr	r0, [pc, #232]	; (8001fbc <tft_init+0x764>)
 8001ed2:	f7ff faac 	bl	800142e <init_table16>
        break;
 8001ed6:	e014      	b.n	8001f02 <tft_init+0x6aa>

#if defined(SUPPORT_B509_7793)
    case 0x7793:
    case 0xB509:
        _lcd_capable = REV_SCREEN;
 8001ed8:	4b33      	ldr	r3, [pc, #204]	; (8001fa8 <tft_init+0x750>)
 8001eda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ede:	801a      	strh	r2, [r3, #0]
            TFTLCD_DELAY, 50,

            0x0200, 0x0000,
            0x0201, 0x0000,
        };
        init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 8001ee0:	21c0      	movs	r1, #192	; 0xc0
 8001ee2:	4837      	ldr	r0, [pc, #220]	; (8001fc0 <tft_init+0x768>)
 8001ee4:	f7ff faa3 	bl	800142e <init_table16>
        p16 = (int16_t *) & height;
 8001ee8:	4b31      	ldr	r3, [pc, #196]	; (8001fb0 <tft_init+0x758>)
 8001eea:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001ef2:	801a      	strh	r2, [r3, #0]
        break;
 8001ef4:	e005      	b.n	8001f02 <tft_init+0x6aa>
        p16 = (int16_t *) & width;
        *p16 = 854;
        break;
#endif
    default:
        p16 = (int16_t *) & width;
 8001ef6:	4b2f      	ldr	r3, [pc, #188]	; (8001fb4 <tft_init+0x75c>)
 8001ef8:	613b      	str	r3, [r7, #16]
        *p16 = 0;       //error value for width
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	2200      	movs	r2, #0
 8001efe:	801a      	strh	r2, [r3, #0]
        break;
 8001f00:	bf00      	nop
    }
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 8001f02:	4b29      	ldr	r3, [pc, #164]	; (8001fa8 <tft_init+0x750>)
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	bf14      	ite	ne
 8001f0e:	2301      	movne	r3, #1
 8001f10:	2300      	moveq	r3, #0
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	4b2b      	ldr	r3, [pc, #172]	; (8001fc4 <tft_init+0x76c>)
 8001f18:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00d      	beq.n	8001f3c <tft_init+0x6e4>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 8001f20:	2109      	movs	r1, #9
 8001f22:	4829      	ldr	r0, [pc, #164]	; (8001fc8 <tft_init+0x770>)
 8001f24:	f7ff fa2a 	bl	800137c <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 8001f28:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	69f8      	ldr	r0, [r7, #28]
 8001f30:	f7ff fa24 	bl	800137c <init_table>
		init_table(&wake_on, sizeof(wake_on));
 8001f34:	2106      	movs	r1, #6
 8001f36:	4825      	ldr	r0, [pc, #148]	; (8001fcc <tft_init+0x774>)
 8001f38:	f7ff fa20 	bl	800137c <init_table>
    }
    setRotation(0);             //PORTRAIT
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f000 fe83 	bl	8002c48 <setRotation>
    invertDisplay(false);
 8001f42:	2000      	movs	r0, #0
 8001f44:	f001 fc22 	bl	800378c <invertDisplay>
#if defined(SUPPORT_9488_555)
    if (_lcd_ID == 0x9488) {
 8001f48:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <tft_init+0x778>)
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	f249 4288 	movw	r2, #38024	; 0x9488
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d125      	bne.n	8001fa0 <tft_init+0x748>
		is555 = 0;
 8001f54:	4b1f      	ldr	r3, [pc, #124]	; (8001fd4 <tft_init+0x77c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]
		drawPixel(0, 0, 0xFFE0);
 8001f5a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001f5e:	2100      	movs	r1, #0
 8001f60:	2000      	movs	r0, #0
 8001f62:	f001 f8f9 	bl	8003158 <drawPixel>
		if (readPixel(0, 0) == 0xFF1F) {
 8001f66:	2100      	movs	r1, #0
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f7fe fefe 	bl	8000d6a <readPixel>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	461a      	mov	r2, r3
 8001f72:	f64f 731f 	movw	r3, #65311	; 0xff1f
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d112      	bne.n	8001fa0 <tft_init+0x748>
			uint8_t pixfmt = 0x06;
 8001f7a:	2306      	movs	r3, #6
 8001f7c:	73fb      	strb	r3, [r7, #15]
			pushCommand(0x3A, &pixfmt, 1);
 8001f7e:	f107 030f 	add.w	r3, r7, #15
 8001f82:	2201      	movs	r2, #1
 8001f84:	4619      	mov	r1, r3
 8001f86:	203a      	movs	r0, #58	; 0x3a
 8001f88:	f7fe ff19 	bl	8000dbe <pushCommand>
			_lcd_capable &= ~READ_24BITS;
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <tft_init+0x750>)
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	f023 0310 	bic.w	r3, r3, #16
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <tft_init+0x750>)
 8001f98:	801a      	strh	r2, [r3, #0]
			is555 = 1;
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <tft_init+0x77c>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 8001fa0:	bf00      	nop
 8001fa2:	3720      	adds	r7, #32
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000114 	.word	0x20000114
 8001fac:	0802b858 	.word	0x0802b858
 8001fb0:	08000c25 	.word	0x08000c25
 8001fb4:	08000c0d 	.word	0x08000c0d
 8001fb8:	0802b894 	.word	0x0802b894
 8001fbc:	0802b8c0 	.word	0x0802b8c0
 8001fc0:	0802b970 	.word	0x0802b970
 8001fc4:	20000118 	.word	0x20000118
 8001fc8:	0802ba30 	.word	0x0802ba30
 8001fcc:	0802ba3c 	.word	0x0802ba3c
 8001fd0:	20000116 	.word	0x20000116
 8001fd4:	2000010e 	.word	0x2000010e

08001fd8 <readID>:

uint16_t readID(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
    uint16_t ret, ret2;
    uint8_t msb;
    ret = readReg(0,0);           //forces a reset() if called before begin()
 8001fde:	2100      	movs	r1, #0
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f7ff fb69 	bl	80016b8 <readReg>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 8001fea:	89fb      	ldrh	r3, [r7, #14]
 8001fec:	f245 4208 	movw	r2, #21512	; 0x5408
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d102      	bne.n	8001ffa <readID+0x22>
        return 0x5408;
 8001ff4:	f245 4308 	movw	r3, #21512	; 0x5408
 8001ff8:	e128      	b.n	800224c <readID+0x274>
    if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 8001ffa:	89fb      	ldrh	r3, [r7, #14]
 8001ffc:	f245 4220 	movw	r2, #21536	; 0x5420
 8002000:	4293      	cmp	r3, r2
 8002002:	d102      	bne.n	800200a <readID+0x32>
        return 0x5420;
 8002004:	f245 4320 	movw	r3, #21536	; 0x5420
 8002008:	e120      	b.n	800224c <readID+0x274>
    if (ret == 0x8989)          //SSD1289 is always 8989
 800200a:	89fb      	ldrh	r3, [r7, #14]
 800200c:	f648 1289 	movw	r2, #35209	; 0x8989
 8002010:	4293      	cmp	r3, r2
 8002012:	d102      	bne.n	800201a <readID+0x42>
        return 0x1289;
 8002014:	f241 2389 	movw	r3, #4745	; 0x1289
 8002018:	e118      	b.n	800224c <readID+0x274>
    ret = readReg(0x67,0);        //HX8347-A
 800201a:	2100      	movs	r1, #0
 800201c:	2067      	movs	r0, #103	; 0x67
 800201e:	f7ff fb4b 	bl	80016b8 <readReg>
 8002022:	4603      	mov	r3, r0
 8002024:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x4747)
 8002026:	89fb      	ldrh	r3, [r7, #14]
 8002028:	f244 7247 	movw	r2, #18247	; 0x4747
 800202c:	4293      	cmp	r3, r2
 800202e:	d102      	bne.n	8002036 <readID+0x5e>
        return 0x8347;
 8002030:	f248 3347 	movw	r3, #33607	; 0x8347
 8002034:	e10a      	b.n	800224c <readID+0x274>
//#if defined(SUPPORT_1963) && USING_16BIT_BUS
    ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 8002036:	20a1      	movs	r0, #161	; 0xa1
 8002038:	f7ff fbcc 	bl	80017d4 <readReg32>
 800203c:	4603      	mov	r3, r0
 800203e:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x6101)
 8002040:	89fb      	ldrh	r3, [r7, #14]
 8002042:	f246 1201 	movw	r2, #24833	; 0x6101
 8002046:	4293      	cmp	r3, r2
 8002048:	d102      	bne.n	8002050 <readID+0x78>
        return 0x1963;
 800204a:	f641 1363 	movw	r3, #6499	; 0x1963
 800204e:	e0fd      	b.n	800224c <readID+0x274>
    if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 8002050:	89fb      	ldrh	r3, [r7, #14]
 8002052:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002056:	4293      	cmp	r3, r2
 8002058:	d102      	bne.n	8002060 <readID+0x88>
        return 0x1526;          //subsequent begin() enables Command Access
 800205a:	f241 5326 	movw	r3, #5414	; 0x1526
 800205e:	e0f5      	b.n	800224c <readID+0x274>
//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
//        return 0x1520;          //subsequent begin() enables Command Access
//#endif
	ret = readReg40(0xBF);
 8002060:	20bf      	movs	r0, #191	; 0xbf
 8002062:	f7ff fbd2 	bl	800180a <readReg40>
 8002066:	4603      	mov	r3, r0
 8002068:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 800206a:	89fb      	ldrh	r3, [r7, #14]
 800206c:	f248 3257 	movw	r2, #33623	; 0x8357
 8002070:	4293      	cmp	r3, r2
 8002072:	d102      	bne.n	800207a <readID+0xa2>
        return 0x8357;
 8002074:	f248 3357 	movw	r3, #33623	; 0x8357
 8002078:	e0e8      	b.n	800224c <readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 800207a:	89fb      	ldrh	r3, [r7, #14]
 800207c:	f249 4281 	movw	r2, #38017	; 0x9481
 8002080:	4293      	cmp	r3, r2
 8002082:	d102      	bne.n	800208a <readID+0xb2>
        return 0x9481;
 8002084:	f249 4381 	movw	r3, #38017	; 0x9481
 8002088:	e0e0      	b.n	800224c <readID+0x274>
    if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 800208a:	89fb      	ldrh	r3, [r7, #14]
 800208c:	f241 5211 	movw	r2, #5393	; 0x1511
 8002090:	4293      	cmp	r3, r2
 8002092:	d102      	bne.n	800209a <readID+0xc2>
        return 0x1511;
 8002094:	f241 5311 	movw	r3, #5393	; 0x1511
 8002098:	e0d8      	b.n	800224c <readID+0x274>
    if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 800209a:	89fb      	ldrh	r3, [r7, #14]
 800209c:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 80020a0:	d102      	bne.n	80020a8 <readID+0xd0>
        return 0x1520;
 80020a2:	f44f 53a9 	mov.w	r3, #5408	; 0x1520
 80020a6:	e0d1      	b.n	800224c <readID+0x274>
    if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 80020a8:	89fb      	ldrh	r3, [r7, #14]
 80020aa:	f241 5226 	movw	r2, #5414	; 0x1526
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d102      	bne.n	80020b8 <readID+0xe0>
        return 0x1526;
 80020b2:	f241 5326 	movw	r3, #5414	; 0x1526
 80020b6:	e0c9      	b.n	800224c <readID+0x274>
    if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 80020b8:	89fb      	ldrh	r3, [r7, #14]
 80020ba:	f241 5281 	movw	r2, #5505	; 0x1581
 80020be:	4293      	cmp	r3, r2
 80020c0:	d102      	bne.n	80020c8 <readID+0xf0>
        return 0x1581;
 80020c2:	f241 5381 	movw	r3, #5505	; 0x1581
 80020c6:	e0c1      	b.n	800224c <readID+0x274>
    if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 80020c8:	89fb      	ldrh	r3, [r7, #14]
 80020ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80020ce:	d102      	bne.n	80020d6 <readID+0xfe>
        return 0x6814;
 80020d0:	f646 0314 	movw	r3, #26644	; 0x6814
 80020d4:	e0ba      	b.n	800224c <readID+0x274>
    ret = readReg32(0xD4);
 80020d6:	20d4      	movs	r0, #212	; 0xd4
 80020d8:	f7ff fb7c 	bl	80017d4 <readReg32>
 80020dc:	4603      	mov	r3, r0
 80020de:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 80020e0:	89fb      	ldrh	r3, [r7, #14]
 80020e2:	f245 3210 	movw	r2, #21264	; 0x5310
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d102      	bne.n	80020f0 <readID+0x118>
        return 0x5310;
 80020ea:	f245 3310 	movw	r3, #21264	; 0x5310
 80020ee:	e0ad      	b.n	800224c <readID+0x274>
    ret = readReg32(0xD7);
 80020f0:	20d7      	movs	r0, #215	; 0xd7
 80020f2:	f7ff fb6f 	bl	80017d4 <readReg32>
 80020f6:	4603      	mov	r3, r0
 80020f8:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 80020fa:	89fb      	ldrh	r3, [r7, #14]
 80020fc:	f248 0231 	movw	r2, #32817	; 0x8031
 8002100:	4293      	cmp	r3, r2
 8002102:	d102      	bne.n	800210a <readID+0x132>
        return 0x8031;
 8002104:	f248 0331 	movw	r3, #32817	; 0x8031
 8002108:	e0a0      	b.n	800224c <readID+0x274>
    ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 800210a:	20ef      	movs	r0, #239	; 0xef
 800210c:	f7ff fb7d 	bl	800180a <readReg40>
 8002110:	4603      	mov	r3, r0
 8002112:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9327)
 8002114:	89fb      	ldrh	r3, [r7, #14]
 8002116:	f249 3227 	movw	r2, #37671	; 0x9327
 800211a:	4293      	cmp	r3, r2
 800211c:	d102      	bne.n	8002124 <readID+0x14c>
        return 0x9327;
 800211e:	f249 3327 	movw	r3, #37671	; 0x9327
 8002122:	e093      	b.n	800224c <readID+0x274>
    ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 8002124:	20fe      	movs	r0, #254	; 0xfe
 8002126:	f7ff fb55 	bl	80017d4 <readReg32>
 800212a:	4603      	mov	r3, r0
 800212c:	0a1b      	lsrs	r3, r3, #8
 800212e:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x2053)
 8002130:	89fb      	ldrh	r3, [r7, #14]
 8002132:	f242 0253 	movw	r2, #8275	; 0x2053
 8002136:	4293      	cmp	r3, r2
 8002138:	d102      	bne.n	8002140 <readID+0x168>
        return 0x2053;
 800213a:	f242 0353 	movw	r3, #8275	; 0x2053
 800213e:	e085      	b.n	800224c <readID+0x274>
    uint32_t ret32 = readReg32(0x04);
 8002140:	2004      	movs	r0, #4
 8002142:	f7ff fb47 	bl	80017d4 <readReg32>
 8002146:	60b8      	str	r0, [r7, #8]
    msb = ret32 >> 16;
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	0c1b      	lsrs	r3, r3, #16
 800214c:	71fb      	strb	r3, [r7, #7]
    ret = ret32;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	81fb      	strh	r3, [r7, #14]
//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
    if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d122      	bne.n	800219e <readID+0x1c6>
 8002158:	89fb      	ldrh	r3, [r7, #14]
 800215a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800215e:	d11e      	bne.n	800219e <readID+0x1c6>
#if 1
        uint8_t cmds[] = {0xFF, 0x83, 0x57};
 8002160:	4a3c      	ldr	r2, [pc, #240]	; (8002254 <readID+0x27c>)
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	4611      	mov	r1, r2
 8002168:	8019      	strh	r1, [r3, #0]
 800216a:	3302      	adds	r3, #2
 800216c:	0c12      	lsrs	r2, r2, #16
 800216e:	701a      	strb	r2, [r3, #0]
        pushCommand(0xB9, cmds, 3);
 8002170:	1d3b      	adds	r3, r7, #4
 8002172:	2203      	movs	r2, #3
 8002174:	4619      	mov	r1, r3
 8002176:	20b9      	movs	r0, #185	; 0xb9
 8002178:	f7fe fe21 	bl	8000dbe <pushCommand>
        msb = readReg(0xD0,0);
 800217c:	2100      	movs	r1, #0
 800217e:	20d0      	movs	r0, #208	; 0xd0
 8002180:	f7ff fa9a 	bl	80016b8 <readReg>
 8002184:	4603      	mov	r3, r0
 8002186:	71fb      	strb	r3, [r7, #7]
        if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	2b99      	cmp	r3, #153	; 0x99
 800218c:	d101      	bne.n	8002192 <readID+0x1ba>
 800218e:	2399      	movs	r3, #153	; 0x99
 8002190:	e05c      	b.n	800224c <readID+0x274>
        if (msb == 0x90)        //HX8357-C undocumented
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	2b90      	cmp	r3, #144	; 0x90
 8002196:	d102      	bne.n	800219e <readID+0x1c6>
#endif
            return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 8002198:	f249 0390 	movw	r3, #37008	; 0x9090
 800219c:	e056      	b.n	800224c <readID+0x274>
    }
//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
//        return 0x1526;          //subsequent begin() enables Command Access
    if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 800219e:	89fb      	ldrh	r3, [r7, #14]
 80021a0:	f241 5226 	movw	r2, #5414	; 0x1526
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d102      	bne.n	80021ae <readID+0x1d6>
        return 0x1526;          //subsequent begin() enables Command Access
 80021a8:	f241 5326 	movw	r3, #5414	; 0x1526
 80021ac:	e04e      	b.n	800224c <readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 80021ae:	89fb      	ldrh	r3, [r7, #14]
 80021b0:	f648 12f0 	movw	r2, #35312	; 0x89f0
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d102      	bne.n	80021be <readID+0x1e6>
        return 0x7735;
 80021b8:	f247 7335 	movw	r3, #30517	; 0x7735
 80021bc:	e046      	b.n	800224c <readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 80021be:	89fb      	ldrh	r3, [r7, #14]
 80021c0:	f248 5252 	movw	r2, #34130	; 0x8552
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d102      	bne.n	80021ce <readID+0x1f6>
        return 0x7789;
 80021c8:	f247 7389 	movw	r3, #30601	; 0x7789
 80021cc:	e03e      	b.n	800224c <readID+0x274>
    if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 80021ce:	89fb      	ldrh	r3, [r7, #14]
 80021d0:	f64a 4211 	movw	r2, #44049	; 0xac11
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d102      	bne.n	80021de <readID+0x206>
        return 0xAC11;
 80021d8:	f64a 4311 	movw	r3, #44049	; 0xac11
 80021dc:	e036      	b.n	800224c <readID+0x274>
    ret32 = readReg32(0xD3);      //[xx 91 63 00]
 80021de:	20d3      	movs	r0, #211	; 0xd3
 80021e0:	f7ff faf8 	bl	80017d4 <readReg32>
 80021e4:	60b8      	str	r0, [r7, #8]
    ret = ret32 >> 8;
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	0a1b      	lsrs	r3, r3, #8
 80021ea:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9163) return ret;
 80021ec:	89fb      	ldrh	r3, [r7, #14]
 80021ee:	f249 1263 	movw	r2, #37219	; 0x9163
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d101      	bne.n	80021fa <readID+0x222>
 80021f6:	89fb      	ldrh	r3, [r7, #14]
 80021f8:	e028      	b.n	800224c <readID+0x274>
    ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 80021fa:	20d3      	movs	r0, #211	; 0xd3
 80021fc:	f7ff faea 	bl	80017d4 <readReg32>
 8002200:	4603      	mov	r3, r0
 8002202:	81fb      	strh	r3, [r7, #14]
    msb = ret >> 8;
 8002204:	89fb      	ldrh	r3, [r7, #14]
 8002206:	0a1b      	lsrs	r3, r3, #8
 8002208:	b29b      	uxth	r3, r3
 800220a:	71fb      	strb	r3, [r7, #7]
    if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	2b93      	cmp	r3, #147	; 0x93
 8002210:	d00b      	beq.n	800222a <readID+0x252>
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	2b94      	cmp	r3, #148	; 0x94
 8002216:	d008      	beq.n	800222a <readID+0x252>
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	2b98      	cmp	r3, #152	; 0x98
 800221c:	d005      	beq.n	800222a <readID+0x252>
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	2b77      	cmp	r3, #119	; 0x77
 8002222:	d002      	beq.n	800222a <readID+0x252>
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	2b16      	cmp	r3, #22
 8002228:	d101      	bne.n	800222e <readID+0x256>
        return ret;             //0x9488, 9486, 9340, 9341, 7796
 800222a:	89fb      	ldrh	r3, [r7, #14]
 800222c:	e00e      	b.n	800224c <readID+0x274>
    if (ret == 0x00D3 || ret == 0xD3D3)
 800222e:	89fb      	ldrh	r3, [r7, #14]
 8002230:	2bd3      	cmp	r3, #211	; 0xd3
 8002232:	d004      	beq.n	800223e <readID+0x266>
 8002234:	89fb      	ldrh	r3, [r7, #14]
 8002236:	f24d 32d3 	movw	r2, #54227	; 0xd3d3
 800223a:	4293      	cmp	r3, r2
 800223c:	d101      	bne.n	8002242 <readID+0x26a>
        return ret;             //16-bit write-only bus
 800223e:	89fb      	ldrh	r3, [r7, #14]
 8002240:	e004      	b.n	800224c <readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
*/
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 8002242:	2100      	movs	r1, #0
 8002244:	2000      	movs	r0, #0
 8002246:	f7ff fa37 	bl	80016b8 <readReg>
 800224a:	4603      	mov	r3, r0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	08005ce8 	.word	0x08005ce8

08002258 <readGRAM>:

// independent cursor and window registers.   S6D0154, ST7781 increments.  ILI92320/5 do not.
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h)
{
 8002258:	b590      	push	{r4, r7, lr}
 800225a:	b08b      	sub	sp, #44	; 0x2c
 800225c:	af00      	add	r7, sp, #0
 800225e:	60ba      	str	r2, [r7, #8]
 8002260:	461a      	mov	r2, r3
 8002262:	4603      	mov	r3, r0
 8002264:	81fb      	strh	r3, [r7, #14]
 8002266:	460b      	mov	r3, r1
 8002268:	81bb      	strh	r3, [r7, #12]
 800226a:	4613      	mov	r3, r2
 800226c:	80fb      	strh	r3, [r7, #6]
    uint16_t ret, dummy, _MR = _MW;
 800226e:	4b8d      	ldr	r3, [pc, #564]	; (80024a4 <readGRAM+0x24c>)
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	84bb      	strh	r3, [r7, #36]	; 0x24
    int16_t n = w * h, row = 0, col = 0;
 8002274:	88fa      	ldrh	r2, [r7, #6]
 8002276:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002278:	fb12 f303 	smulbb	r3, r2, r3
 800227c:	b29b      	uxth	r3, r3
 800227e:	847b      	strh	r3, [r7, #34]	; 0x22
 8002280:	2300      	movs	r3, #0
 8002282:	843b      	strh	r3, [r7, #32]
 8002284:	2300      	movs	r3, #0
 8002286:	83fb      	strh	r3, [r7, #30]
    uint8_t r, g, b, tmp;
    if (!is8347 && (_lcd_capable & MIPI_DCS_REV1)) // HX8347 uses same register
 8002288:	4b87      	ldr	r3, [pc, #540]	; (80024a8 <readGRAM+0x250>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d107      	bne.n	80022a0 <readGRAM+0x48>
 8002290:	4b86      	ldr	r3, [pc, #536]	; (80024ac <readGRAM+0x254>)
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <readGRAM+0x48>
        _MR = 0x2E;
 800229c:	232e      	movs	r3, #46	; 0x2e
 800229e:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (_lcd_ID == 0x1602) _MR = 0x2E;
 80022a0:	4b83      	ldr	r3, [pc, #524]	; (80024b0 <readGRAM+0x258>)
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	f241 6202 	movw	r2, #5634	; 0x1602
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d101      	bne.n	80022b0 <readGRAM+0x58>
 80022ac:	232e      	movs	r3, #46	; 0x2e
 80022ae:	84bb      	strh	r3, [r7, #36]	; 0x24
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 80022b0:	89fa      	ldrh	r2, [r7, #14]
 80022b2:	88fb      	ldrh	r3, [r7, #6]
 80022b4:	4413      	add	r3, r2
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	3b01      	subs	r3, #1
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	b21c      	sxth	r4, r3
 80022be:	89ba      	ldrh	r2, [r7, #12]
 80022c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80022c2:	4413      	add	r3, r2
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	b21b      	sxth	r3, r3
 80022cc:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80022d0:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80022d4:	4622      	mov	r2, r4
 80022d6:	f000 fff5 	bl	80032c4 <setAddrWindow>
    while (n > 0) {
 80022da:	f000 bc8c 	b.w	8002bf6 <readGRAM+0x99e>
        if (!(_lcd_capable & MIPI_DCS_REV1)) {
 80022de:	4b73      	ldr	r3, [pc, #460]	; (80024ac <readGRAM+0x254>)
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d111      	bne.n	800230e <readGRAM+0xb6>
            WriteCmdData(_MC, x + col);
 80022ea:	4b72      	ldr	r3, [pc, #456]	; (80024b4 <readGRAM+0x25c>)
 80022ec:	8818      	ldrh	r0, [r3, #0]
 80022ee:	89fa      	ldrh	r2, [r7, #14]
 80022f0:	8bfb      	ldrh	r3, [r7, #30]
 80022f2:	4413      	add	r3, r2
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	4619      	mov	r1, r3
 80022f8:	f7fe fd4f 	bl	8000d9a <WriteCmdData>
            WriteCmdData(_MP, y + row);
 80022fc:	4b6e      	ldr	r3, [pc, #440]	; (80024b8 <readGRAM+0x260>)
 80022fe:	8818      	ldrh	r0, [r3, #0]
 8002300:	89ba      	ldrh	r2, [r7, #12]
 8002302:	8c3b      	ldrh	r3, [r7, #32]
 8002304:	4413      	add	r3, r2
 8002306:	b29b      	uxth	r3, r3
 8002308:	4619      	mov	r1, r3
 800230a:	f7fe fd46 	bl	8000d9a <WriteCmdData>
        }
        CS_ACTIVE;
 800230e:	2108      	movs	r1, #8
 8002310:	486a      	ldr	r0, [pc, #424]	; (80024bc <readGRAM+0x264>)
 8002312:	f7fe fc2d 	bl	8000b70 <PIN_LOW>
        WriteCmd(_MR);
 8002316:	2104      	movs	r1, #4
 8002318:	4868      	ldr	r0, [pc, #416]	; (80024bc <readGRAM+0x264>)
 800231a:	f7fe fc29 	bl	8000b70 <PIN_LOW>
 800231e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002320:	0a1b      	lsrs	r3, r3, #8
 8002322:	b29b      	uxth	r3, r3
 8002324:	777b      	strb	r3, [r7, #29]
 8002326:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002328:	773b      	strb	r3, [r7, #28]
 800232a:	4b64      	ldr	r3, [pc, #400]	; (80024bc <readGRAM+0x264>)
 800232c:	4a64      	ldr	r2, [pc, #400]	; (80024c0 <readGRAM+0x268>)
 800232e:	619a      	str	r2, [r3, #24]
 8002330:	4b64      	ldr	r3, [pc, #400]	; (80024c4 <readGRAM+0x26c>)
 8002332:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8002336:	619a      	str	r2, [r3, #24]
 8002338:	7f7b      	ldrb	r3, [r7, #29]
 800233a:	035b      	lsls	r3, r3, #13
 800233c:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8002340:	7f7b      	ldrb	r3, [r7, #29]
 8002342:	109b      	asrs	r3, r3, #2
 8002344:	f003 0320 	and.w	r3, r3, #32
 8002348:	431a      	orrs	r2, r3
 800234a:	4b5c      	ldr	r3, [pc, #368]	; (80024bc <readGRAM+0x264>)
 800234c:	619a      	str	r2, [r3, #24]
 800234e:	7f7b      	ldrb	r3, [r7, #29]
 8002350:	4a5c      	ldr	r2, [pc, #368]	; (80024c4 <readGRAM+0x26c>)
 8002352:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8002356:	6193      	str	r3, [r2, #24]
 8002358:	2102      	movs	r1, #2
 800235a:	4858      	ldr	r0, [pc, #352]	; (80024bc <readGRAM+0x264>)
 800235c:	f7fe fc08 	bl	8000b70 <PIN_LOW>
 8002360:	2102      	movs	r1, #2
 8002362:	4856      	ldr	r0, [pc, #344]	; (80024bc <readGRAM+0x264>)
 8002364:	f7fe fc14 	bl	8000b90 <PIN_HIGH>
 8002368:	2102      	movs	r1, #2
 800236a:	4854      	ldr	r0, [pc, #336]	; (80024bc <readGRAM+0x264>)
 800236c:	f7fe fc10 	bl	8000b90 <PIN_HIGH>
 8002370:	4b52      	ldr	r3, [pc, #328]	; (80024bc <readGRAM+0x264>)
 8002372:	4a53      	ldr	r2, [pc, #332]	; (80024c0 <readGRAM+0x268>)
 8002374:	619a      	str	r2, [r3, #24]
 8002376:	4b53      	ldr	r3, [pc, #332]	; (80024c4 <readGRAM+0x26c>)
 8002378:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 800237c:	619a      	str	r2, [r3, #24]
 800237e:	7f3b      	ldrb	r3, [r7, #28]
 8002380:	035b      	lsls	r3, r3, #13
 8002382:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8002386:	7f3b      	ldrb	r3, [r7, #28]
 8002388:	109b      	asrs	r3, r3, #2
 800238a:	f003 0320 	and.w	r3, r3, #32
 800238e:	431a      	orrs	r2, r3
 8002390:	4b4a      	ldr	r3, [pc, #296]	; (80024bc <readGRAM+0x264>)
 8002392:	619a      	str	r2, [r3, #24]
 8002394:	7f3b      	ldrb	r3, [r7, #28]
 8002396:	4a4b      	ldr	r2, [pc, #300]	; (80024c4 <readGRAM+0x26c>)
 8002398:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 800239c:	6193      	str	r3, [r2, #24]
 800239e:	2102      	movs	r1, #2
 80023a0:	4846      	ldr	r0, [pc, #280]	; (80024bc <readGRAM+0x264>)
 80023a2:	f7fe fbe5 	bl	8000b70 <PIN_LOW>
 80023a6:	2102      	movs	r1, #2
 80023a8:	4844      	ldr	r0, [pc, #272]	; (80024bc <readGRAM+0x264>)
 80023aa:	f7fe fbf1 	bl	8000b90 <PIN_HIGH>
 80023ae:	2102      	movs	r1, #2
 80023b0:	4842      	ldr	r0, [pc, #264]	; (80024bc <readGRAM+0x264>)
 80023b2:	f7fe fbed 	bl	8000b90 <PIN_HIGH>
 80023b6:	2104      	movs	r1, #4
 80023b8:	4840      	ldr	r0, [pc, #256]	; (80024bc <readGRAM+0x264>)
 80023ba:	f7fe fbe9 	bl	8000b90 <PIN_HIGH>
        setReadDir();
 80023be:	f7fe fd1f 	bl	8000e00 <setReadDir>
        if (_lcd_capable & READ_NODUMMY) {
 80023c2:	4b3a      	ldr	r3, [pc, #232]	; (80024ac <readGRAM+0x254>)
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f040 813e 	bne.w	800264c <readGRAM+0x3f4>
            ;
        } else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 80023d0:	4b36      	ldr	r3, [pc, #216]	; (80024ac <readGRAM+0x254>)
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d105      	bne.n	80023e8 <readGRAM+0x190>
 80023dc:	4b34      	ldr	r3, [pc, #208]	; (80024b0 <readGRAM+0x258>)
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	f241 2289 	movw	r2, #4745	; 0x1289
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d16f      	bne.n	80024c8 <readGRAM+0x270>
            READ_8(r);
 80023e8:	2101      	movs	r1, #1
 80023ea:	4834      	ldr	r0, [pc, #208]	; (80024bc <readGRAM+0x264>)
 80023ec:	f7fe fbd0 	bl	8000b90 <PIN_HIGH>
 80023f0:	2101      	movs	r1, #1
 80023f2:	4832      	ldr	r0, [pc, #200]	; (80024bc <readGRAM+0x264>)
 80023f4:	f7fe fbbc 	bl	8000b70 <PIN_LOW>
 80023f8:	2101      	movs	r1, #1
 80023fa:	4830      	ldr	r0, [pc, #192]	; (80024bc <readGRAM+0x264>)
 80023fc:	f7fe fbb8 	bl	8000b70 <PIN_LOW>
 8002400:	2101      	movs	r1, #1
 8002402:	482e      	ldr	r0, [pc, #184]	; (80024bc <readGRAM+0x264>)
 8002404:	f7fe fbb4 	bl	8000b70 <PIN_LOW>
 8002408:	2101      	movs	r1, #1
 800240a:	482c      	ldr	r0, [pc, #176]	; (80024bc <readGRAM+0x264>)
 800240c:	f7fe fbb0 	bl	8000b70 <PIN_LOW>
 8002410:	4b2c      	ldr	r3, [pc, #176]	; (80024c4 <readGRAM+0x26c>)
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	b2da      	uxtb	r2, r3
 800241c:	4b29      	ldr	r3, [pc, #164]	; (80024c4 <readGRAM+0x26c>)
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	b2db      	uxtb	r3, r3
 8002428:	4313      	orrs	r3, r2
 800242a:	b2da      	uxtb	r2, r3
 800242c:	4b23      	ldr	r3, [pc, #140]	; (80024bc <readGRAM+0x264>)
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	0b5b      	lsrs	r3, r3, #13
 8002432:	b2db      	uxtb	r3, r3
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	b2db      	uxtb	r3, r3
 800243a:	4313      	orrs	r3, r2
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4b21      	ldr	r3, [pc, #132]	; (80024c4 <readGRAM+0x26c>)
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	b2db      	uxtb	r3, r3
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	b2db      	uxtb	r3, r3
 800244a:	4313      	orrs	r3, r2
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <readGRAM+0x26c>)
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	b2db      	uxtb	r3, r3
 8002454:	f003 0310 	and.w	r3, r3, #16
 8002458:	b2db      	uxtb	r3, r3
 800245a:	4313      	orrs	r3, r2
 800245c:	b2da      	uxtb	r2, r3
 800245e:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <readGRAM+0x26c>)
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	b2db      	uxtb	r3, r3
 800246a:	4313      	orrs	r3, r2
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <readGRAM+0x26c>)
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	b2db      	uxtb	r3, r3
 8002474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002478:	b2db      	uxtb	r3, r3
 800247a:	4313      	orrs	r3, r2
 800247c:	b2da      	uxtb	r2, r3
 800247e:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <readGRAM+0x264>)
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	b2db      	uxtb	r3, r3
 8002488:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800248c:	b2db      	uxtb	r3, r3
 800248e:	4313      	orrs	r3, r2
 8002490:	75fb      	strb	r3, [r7, #23]
 8002492:	2101      	movs	r1, #1
 8002494:	4809      	ldr	r0, [pc, #36]	; (80024bc <readGRAM+0x264>)
 8002496:	f7fe fb7b 	bl	8000b90 <PIN_HIGH>
 800249a:	2101      	movs	r1, #1
 800249c:	4807      	ldr	r0, [pc, #28]	; (80024bc <readGRAM+0x264>)
 800249e:	f7fe fb77 	bl	8000b90 <PIN_HIGH>
 80024a2:	e0d3      	b.n	800264c <readGRAM+0x3f4>
 80024a4:	20000120 	.word	0x20000120
 80024a8:	2000010d 	.word	0x2000010d
 80024ac:	20000114 	.word	0x20000114
 80024b0:	20000116 	.word	0x20000116
 80024b4:	2000011c 	.word	0x2000011c
 80024b8:	2000011e 	.word	0x2000011e
 80024bc:	40020000 	.word	0x40020000
 80024c0:	80200000 	.word	0x80200000
 80024c4:	40020400 	.word	0x40020400
        } else {
            READ_16(dummy);
 80024c8:	2101      	movs	r1, #1
 80024ca:	4893      	ldr	r0, [pc, #588]	; (8002718 <readGRAM+0x4c0>)
 80024cc:	f7fe fb60 	bl	8000b90 <PIN_HIGH>
 80024d0:	2101      	movs	r1, #1
 80024d2:	4891      	ldr	r0, [pc, #580]	; (8002718 <readGRAM+0x4c0>)
 80024d4:	f7fe fb4c 	bl	8000b70 <PIN_LOW>
 80024d8:	2101      	movs	r1, #1
 80024da:	488f      	ldr	r0, [pc, #572]	; (8002718 <readGRAM+0x4c0>)
 80024dc:	f7fe fb48 	bl	8000b70 <PIN_LOW>
 80024e0:	2101      	movs	r1, #1
 80024e2:	488d      	ldr	r0, [pc, #564]	; (8002718 <readGRAM+0x4c0>)
 80024e4:	f7fe fb44 	bl	8000b70 <PIN_LOW>
 80024e8:	2101      	movs	r1, #1
 80024ea:	488b      	ldr	r0, [pc, #556]	; (8002718 <readGRAM+0x4c0>)
 80024ec:	f7fe fb40 	bl	8000b70 <PIN_LOW>
 80024f0:	4b8a      	ldr	r3, [pc, #552]	; (800271c <readGRAM+0x4c4>)
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	4b87      	ldr	r3, [pc, #540]	; (800271c <readGRAM+0x4c4>)
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	b2db      	uxtb	r3, r3
 8002508:	4313      	orrs	r3, r2
 800250a:	b2da      	uxtb	r2, r3
 800250c:	4b82      	ldr	r3, [pc, #520]	; (8002718 <readGRAM+0x4c0>)
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	0b5b      	lsrs	r3, r3, #13
 8002512:	b2db      	uxtb	r3, r3
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	b2db      	uxtb	r3, r3
 800251a:	4313      	orrs	r3, r2
 800251c:	b2da      	uxtb	r2, r3
 800251e:	4b7f      	ldr	r3, [pc, #508]	; (800271c <readGRAM+0x4c4>)
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	b2db      	uxtb	r3, r3
 8002524:	f003 0308 	and.w	r3, r3, #8
 8002528:	b2db      	uxtb	r3, r3
 800252a:	4313      	orrs	r3, r2
 800252c:	b2da      	uxtb	r2, r3
 800252e:	4b7b      	ldr	r3, [pc, #492]	; (800271c <readGRAM+0x4c4>)
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	b2db      	uxtb	r3, r3
 8002534:	f003 0310 	and.w	r3, r3, #16
 8002538:	b2db      	uxtb	r3, r3
 800253a:	4313      	orrs	r3, r2
 800253c:	b2da      	uxtb	r2, r3
 800253e:	4b77      	ldr	r3, [pc, #476]	; (800271c <readGRAM+0x4c4>)
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	b2db      	uxtb	r3, r3
 8002544:	f003 0320 	and.w	r3, r3, #32
 8002548:	b2db      	uxtb	r3, r3
 800254a:	4313      	orrs	r3, r2
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4b73      	ldr	r3, [pc, #460]	; (800271c <readGRAM+0x4c4>)
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	b2db      	uxtb	r3, r3
 8002554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002558:	b2db      	uxtb	r3, r3
 800255a:	4313      	orrs	r3, r2
 800255c:	b2da      	uxtb	r2, r3
 800255e:	4b6e      	ldr	r3, [pc, #440]	; (8002718 <readGRAM+0x4c0>)
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	b2db      	uxtb	r3, r3
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	b2db      	uxtb	r3, r3
 8002568:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800256c:	b2db      	uxtb	r3, r3
 800256e:	4313      	orrs	r3, r2
 8002570:	76fb      	strb	r3, [r7, #27]
 8002572:	2101      	movs	r1, #1
 8002574:	4868      	ldr	r0, [pc, #416]	; (8002718 <readGRAM+0x4c0>)
 8002576:	f7fe fb0b 	bl	8000b90 <PIN_HIGH>
 800257a:	2101      	movs	r1, #1
 800257c:	4866      	ldr	r0, [pc, #408]	; (8002718 <readGRAM+0x4c0>)
 800257e:	f7fe fb07 	bl	8000b90 <PIN_HIGH>
 8002582:	2101      	movs	r1, #1
 8002584:	4864      	ldr	r0, [pc, #400]	; (8002718 <readGRAM+0x4c0>)
 8002586:	f7fe fb03 	bl	8000b90 <PIN_HIGH>
 800258a:	2101      	movs	r1, #1
 800258c:	4862      	ldr	r0, [pc, #392]	; (8002718 <readGRAM+0x4c0>)
 800258e:	f7fe faef 	bl	8000b70 <PIN_LOW>
 8002592:	2101      	movs	r1, #1
 8002594:	4860      	ldr	r0, [pc, #384]	; (8002718 <readGRAM+0x4c0>)
 8002596:	f7fe faeb 	bl	8000b70 <PIN_LOW>
 800259a:	2101      	movs	r1, #1
 800259c:	485e      	ldr	r0, [pc, #376]	; (8002718 <readGRAM+0x4c0>)
 800259e:	f7fe fae7 	bl	8000b70 <PIN_LOW>
 80025a2:	2101      	movs	r1, #1
 80025a4:	485c      	ldr	r0, [pc, #368]	; (8002718 <readGRAM+0x4c0>)
 80025a6:	f7fe fae3 	bl	8000b70 <PIN_LOW>
 80025aa:	4b5c      	ldr	r3, [pc, #368]	; (800271c <readGRAM+0x4c4>)
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	4b59      	ldr	r3, [pc, #356]	; (800271c <readGRAM+0x4c4>)
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	4313      	orrs	r3, r2
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	4b54      	ldr	r3, [pc, #336]	; (8002718 <readGRAM+0x4c0>)
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	0b5b      	lsrs	r3, r3, #13
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	4313      	orrs	r3, r2
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	4b50      	ldr	r3, [pc, #320]	; (800271c <readGRAM+0x4c4>)
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	b29b      	uxth	r3, r3
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	4313      	orrs	r3, r2
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	4b4c      	ldr	r3, [pc, #304]	; (800271c <readGRAM+0x4c4>)
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	f003 0310 	and.w	r3, r3, #16
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	4313      	orrs	r3, r2
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	4b48      	ldr	r3, [pc, #288]	; (800271c <readGRAM+0x4c4>)
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	f003 0320 	and.w	r3, r3, #32
 8002602:	b29b      	uxth	r3, r3
 8002604:	4313      	orrs	r3, r2
 8002606:	b29a      	uxth	r2, r3
 8002608:	4b44      	ldr	r3, [pc, #272]	; (800271c <readGRAM+0x4c4>)
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	b29b      	uxth	r3, r3
 800260e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002612:	b29b      	uxth	r3, r3
 8002614:	4313      	orrs	r3, r2
 8002616:	b29a      	uxth	r2, r3
 8002618:	4b3f      	ldr	r3, [pc, #252]	; (8002718 <readGRAM+0x4c0>)
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	b29b      	uxth	r3, r3
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	b29b      	uxth	r3, r3
 8002622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002626:	b29b      	uxth	r3, r3
 8002628:	4313      	orrs	r3, r2
 800262a:	833b      	strh	r3, [r7, #24]
 800262c:	2101      	movs	r1, #1
 800262e:	483a      	ldr	r0, [pc, #232]	; (8002718 <readGRAM+0x4c0>)
 8002630:	f7fe faae 	bl	8000b90 <PIN_HIGH>
 8002634:	2101      	movs	r1, #1
 8002636:	4838      	ldr	r0, [pc, #224]	; (8002718 <readGRAM+0x4c0>)
 8002638:	f7fe faaa 	bl	8000b90 <PIN_HIGH>
 800263c:	7efb      	ldrb	r3, [r7, #27]
 800263e:	021b      	lsls	r3, r3, #8
 8002640:	b21a      	sxth	r2, r3
 8002642:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002646:	4313      	orrs	r3, r2
 8002648:	b21b      	sxth	r3, r3
 800264a:	833b      	strh	r3, [r7, #24]
        }
		if (_lcd_ID == 0x1511) READ_8(r);   //extra dummy for R61511
 800264c:	4b34      	ldr	r3, [pc, #208]	; (8002720 <readGRAM+0x4c8>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	f241 5211 	movw	r2, #5393	; 0x1511
 8002654:	4293      	cmp	r3, r2
 8002656:	f040 82a5 	bne.w	8002ba4 <readGRAM+0x94c>
 800265a:	2101      	movs	r1, #1
 800265c:	482e      	ldr	r0, [pc, #184]	; (8002718 <readGRAM+0x4c0>)
 800265e:	f7fe fa97 	bl	8000b90 <PIN_HIGH>
 8002662:	2101      	movs	r1, #1
 8002664:	482c      	ldr	r0, [pc, #176]	; (8002718 <readGRAM+0x4c0>)
 8002666:	f7fe fa83 	bl	8000b70 <PIN_LOW>
 800266a:	2101      	movs	r1, #1
 800266c:	482a      	ldr	r0, [pc, #168]	; (8002718 <readGRAM+0x4c0>)
 800266e:	f7fe fa7f 	bl	8000b70 <PIN_LOW>
 8002672:	2101      	movs	r1, #1
 8002674:	4828      	ldr	r0, [pc, #160]	; (8002718 <readGRAM+0x4c0>)
 8002676:	f7fe fa7b 	bl	8000b70 <PIN_LOW>
 800267a:	2101      	movs	r1, #1
 800267c:	4826      	ldr	r0, [pc, #152]	; (8002718 <readGRAM+0x4c0>)
 800267e:	f7fe fa77 	bl	8000b70 <PIN_LOW>
 8002682:	4b26      	ldr	r3, [pc, #152]	; (800271c <readGRAM+0x4c4>)
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	b2da      	uxtb	r2, r3
 800268e:	4b23      	ldr	r3, [pc, #140]	; (800271c <readGRAM+0x4c4>)
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	b2db      	uxtb	r3, r3
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	b2db      	uxtb	r3, r3
 800269a:	4313      	orrs	r3, r2
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4b1e      	ldr	r3, [pc, #120]	; (8002718 <readGRAM+0x4c0>)
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	0b5b      	lsrs	r3, r3, #13
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	4313      	orrs	r3, r2
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	4b1a      	ldr	r3, [pc, #104]	; (800271c <readGRAM+0x4c4>)
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	4313      	orrs	r3, r2
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	4b16      	ldr	r3, [pc, #88]	; (800271c <readGRAM+0x4c4>)
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	f003 0310 	and.w	r3, r3, #16
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	4313      	orrs	r3, r2
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	4b12      	ldr	r3, [pc, #72]	; (800271c <readGRAM+0x4c4>)
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	f003 0320 	and.w	r3, r3, #32
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	4313      	orrs	r3, r2
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	4b0e      	ldr	r3, [pc, #56]	; (800271c <readGRAM+0x4c4>)
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	4313      	orrs	r3, r2
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <readGRAM+0x4c0>)
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	4313      	orrs	r3, r2
 8002702:	75fb      	strb	r3, [r7, #23]
 8002704:	2101      	movs	r1, #1
 8002706:	4804      	ldr	r0, [pc, #16]	; (8002718 <readGRAM+0x4c0>)
 8002708:	f7fe fa42 	bl	8000b90 <PIN_HIGH>
 800270c:	2101      	movs	r1, #1
 800270e:	4802      	ldr	r0, [pc, #8]	; (8002718 <readGRAM+0x4c0>)
 8002710:	f7fe fa3e 	bl	8000b90 <PIN_HIGH>
        while (n)
 8002714:	e246      	b.n	8002ba4 <readGRAM+0x94c>
 8002716:	bf00      	nop
 8002718:	40020000 	.word	0x40020000
 800271c:	40020400 	.word	0x40020400
 8002720:	20000116 	.word	0x20000116
        {
            if (_lcd_capable & READ_24BITS)
 8002724:	4b9a      	ldr	r3, [pc, #616]	; (8002990 <readGRAM+0x738>)
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	f003 0310 	and.w	r3, r3, #16
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 8135 	beq.w	800299c <readGRAM+0x744>
            {
                READ_8(r);
 8002732:	2101      	movs	r1, #1
 8002734:	4897      	ldr	r0, [pc, #604]	; (8002994 <readGRAM+0x73c>)
 8002736:	f7fe fa2b 	bl	8000b90 <PIN_HIGH>
 800273a:	2101      	movs	r1, #1
 800273c:	4895      	ldr	r0, [pc, #596]	; (8002994 <readGRAM+0x73c>)
 800273e:	f7fe fa17 	bl	8000b70 <PIN_LOW>
 8002742:	2101      	movs	r1, #1
 8002744:	4893      	ldr	r0, [pc, #588]	; (8002994 <readGRAM+0x73c>)
 8002746:	f7fe fa13 	bl	8000b70 <PIN_LOW>
 800274a:	2101      	movs	r1, #1
 800274c:	4891      	ldr	r0, [pc, #580]	; (8002994 <readGRAM+0x73c>)
 800274e:	f7fe fa0f 	bl	8000b70 <PIN_LOW>
 8002752:	2101      	movs	r1, #1
 8002754:	488f      	ldr	r0, [pc, #572]	; (8002994 <readGRAM+0x73c>)
 8002756:	f7fe fa0b 	bl	8000b70 <PIN_LOW>
 800275a:	4b8f      	ldr	r3, [pc, #572]	; (8002998 <readGRAM+0x740>)
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	b2db      	uxtb	r3, r3
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	b2da      	uxtb	r2, r3
 8002766:	4b8c      	ldr	r3, [pc, #560]	; (8002998 <readGRAM+0x740>)
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	b2db      	uxtb	r3, r3
 8002772:	4313      	orrs	r3, r2
 8002774:	b2da      	uxtb	r2, r3
 8002776:	4b87      	ldr	r3, [pc, #540]	; (8002994 <readGRAM+0x73c>)
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	0b5b      	lsrs	r3, r3, #13
 800277c:	b2db      	uxtb	r3, r3
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	b2db      	uxtb	r3, r3
 8002784:	4313      	orrs	r3, r2
 8002786:	b2da      	uxtb	r2, r3
 8002788:	4b83      	ldr	r3, [pc, #524]	; (8002998 <readGRAM+0x740>)
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	b2db      	uxtb	r3, r3
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	b2db      	uxtb	r3, r3
 8002794:	4313      	orrs	r3, r2
 8002796:	b2da      	uxtb	r2, r3
 8002798:	4b7f      	ldr	r3, [pc, #508]	; (8002998 <readGRAM+0x740>)
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	b2db      	uxtb	r3, r3
 800279e:	f003 0310 	and.w	r3, r3, #16
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	4313      	orrs	r3, r2
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	4b7b      	ldr	r3, [pc, #492]	; (8002998 <readGRAM+0x740>)
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	f003 0320 	and.w	r3, r3, #32
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	4313      	orrs	r3, r2
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	4b77      	ldr	r3, [pc, #476]	; (8002998 <readGRAM+0x740>)
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	4313      	orrs	r3, r2
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	4b72      	ldr	r3, [pc, #456]	; (8002994 <readGRAM+0x73c>)
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	4313      	orrs	r3, r2
 80027da:	75fb      	strb	r3, [r7, #23]
 80027dc:	2101      	movs	r1, #1
 80027de:	486d      	ldr	r0, [pc, #436]	; (8002994 <readGRAM+0x73c>)
 80027e0:	f7fe f9d6 	bl	8000b90 <PIN_HIGH>
 80027e4:	2101      	movs	r1, #1
 80027e6:	486b      	ldr	r0, [pc, #428]	; (8002994 <readGRAM+0x73c>)
 80027e8:	f7fe f9d2 	bl	8000b90 <PIN_HIGH>
                READ_8(g);
 80027ec:	2101      	movs	r1, #1
 80027ee:	4869      	ldr	r0, [pc, #420]	; (8002994 <readGRAM+0x73c>)
 80027f0:	f7fe f9ce 	bl	8000b90 <PIN_HIGH>
 80027f4:	2101      	movs	r1, #1
 80027f6:	4867      	ldr	r0, [pc, #412]	; (8002994 <readGRAM+0x73c>)
 80027f8:	f7fe f9ba 	bl	8000b70 <PIN_LOW>
 80027fc:	2101      	movs	r1, #1
 80027fe:	4865      	ldr	r0, [pc, #404]	; (8002994 <readGRAM+0x73c>)
 8002800:	f7fe f9b6 	bl	8000b70 <PIN_LOW>
 8002804:	2101      	movs	r1, #1
 8002806:	4863      	ldr	r0, [pc, #396]	; (8002994 <readGRAM+0x73c>)
 8002808:	f7fe f9b2 	bl	8000b70 <PIN_LOW>
 800280c:	2101      	movs	r1, #1
 800280e:	4861      	ldr	r0, [pc, #388]	; (8002994 <readGRAM+0x73c>)
 8002810:	f7fe f9ae 	bl	8000b70 <PIN_LOW>
 8002814:	4b60      	ldr	r3, [pc, #384]	; (8002998 <readGRAM+0x740>)
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	b2da      	uxtb	r2, r3
 8002820:	4b5d      	ldr	r3, [pc, #372]	; (8002998 <readGRAM+0x740>)
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	b2db      	uxtb	r3, r3
 800282c:	4313      	orrs	r3, r2
 800282e:	b2da      	uxtb	r2, r3
 8002830:	4b58      	ldr	r3, [pc, #352]	; (8002994 <readGRAM+0x73c>)
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	0b5b      	lsrs	r3, r3, #13
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	b2db      	uxtb	r3, r3
 800283e:	4313      	orrs	r3, r2
 8002840:	b2da      	uxtb	r2, r3
 8002842:	4b55      	ldr	r3, [pc, #340]	; (8002998 <readGRAM+0x740>)
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	b2db      	uxtb	r3, r3
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	b2db      	uxtb	r3, r3
 800284e:	4313      	orrs	r3, r2
 8002850:	b2da      	uxtb	r2, r3
 8002852:	4b51      	ldr	r3, [pc, #324]	; (8002998 <readGRAM+0x740>)
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	b2db      	uxtb	r3, r3
 8002858:	f003 0310 	and.w	r3, r3, #16
 800285c:	b2db      	uxtb	r3, r3
 800285e:	4313      	orrs	r3, r2
 8002860:	b2da      	uxtb	r2, r3
 8002862:	4b4d      	ldr	r3, [pc, #308]	; (8002998 <readGRAM+0x740>)
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	b2db      	uxtb	r3, r3
 8002868:	f003 0320 	and.w	r3, r3, #32
 800286c:	b2db      	uxtb	r3, r3
 800286e:	4313      	orrs	r3, r2
 8002870:	b2da      	uxtb	r2, r3
 8002872:	4b49      	ldr	r3, [pc, #292]	; (8002998 <readGRAM+0x740>)
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	b2db      	uxtb	r3, r3
 8002878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287c:	b2db      	uxtb	r3, r3
 800287e:	4313      	orrs	r3, r2
 8002880:	b2da      	uxtb	r2, r3
 8002882:	4b44      	ldr	r3, [pc, #272]	; (8002994 <readGRAM+0x73c>)
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	b2db      	uxtb	r3, r3
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	b2db      	uxtb	r3, r3
 800288c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002890:	b2db      	uxtb	r3, r3
 8002892:	4313      	orrs	r3, r2
 8002894:	757b      	strb	r3, [r7, #21]
 8002896:	2101      	movs	r1, #1
 8002898:	483e      	ldr	r0, [pc, #248]	; (8002994 <readGRAM+0x73c>)
 800289a:	f7fe f979 	bl	8000b90 <PIN_HIGH>
 800289e:	2101      	movs	r1, #1
 80028a0:	483c      	ldr	r0, [pc, #240]	; (8002994 <readGRAM+0x73c>)
 80028a2:	f7fe f975 	bl	8000b90 <PIN_HIGH>
                READ_8(b);
 80028a6:	2101      	movs	r1, #1
 80028a8:	483a      	ldr	r0, [pc, #232]	; (8002994 <readGRAM+0x73c>)
 80028aa:	f7fe f971 	bl	8000b90 <PIN_HIGH>
 80028ae:	2101      	movs	r1, #1
 80028b0:	4838      	ldr	r0, [pc, #224]	; (8002994 <readGRAM+0x73c>)
 80028b2:	f7fe f95d 	bl	8000b70 <PIN_LOW>
 80028b6:	2101      	movs	r1, #1
 80028b8:	4836      	ldr	r0, [pc, #216]	; (8002994 <readGRAM+0x73c>)
 80028ba:	f7fe f959 	bl	8000b70 <PIN_LOW>
 80028be:	2101      	movs	r1, #1
 80028c0:	4834      	ldr	r0, [pc, #208]	; (8002994 <readGRAM+0x73c>)
 80028c2:	f7fe f955 	bl	8000b70 <PIN_LOW>
 80028c6:	2101      	movs	r1, #1
 80028c8:	4832      	ldr	r0, [pc, #200]	; (8002994 <readGRAM+0x73c>)
 80028ca:	f7fe f951 	bl	8000b70 <PIN_LOW>
 80028ce:	4b32      	ldr	r3, [pc, #200]	; (8002998 <readGRAM+0x740>)
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	4b2f      	ldr	r3, [pc, #188]	; (8002998 <readGRAM+0x740>)
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	4313      	orrs	r3, r2
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	4b2a      	ldr	r3, [pc, #168]	; (8002994 <readGRAM+0x73c>)
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	0b5b      	lsrs	r3, r3, #13
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	4313      	orrs	r3, r2
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	4b26      	ldr	r3, [pc, #152]	; (8002998 <readGRAM+0x740>)
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	b2db      	uxtb	r3, r3
 8002908:	4313      	orrs	r3, r2
 800290a:	b2da      	uxtb	r2, r3
 800290c:	4b22      	ldr	r3, [pc, #136]	; (8002998 <readGRAM+0x740>)
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	f003 0310 	and.w	r3, r3, #16
 8002916:	b2db      	uxtb	r3, r3
 8002918:	4313      	orrs	r3, r2
 800291a:	b2da      	uxtb	r2, r3
 800291c:	4b1e      	ldr	r3, [pc, #120]	; (8002998 <readGRAM+0x740>)
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	b2db      	uxtb	r3, r3
 8002928:	4313      	orrs	r3, r2
 800292a:	b2da      	uxtb	r2, r3
 800292c:	4b1a      	ldr	r3, [pc, #104]	; (8002998 <readGRAM+0x740>)
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002936:	b2db      	uxtb	r3, r3
 8002938:	4313      	orrs	r3, r2
 800293a:	b2da      	uxtb	r2, r3
 800293c:	4b15      	ldr	r3, [pc, #84]	; (8002994 <readGRAM+0x73c>)
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	b2db      	uxtb	r3, r3
 8002946:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800294a:	b2db      	uxtb	r3, r3
 800294c:	4313      	orrs	r3, r2
 800294e:	753b      	strb	r3, [r7, #20]
 8002950:	2101      	movs	r1, #1
 8002952:	4810      	ldr	r0, [pc, #64]	; (8002994 <readGRAM+0x73c>)
 8002954:	f7fe f91c 	bl	8000b90 <PIN_HIGH>
 8002958:	2101      	movs	r1, #1
 800295a:	480e      	ldr	r0, [pc, #56]	; (8002994 <readGRAM+0x73c>)
 800295c:	f7fe f918 	bl	8000b90 <PIN_HIGH>
                if (_lcd_capable & READ_BGR)
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <readGRAM+0x738>)
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <readGRAM+0x726>
                    ret = color565(b, g, r);
 800296c:	7dfa      	ldrb	r2, [r7, #23]
 800296e:	7d79      	ldrb	r1, [r7, #21]
 8002970:	7d3b      	ldrb	r3, [r7, #20]
 8002972:	4618      	mov	r0, r3
 8002974:	f7fe f9d3 	bl	8000d1e <color565>
 8002978:	4603      	mov	r3, r0
 800297a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800297c:	e0f7      	b.n	8002b6e <readGRAM+0x916>
                else
                    ret = color565(r, g, b);
 800297e:	7d3a      	ldrb	r2, [r7, #20]
 8002980:	7d79      	ldrb	r1, [r7, #21]
 8002982:	7dfb      	ldrb	r3, [r7, #23]
 8002984:	4618      	mov	r0, r3
 8002986:	f7fe f9ca 	bl	8000d1e <color565>
 800298a:	4603      	mov	r3, r0
 800298c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800298e:	e0ee      	b.n	8002b6e <readGRAM+0x916>
 8002990:	20000114 	.word	0x20000114
 8002994:	40020000 	.word	0x40020000
 8002998:	40020400 	.word	0x40020400
            } else
            {
                READ_16(ret);
 800299c:	2101      	movs	r1, #1
 800299e:	48a6      	ldr	r0, [pc, #664]	; (8002c38 <readGRAM+0x9e0>)
 80029a0:	f7fe f8f6 	bl	8000b90 <PIN_HIGH>
 80029a4:	2101      	movs	r1, #1
 80029a6:	48a4      	ldr	r0, [pc, #656]	; (8002c38 <readGRAM+0x9e0>)
 80029a8:	f7fe f8e2 	bl	8000b70 <PIN_LOW>
 80029ac:	2101      	movs	r1, #1
 80029ae:	48a2      	ldr	r0, [pc, #648]	; (8002c38 <readGRAM+0x9e0>)
 80029b0:	f7fe f8de 	bl	8000b70 <PIN_LOW>
 80029b4:	2101      	movs	r1, #1
 80029b6:	48a0      	ldr	r0, [pc, #640]	; (8002c38 <readGRAM+0x9e0>)
 80029b8:	f7fe f8da 	bl	8000b70 <PIN_LOW>
 80029bc:	2101      	movs	r1, #1
 80029be:	489e      	ldr	r0, [pc, #632]	; (8002c38 <readGRAM+0x9e0>)
 80029c0:	f7fe f8d6 	bl	8000b70 <PIN_LOW>
 80029c4:	4b9d      	ldr	r3, [pc, #628]	; (8002c3c <readGRAM+0x9e4>)
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	4b9a      	ldr	r3, [pc, #616]	; (8002c3c <readGRAM+0x9e4>)
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	4313      	orrs	r3, r2
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	4b95      	ldr	r3, [pc, #596]	; (8002c38 <readGRAM+0x9e0>)
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	0b5b      	lsrs	r3, r3, #13
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	4313      	orrs	r3, r2
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	4b92      	ldr	r3, [pc, #584]	; (8002c3c <readGRAM+0x9e4>)
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	4313      	orrs	r3, r2
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	4b8e      	ldr	r3, [pc, #568]	; (8002c3c <readGRAM+0x9e4>)
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	f003 0310 	and.w	r3, r3, #16
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	4b8a      	ldr	r3, [pc, #552]	; (8002c3c <readGRAM+0x9e4>)
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	f003 0320 	and.w	r3, r3, #32
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	4b86      	ldr	r3, [pc, #536]	; (8002c3c <readGRAM+0x9e4>)
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	4b81      	ldr	r3, [pc, #516]	; (8002c38 <readGRAM+0x9e0>)
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	4313      	orrs	r3, r2
 8002a44:	75bb      	strb	r3, [r7, #22]
 8002a46:	2101      	movs	r1, #1
 8002a48:	487b      	ldr	r0, [pc, #492]	; (8002c38 <readGRAM+0x9e0>)
 8002a4a:	f7fe f8a1 	bl	8000b90 <PIN_HIGH>
 8002a4e:	2101      	movs	r1, #1
 8002a50:	4879      	ldr	r0, [pc, #484]	; (8002c38 <readGRAM+0x9e0>)
 8002a52:	f7fe f89d 	bl	8000b90 <PIN_HIGH>
 8002a56:	2101      	movs	r1, #1
 8002a58:	4877      	ldr	r0, [pc, #476]	; (8002c38 <readGRAM+0x9e0>)
 8002a5a:	f7fe f899 	bl	8000b90 <PIN_HIGH>
 8002a5e:	2101      	movs	r1, #1
 8002a60:	4875      	ldr	r0, [pc, #468]	; (8002c38 <readGRAM+0x9e0>)
 8002a62:	f7fe f885 	bl	8000b70 <PIN_LOW>
 8002a66:	2101      	movs	r1, #1
 8002a68:	4873      	ldr	r0, [pc, #460]	; (8002c38 <readGRAM+0x9e0>)
 8002a6a:	f7fe f881 	bl	8000b70 <PIN_LOW>
 8002a6e:	2101      	movs	r1, #1
 8002a70:	4871      	ldr	r0, [pc, #452]	; (8002c38 <readGRAM+0x9e0>)
 8002a72:	f7fe f87d 	bl	8000b70 <PIN_LOW>
 8002a76:	2101      	movs	r1, #1
 8002a78:	486f      	ldr	r0, [pc, #444]	; (8002c38 <readGRAM+0x9e0>)
 8002a7a:	f7fe f879 	bl	8000b70 <PIN_LOW>
 8002a7e:	4b6f      	ldr	r3, [pc, #444]	; (8002c3c <readGRAM+0x9e4>)
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	4b6c      	ldr	r3, [pc, #432]	; (8002c3c <readGRAM+0x9e4>)
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	4313      	orrs	r3, r2
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	4b67      	ldr	r3, [pc, #412]	; (8002c38 <readGRAM+0x9e0>)
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	0b5b      	lsrs	r3, r3, #13
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	f003 0304 	and.w	r3, r3, #4
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	4b63      	ldr	r3, [pc, #396]	; (8002c3c <readGRAM+0x9e4>)
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	4b5f      	ldr	r3, [pc, #380]	; (8002c3c <readGRAM+0x9e4>)
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	4b5b      	ldr	r3, [pc, #364]	; (8002c3c <readGRAM+0x9e4>)
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	f003 0320 	and.w	r3, r3, #32
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	4b57      	ldr	r3, [pc, #348]	; (8002c3c <readGRAM+0x9e4>)
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	4b52      	ldr	r3, [pc, #328]	; (8002c38 <readGRAM+0x9e0>)
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	4313      	orrs	r3, r2
 8002afe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002b00:	2101      	movs	r1, #1
 8002b02:	484d      	ldr	r0, [pc, #308]	; (8002c38 <readGRAM+0x9e0>)
 8002b04:	f7fe f844 	bl	8000b90 <PIN_HIGH>
 8002b08:	2101      	movs	r1, #1
 8002b0a:	484b      	ldr	r0, [pc, #300]	; (8002c38 <readGRAM+0x9e0>)
 8002b0c:	f7fe f840 	bl	8000b90 <PIN_HIGH>
 8002b10:	7dbb      	ldrb	r3, [r7, #22]
 8002b12:	021b      	lsls	r3, r3, #8
 8002b14:	b21a      	sxth	r2, r3
 8002b16:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	b21b      	sxth	r3, r3
 8002b1e:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_LOWHIGH)
 8002b20:	4b47      	ldr	r3, [pc, #284]	; (8002c40 <readGRAM+0x9e8>)
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d009      	beq.n	8002b40 <readGRAM+0x8e8>
                    ret = (ret >> 8) | (ret << 8);
 8002b2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b2e:	0a1b      	lsrs	r3, r3, #8
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	b21a      	sxth	r2, r3
 8002b34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b36:	021b      	lsls	r3, r3, #8
 8002b38:	b21b      	sxth	r3, r3
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	b21b      	sxth	r3, r3
 8002b3e:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_BGR)
 8002b40:	4b3f      	ldr	r3, [pc, #252]	; (8002c40 <readGRAM+0x9e8>)
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d010      	beq.n	8002b6e <readGRAM+0x916>
                    ret = (ret & 0x07E0) | (ret >> 11) | (ret << 11);
 8002b4c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002b50:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8002b54:	b21a      	sxth	r2, r3
 8002b56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b58:	0adb      	lsrs	r3, r3, #11
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	b21b      	sxth	r3, r3
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	b21a      	sxth	r2, r3
 8002b62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b64:	02db      	lsls	r3, r3, #11
 8002b66:	b21b      	sxth	r3, r3
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	b21b      	sxth	r3, r3
 8002b6c:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
#if defined(SUPPORT_9488_555)
    if (is555) ret = color555_to_565(ret);
 8002b6e:	4b35      	ldr	r3, [pc, #212]	; (8002c44 <readGRAM+0x9ec>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d005      	beq.n	8002b82 <readGRAM+0x92a>
 8002b76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fe f87f 	bl	8000c7c <color555_to_565>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
            *block++ = ret;
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	1c9a      	adds	r2, r3, #2
 8002b86:	60ba      	str	r2, [r7, #8]
 8002b88:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002b8a:	801a      	strh	r2, [r3, #0]
            n--;
 8002b8c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	847b      	strh	r3, [r7, #34]	; 0x22
            if (!(_lcd_capable & AUTO_READINC))
 8002b98:	4b29      	ldr	r3, [pc, #164]	; (8002c40 <readGRAM+0x9e8>)
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <readGRAM+0x958>
        while (n)
 8002ba4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f47f adbb 	bne.w	8002724 <readGRAM+0x4cc>
 8002bae:	e000      	b.n	8002bb2 <readGRAM+0x95a>
                break;
 8002bb0:	bf00      	nop
        }
        if (++col >= w) {
 8002bb2:	8bfb      	ldrh	r3, [r7, #30]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	83fb      	strh	r3, [r7, #30]
 8002bba:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8002bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	db0d      	blt.n	8002be2 <readGRAM+0x98a>
            col = 0;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	83fb      	strh	r3, [r7, #30]
            if (++row >= h)
 8002bca:	8c3b      	ldrh	r3, [r7, #32]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	843b      	strh	r3, [r7, #32]
 8002bd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8002bd6:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	db01      	blt.n	8002be2 <readGRAM+0x98a>
                row = 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	843b      	strh	r3, [r7, #32]
        }
        RD_IDLE;
 8002be2:	2101      	movs	r1, #1
 8002be4:	4814      	ldr	r0, [pc, #80]	; (8002c38 <readGRAM+0x9e0>)
 8002be6:	f7fd ffd3 	bl	8000b90 <PIN_HIGH>
        CS_IDLE;
 8002bea:	2108      	movs	r1, #8
 8002bec:	4812      	ldr	r0, [pc, #72]	; (8002c38 <readGRAM+0x9e0>)
 8002bee:	f7fd ffcf 	bl	8000b90 <PIN_HIGH>
        setWriteDir();
 8002bf2:	f7fe f92f 	bl	8000e54 <setWriteDir>
    while (n > 0) {
 8002bf6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f73f ab6f 	bgt.w	80022de <readGRAM+0x86>
    }
    if (!(_lcd_capable & MIPI_DCS_REV1))
 8002c00:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <readGRAM+0x9e8>)
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d110      	bne.n	8002c2e <readGRAM+0x9d6>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 8002c0c:	f7fd fffe 	bl	8000c0c <width>
 8002c10:	4603      	mov	r3, r0
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	b21c      	sxth	r4, r3
 8002c18:	f7fe f804 	bl	8000c24 <height>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	b21b      	sxth	r3, r3
 8002c24:	4622      	mov	r2, r4
 8002c26:	2100      	movs	r1, #0
 8002c28:	2000      	movs	r0, #0
 8002c2a:	f000 fb4b 	bl	80032c4 <setAddrWindow>
    return 0;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	372c      	adds	r7, #44	; 0x2c
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd90      	pop	{r4, r7, pc}
 8002c38:	40020000 	.word	0x40020000
 8002c3c:	40020400 	.word	0x40020400
 8002c40:	20000114 	.word	0x20000114
 8002c44:	2000010e 	.word	0x2000010e

08002c48 <setRotation>:

void setRotation(uint8_t r)
{
 8002c48:	b590      	push	{r4, r7, lr}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	71fb      	strb	r3, [r7, #7]
   uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 8002c52:	4b9c      	ldr	r3, [pc, #624]	; (8002ec4 <setRotation+0x27c>)
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	827b      	strh	r3, [r7, #18]
   uint8_t val, d[3];
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	4b99      	ldr	r3, [pc, #612]	; (8002ec8 <setRotation+0x280>)
 8002c62:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 8002c64:	4b98      	ldr	r3, [pc, #608]	; (8002ec8 <setRotation+0x280>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <setRotation+0x2e>
 8002c70:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002c74:	e000      	b.n	8002c78 <setRotation+0x30>
 8002c76:	22f0      	movs	r2, #240	; 0xf0
 8002c78:	4b94      	ldr	r3, [pc, #592]	; (8002ecc <setRotation+0x284>)
 8002c7a:	801a      	strh	r2, [r3, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 8002c7c:	4b92      	ldr	r3, [pc, #584]	; (8002ec8 <setRotation+0x280>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <setRotation+0x44>
 8002c88:	22f0      	movs	r2, #240	; 0xf0
 8002c8a:	e001      	b.n	8002c90 <setRotation+0x48>
 8002c8c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002c90:	4b8f      	ldr	r3, [pc, #572]	; (8002ed0 <setRotation+0x288>)
 8002c92:	801a      	strh	r2, [r3, #0]
   switch (rotation) {
 8002c94:	4b8c      	ldr	r3, [pc, #560]	; (8002ec8 <setRotation+0x280>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d817      	bhi.n	8002ccc <setRotation+0x84>
 8002c9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ca4 <setRotation+0x5c>)
 8002c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca2:	bf00      	nop
 8002ca4:	08002cb5 	.word	0x08002cb5
 8002ca8:	08002cbb 	.word	0x08002cbb
 8002cac:	08002cc1 	.word	0x08002cc1
 8002cb0:	08002cc7 	.word	0x08002cc7
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 8002cb4:	2348      	movs	r3, #72	; 0x48
 8002cb6:	72fb      	strb	r3, [r7, #11]
       break;
 8002cb8:	e008      	b.n	8002ccc <setRotation+0x84>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 8002cba:	2328      	movs	r3, #40	; 0x28
 8002cbc:	72fb      	strb	r3, [r7, #11]
       break;
 8002cbe:	e005      	b.n	8002ccc <setRotation+0x84>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 8002cc0:	2398      	movs	r3, #152	; 0x98
 8002cc2:	72fb      	strb	r3, [r7, #11]
       break;
 8002cc4:	e002      	b.n	8002ccc <setRotation+0x84>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 8002cc6:	23f8      	movs	r3, #248	; 0xf8
 8002cc8:	72fb      	strb	r3, [r7, #11]
       break;
 8002cca:	bf00      	nop
   }
   if (_lcd_capable & INVERT_GS)
 8002ccc:	4b81      	ldr	r3, [pc, #516]	; (8002ed4 <setRotation+0x28c>)
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <setRotation+0x9c>
       val ^= 0x80;
 8002cd8:	7afb      	ldrb	r3, [r7, #11]
 8002cda:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_SS)
 8002ce4:	4b7b      	ldr	r3, [pc, #492]	; (8002ed4 <setRotation+0x28c>)
 8002ce6:	881b      	ldrh	r3, [r3, #0]
 8002ce8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d004      	beq.n	8002cfa <setRotation+0xb2>
       val ^= 0x40;
 8002cf0:	7afb      	ldrb	r3, [r7, #11]
 8002cf2:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_RGB)
 8002cfa:	4b76      	ldr	r3, [pc, #472]	; (8002ed4 <setRotation+0x28c>)
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d004      	beq.n	8002d10 <setRotation+0xc8>
       val ^= 0x08;
 8002d06:	7afb      	ldrb	r3, [r7, #11]
 8002d08:	f083 0308 	eor.w	r3, r3, #8
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & MIPI_DCS_REV1) {
 8002d10:	4b70      	ldr	r3, [pc, #448]	; (8002ed4 <setRotation+0x28c>)
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 8119 	beq.w	8002f50 <setRotation+0x308>
       if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 8002d1e:	4b6e      	ldr	r3, [pc, #440]	; (8002ed8 <setRotation+0x290>)
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	f646 0214 	movw	r2, #26644	; 0x6814
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d128      	bne.n	8002d7c <setRotation+0x134>
           GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 8002d2a:	7afb      	ldrb	r3, [r7, #11]
 8002d2c:	b25b      	sxtb	r3, r3
 8002d2e:	105b      	asrs	r3, r3, #1
 8002d30:	b25b      	sxtb	r3, r3
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d38:	823b      	strh	r3, [r7, #16]
           SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 8002d3a:	7afb      	ldrb	r3, [r7, #11]
 8002d3c:	105b      	asrs	r3, r3, #1
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	f003 0320 	and.w	r3, r3, #32
 8002d44:	81fb      	strh	r3, [r7, #14]
           val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 8002d46:	7afb      	ldrb	r3, [r7, #11]
 8002d48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	72fb      	strb	r3, [r7, #11]
           d[0] = 0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	723b      	strb	r3, [r7, #8]
           d[1] = GS | SS_v | 0x02;      //MY, MX
 8002d54:	8a3b      	ldrh	r3, [r7, #16]
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	89fb      	ldrh	r3, [r7, #14]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	f043 0302 	orr.w	r3, r3, #2
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	727b      	strb	r3, [r7, #9]
           d[2] = 0x3B;
 8002d68:	233b      	movs	r3, #59	; 0x3b
 8002d6a:	72bb      	strb	r3, [r7, #10]
           WriteCmdParamN(0xB6, 3, d);
 8002d6c:	f107 0308 	add.w	r3, r7, #8
 8002d70:	461a      	mov	r2, r3
 8002d72:	2103      	movs	r1, #3
 8002d74:	20b6      	movs	r0, #182	; 0xb6
 8002d76:	f7fe f9db 	bl	8001130 <WriteCmdParamN>
           goto common_MC;
 8002d7a:	e0c0      	b.n	8002efe <setRotation+0x2b6>
       }
       else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 8002d7c:	4b56      	ldr	r3, [pc, #344]	; (8002ed8 <setRotation+0x290>)
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	f641 1263 	movw	r2, #6499	; 0x1963
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d00b      	beq.n	8002da0 <setRotation+0x158>
 8002d88:	4b53      	ldr	r3, [pc, #332]	; (8002ed8 <setRotation+0x290>)
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	f249 4281 	movw	r2, #38017	; 0x9481
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d005      	beq.n	8002da0 <setRotation+0x158>
 8002d94:	4b50      	ldr	r3, [pc, #320]	; (8002ed8 <setRotation+0x290>)
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	f241 5211 	movw	r2, #5393	; 0x1511
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d139      	bne.n	8002e14 <setRotation+0x1cc>
           if (val & 0x80)
 8002da0:	7afb      	ldrb	r3, [r7, #11]
 8002da2:	b25b      	sxtb	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	da04      	bge.n	8002db2 <setRotation+0x16a>
               val |= 0x01;    //GS
 8002da8:	7afb      	ldrb	r3, [r7, #11]
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	72fb      	strb	r3, [r7, #11]
           if ((val & 0x40))
 8002db2:	7afb      	ldrb	r3, [r7, #11]
 8002db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d004      	beq.n	8002dc6 <setRotation+0x17e>
               val |= 0x02;    //SS
 8002dbc:	7afb      	ldrb	r3, [r7, #11]
 8002dbe:	f043 0302 	orr.w	r3, r3, #2
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1963) val &= ~0xC0;
 8002dc6:	4b44      	ldr	r3, [pc, #272]	; (8002ed8 <setRotation+0x290>)
 8002dc8:	881b      	ldrh	r3, [r3, #0]
 8002dca:	f641 1263 	movw	r2, #6499	; 0x1963
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d104      	bne.n	8002ddc <setRotation+0x194>
 8002dd2:	7afb      	ldrb	r3, [r7, #11]
 8002dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x9481) val &= ~0xD0;
 8002ddc:	4b3e      	ldr	r3, [pc, #248]	; (8002ed8 <setRotation+0x290>)
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	f249 4281 	movw	r2, #38017	; 0x9481
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d104      	bne.n	8002df2 <setRotation+0x1aa>
 8002de8:	7afb      	ldrb	r3, [r7, #11]
 8002dea:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1511) {
 8002df2:	4b39      	ldr	r3, [pc, #228]	; (8002ed8 <setRotation+0x290>)
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	f241 5211 	movw	r2, #5393	; 0x1511
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d160      	bne.n	8002ec0 <setRotation+0x278>
               val &= ~0x10;   //remove ML
 8002dfe:	7afb      	ldrb	r3, [r7, #11]
 8002e00:	f023 0310 	bic.w	r3, r3, #16
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	72fb      	strb	r3, [r7, #11]
               val |= 0xC0;    //force penguin 180 rotation
 8002e08:	7afb      	ldrb	r3, [r7, #11]
 8002e0a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	72fb      	strb	r3, [r7, #11]
           }
//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
           goto common_MC;
 8002e12:	e055      	b.n	8002ec0 <setRotation+0x278>
      }
       else if (is8347) {
 8002e14:	4b31      	ldr	r3, [pc, #196]	; (8002edc <setRotation+0x294>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d06f      	beq.n	8002efc <setRotation+0x2b4>
           _MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 8002e1c:	4b30      	ldr	r3, [pc, #192]	; (8002ee0 <setRotation+0x298>)
 8002e1e:	2202      	movs	r2, #2
 8002e20:	801a      	strh	r2, [r3, #0]
 8002e22:	4b30      	ldr	r3, [pc, #192]	; (8002ee4 <setRotation+0x29c>)
 8002e24:	2206      	movs	r2, #6
 8002e26:	801a      	strh	r2, [r3, #0]
 8002e28:	4b2f      	ldr	r3, [pc, #188]	; (8002ee8 <setRotation+0x2a0>)
 8002e2a:	2222      	movs	r2, #34	; 0x22
 8002e2c:	801a      	strh	r2, [r3, #0]
 8002e2e:	4b2f      	ldr	r3, [pc, #188]	; (8002eec <setRotation+0x2a4>)
 8002e30:	2202      	movs	r2, #2
 8002e32:	801a      	strh	r2, [r3, #0]
 8002e34:	4b2e      	ldr	r3, [pc, #184]	; (8002ef0 <setRotation+0x2a8>)
 8002e36:	2204      	movs	r2, #4
 8002e38:	801a      	strh	r2, [r3, #0]
 8002e3a:	4b2e      	ldr	r3, [pc, #184]	; (8002ef4 <setRotation+0x2ac>)
 8002e3c:	2206      	movs	r2, #6
 8002e3e:	801a      	strh	r2, [r3, #0]
 8002e40:	4b2d      	ldr	r3, [pc, #180]	; (8002ef8 <setRotation+0x2b0>)
 8002e42:	2208      	movs	r2, #8
 8002e44:	801a      	strh	r2, [r3, #0]
           if (_lcd_ID == 0x0065) {             //HX8352-B
 8002e46:	4b24      	ldr	r3, [pc, #144]	; (8002ed8 <setRotation+0x290>)
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	2b65      	cmp	r3, #101	; 0x65
 8002e4c:	d121      	bne.n	8002e92 <setRotation+0x24a>
               val |= 0x01;    //GS=1
 8002e4e:	7afb      	ldrb	r3, [r7, #11]
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 8002e58:	7afb      	ldrb	r3, [r7, #11]
 8002e5a:	f003 0310 	and.w	r3, r3, #16
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d005      	beq.n	8002e6e <setRotation+0x226>
 8002e62:	7afb      	ldrb	r3, [r7, #11]
 8002e64:	f083 032c 	eor.w	r3, r3, #44	; 0x2c
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	72fb      	strb	r3, [r7, #11]
               if (r & 1) _MC = 0x82, _MP = 0x80;
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d006      	beq.n	8002e86 <setRotation+0x23e>
 8002e78:	4b19      	ldr	r3, [pc, #100]	; (8002ee0 <setRotation+0x298>)
 8002e7a:	2282      	movs	r2, #130	; 0x82
 8002e7c:	801a      	strh	r2, [r3, #0]
 8002e7e:	4b19      	ldr	r3, [pc, #100]	; (8002ee4 <setRotation+0x29c>)
 8002e80:	2280      	movs	r2, #128	; 0x80
 8002e82:	801a      	strh	r2, [r3, #0]
 8002e84:	e005      	b.n	8002e92 <setRotation+0x24a>
               else _MC = 0x80, _MP = 0x82;
 8002e86:	4b16      	ldr	r3, [pc, #88]	; (8002ee0 <setRotation+0x298>)
 8002e88:	2280      	movs	r2, #128	; 0x80
 8002e8a:	801a      	strh	r2, [r3, #0]
 8002e8c:	4b15      	ldr	r3, [pc, #84]	; (8002ee4 <setRotation+0x29c>)
 8002e8e:	2282      	movs	r2, #130	; 0x82
 8002e90:	801a      	strh	r2, [r3, #0]
           }
           if (_lcd_ID == 0x5252) {             //HX8352-A
 8002e92:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <setRotation+0x290>)
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	f245 2252 	movw	r2, #21074	; 0x5252
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d145      	bne.n	8002f2a <setRotation+0x2e2>
               val |= 0x02;   //VERT_SCROLLON
 8002e9e:	7afb      	ldrb	r3, [r7, #11]
 8002ea0:	f043 0302 	orr.w	r3, r3, #2
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 8002ea8:	7afb      	ldrb	r3, [r7, #11]
 8002eaa:	f003 0310 	and.w	r3, r3, #16
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d03b      	beq.n	8002f2a <setRotation+0x2e2>
 8002eb2:	7afb      	ldrb	r3, [r7, #11]
 8002eb4:	f083 032b 	eor.w	r3, r3, #43	; 0x2b
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	72fb      	strb	r3, [r7, #11]
           }
			goto common_BGR;
 8002ebe:	e034      	b.n	8002f2a <setRotation+0x2e2>
           goto common_MC;
 8002ec0:	bf00      	nop
 8002ec2:	e01c      	b.n	8002efe <setRotation+0x2b6>
 8002ec4:	20000118 	.word	0x20000118
 8002ec8:	20000110 	.word	0x20000110
 8002ecc:	20000004 	.word	0x20000004
 8002ed0:	20000006 	.word	0x20000006
 8002ed4:	20000114 	.word	0x20000114
 8002ed8:	20000116 	.word	0x20000116
 8002edc:	2000010d 	.word	0x2000010d
 8002ee0:	2000011c 	.word	0x2000011c
 8002ee4:	2000011e 	.word	0x2000011e
 8002ee8:	20000120 	.word	0x20000120
 8002eec:	20000122 	.word	0x20000122
 8002ef0:	20000124 	.word	0x20000124
 8002ef4:	20000126 	.word	0x20000126
 8002ef8:	20000128 	.word	0x20000128
       }
     common_MC:
 8002efc:	bf00      	nop
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 8002efe:	4b8a      	ldr	r3, [pc, #552]	; (8003128 <setRotation+0x4e0>)
 8002f00:	222a      	movs	r2, #42	; 0x2a
 8002f02:	801a      	strh	r2, [r3, #0]
 8002f04:	4b89      	ldr	r3, [pc, #548]	; (800312c <setRotation+0x4e4>)
 8002f06:	222b      	movs	r2, #43	; 0x2b
 8002f08:	801a      	strh	r2, [r3, #0]
 8002f0a:	4b89      	ldr	r3, [pc, #548]	; (8003130 <setRotation+0x4e8>)
 8002f0c:	222c      	movs	r2, #44	; 0x2c
 8002f0e:	801a      	strh	r2, [r3, #0]
 8002f10:	4b88      	ldr	r3, [pc, #544]	; (8003134 <setRotation+0x4ec>)
 8002f12:	222a      	movs	r2, #42	; 0x2a
 8002f14:	801a      	strh	r2, [r3, #0]
 8002f16:	4b88      	ldr	r3, [pc, #544]	; (8003138 <setRotation+0x4f0>)
 8002f18:	222a      	movs	r2, #42	; 0x2a
 8002f1a:	801a      	strh	r2, [r3, #0]
 8002f1c:	4b87      	ldr	r3, [pc, #540]	; (800313c <setRotation+0x4f4>)
 8002f1e:	222b      	movs	r2, #43	; 0x2b
 8002f20:	801a      	strh	r2, [r3, #0]
 8002f22:	4b87      	ldr	r3, [pc, #540]	; (8003140 <setRotation+0x4f8>)
 8002f24:	222b      	movs	r2, #43	; 0x2b
 8002f26:	801a      	strh	r2, [r3, #0]
 8002f28:	e000      	b.n	8002f2c <setRotation+0x2e4>
			goto common_BGR;
 8002f2a:	bf00      	nop
     common_BGR:
       WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 8002f2c:	4b85      	ldr	r3, [pc, #532]	; (8003144 <setRotation+0x4fc>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <setRotation+0x2f0>
 8002f34:	2316      	movs	r3, #22
 8002f36:	e000      	b.n	8002f3a <setRotation+0x2f2>
 8002f38:	2336      	movs	r3, #54	; 0x36
 8002f3a:	f107 020b 	add.w	r2, r7, #11
 8002f3e:	2101      	movs	r1, #1
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fe f8f5 	bl	8001130 <WriteCmdParamN>
       _lcd_madctl = val;
 8002f46:	7afb      	ldrb	r3, [r7, #11]
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	4b7f      	ldr	r3, [pc, #508]	; (8003148 <setRotation+0x500>)
 8002f4c:	801a      	strh	r2, [r3, #0]
 8002f4e:	e0a5      	b.n	800309c <setRotation+0x454>
//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
   }
   // cope with 9320 variants
   else {
       switch (_lcd_ID) {
 8002f50:	4b7e      	ldr	r3, [pc, #504]	; (800314c <setRotation+0x504>)
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	f24b 5209 	movw	r2, #46345	; 0xb509
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d013      	beq.n	8002f84 <setRotation+0x33c>
 8002f5c:	f24b 5209 	movw	r2, #46345	; 0xb509
 8002f60:	4293      	cmp	r3, r2
 8002f62:	dc4f      	bgt.n	8003004 <setRotation+0x3bc>
 8002f64:	f249 3226 	movw	r2, #37670	; 0x9326
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d00b      	beq.n	8002f84 <setRotation+0x33c>
 8002f6c:	f249 3226 	movw	r2, #37670	; 0x9326
 8002f70:	4293      	cmp	r3, r2
 8002f72:	dc47      	bgt.n	8003004 <setRotation+0x3bc>
 8002f74:	f245 4220 	movw	r2, #21536	; 0x5420
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d003      	beq.n	8002f84 <setRotation+0x33c>
 8002f7c:	f247 7293 	movw	r2, #30611	; 0x7793
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d13f      	bne.n	8003004 <setRotation+0x3bc>
#endif
       case 0x5420:
       case 0x7793:
       case 0x9326:
		case 0xB509:
           _MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 8002f84:	4b68      	ldr	r3, [pc, #416]	; (8003128 <setRotation+0x4e0>)
 8002f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f8a:	801a      	strh	r2, [r3, #0]
 8002f8c:	4b67      	ldr	r3, [pc, #412]	; (800312c <setRotation+0x4e4>)
 8002f8e:	f240 2201 	movw	r2, #513	; 0x201
 8002f92:	801a      	strh	r2, [r3, #0]
 8002f94:	4b66      	ldr	r3, [pc, #408]	; (8003130 <setRotation+0x4e8>)
 8002f96:	f240 2202 	movw	r2, #514	; 0x202
 8002f9a:	801a      	strh	r2, [r3, #0]
 8002f9c:	4b65      	ldr	r3, [pc, #404]	; (8003134 <setRotation+0x4ec>)
 8002f9e:	f44f 7204 	mov.w	r2, #528	; 0x210
 8002fa2:	801a      	strh	r2, [r3, #0]
 8002fa4:	4b64      	ldr	r3, [pc, #400]	; (8003138 <setRotation+0x4f0>)
 8002fa6:	f240 2211 	movw	r2, #529	; 0x211
 8002faa:	801a      	strh	r2, [r3, #0]
 8002fac:	4b63      	ldr	r3, [pc, #396]	; (800313c <setRotation+0x4f4>)
 8002fae:	f240 2212 	movw	r2, #530	; 0x212
 8002fb2:	801a      	strh	r2, [r3, #0]
 8002fb4:	4b62      	ldr	r3, [pc, #392]	; (8003140 <setRotation+0x4f8>)
 8002fb6:	f240 2213 	movw	r2, #531	; 0x213
 8002fba:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8002fbc:	7afb      	ldrb	r3, [r7, #11]
 8002fbe:	b25b      	sxtb	r3, r3
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002fc6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002fca:	823b      	strh	r3, [r7, #16]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 8002fcc:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8002fd0:	82bb      	strh	r3, [r7, #20]
           if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 8002fd2:	4b5e      	ldr	r3, [pc, #376]	; (800314c <setRotation+0x504>)
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	f249 3226 	movw	r2, #37670	; 0x9326
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d005      	beq.n	8002fea <setRotation+0x3a2>
 8002fde:	4b5b      	ldr	r3, [pc, #364]	; (800314c <setRotation+0x504>)
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	f245 4220 	movw	r2, #21536	; 0x5420
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d102      	bne.n	8002ff0 <setRotation+0x3a8>
 8002fea:	8abb      	ldrh	r3, [r7, #20]
 8002fec:	085b      	lsrs	r3, r3, #1
 8002fee:	82bb      	strh	r3, [r7, #20]
           WriteCmdData(0x400, GS | NL);
 8002ff0:	8a3a      	ldrh	r2, [r7, #16]
 8002ff2:	8abb      	ldrh	r3, [r7, #20]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002ffe:	f7fd fecc 	bl	8000d9a <WriteCmdData>
           goto common_SS;
 8003002:	e024      	b.n	800304e <setRotation+0x406>
       default:
           _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 8003004:	4b48      	ldr	r3, [pc, #288]	; (8003128 <setRotation+0x4e0>)
 8003006:	2220      	movs	r2, #32
 8003008:	801a      	strh	r2, [r3, #0]
 800300a:	4b48      	ldr	r3, [pc, #288]	; (800312c <setRotation+0x4e4>)
 800300c:	2221      	movs	r2, #33	; 0x21
 800300e:	801a      	strh	r2, [r3, #0]
 8003010:	4b47      	ldr	r3, [pc, #284]	; (8003130 <setRotation+0x4e8>)
 8003012:	2222      	movs	r2, #34	; 0x22
 8003014:	801a      	strh	r2, [r3, #0]
 8003016:	4b47      	ldr	r3, [pc, #284]	; (8003134 <setRotation+0x4ec>)
 8003018:	2250      	movs	r2, #80	; 0x50
 800301a:	801a      	strh	r2, [r3, #0]
 800301c:	4b46      	ldr	r3, [pc, #280]	; (8003138 <setRotation+0x4f0>)
 800301e:	2251      	movs	r2, #81	; 0x51
 8003020:	801a      	strh	r2, [r3, #0]
 8003022:	4b46      	ldr	r3, [pc, #280]	; (800313c <setRotation+0x4f4>)
 8003024:	2252      	movs	r2, #82	; 0x52
 8003026:	801a      	strh	r2, [r3, #0]
 8003028:	4b45      	ldr	r3, [pc, #276]	; (8003140 <setRotation+0x4f8>)
 800302a:	2253      	movs	r2, #83	; 0x53
 800302c:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 800302e:	7afb      	ldrb	r3, [r7, #11]
 8003030:	b25b      	sxtb	r3, r3
 8003032:	b29b      	uxth	r3, r3
 8003034:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003038:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800303c:	823b      	strh	r3, [r7, #16]
           WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 800303e:	8a3b      	ldrh	r3, [r7, #16]
 8003040:	f443 531c 	orr.w	r3, r3, #9984	; 0x2700
 8003044:	b29b      	uxth	r3, r3
 8003046:	4619      	mov	r1, r3
 8003048:	2060      	movs	r0, #96	; 0x60
 800304a:	f7fd fea6 	bl	8000d9a <WriteCmdData>
         common_SS:
           SS_v = (val & 0x40) ? (1 << 8) : 0;
 800304e:	7afb      	ldrb	r3, [r7, #11]
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	b29b      	uxth	r3, r3
 8003054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003058:	81fb      	strh	r3, [r7, #14]
           WriteCmdData(0x01, SS_v);     // set Driver Output Control
 800305a:	89fb      	ldrh	r3, [r7, #14]
 800305c:	4619      	mov	r1, r3
 800305e:	2001      	movs	r0, #1
 8003060:	f7fd fe9b 	bl	8000d9a <WriteCmdData>
         common_ORG:
           ORG = (val & 0x20) ? (1 << 3) : 0;
 8003064:	7afb      	ldrb	r3, [r7, #11]
 8003066:	109b      	asrs	r3, r3, #2
 8003068:	b29b      	uxth	r3, r3
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	82fb      	strh	r3, [r7, #22]
               if (rotation == 1 || rotation == 2) {
                   val ^= 0x08;        // change BGR bit for LANDSCAPE and PORTRAIT_REV
               }
           }
#endif
           if (val & 0x08)
 8003070:	7afb      	ldrb	r3, [r7, #11]
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <setRotation+0x43a>
               ORG |= 0x1000;  //BGR
 800307a:	8afb      	ldrh	r3, [r7, #22]
 800307c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003080:	82fb      	strh	r3, [r7, #22]
           _lcd_madctl = ORG | 0x0030;
 8003082:	8afb      	ldrh	r3, [r7, #22]
 8003084:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003088:	b29a      	uxth	r2, r3
 800308a:	4b2f      	ldr	r3, [pc, #188]	; (8003148 <setRotation+0x500>)
 800308c:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 800308e:	4b2e      	ldr	r3, [pc, #184]	; (8003148 <setRotation+0x500>)
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	4619      	mov	r1, r3
 8003094:	2003      	movs	r0, #3
 8003096:	f7fd fe80 	bl	8000d9a <WriteCmdData>
           break;
 800309a:	bf00      	nop
           WriteCmdData(0x11, ORG | 0x6070);   // DFM=3, EN=0, TY=1
           break;
#endif
		}
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 800309c:	4b2c      	ldr	r3, [pc, #176]	; (8003150 <setRotation+0x508>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d023      	beq.n	80030f0 <setRotation+0x4a8>
 80030a8:	4b2a      	ldr	r3, [pc, #168]	; (8003154 <setRotation+0x50c>)
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d11d      	bne.n	80030f0 <setRotation+0x4a8>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 80030b4:	4b1c      	ldr	r3, [pc, #112]	; (8003128 <setRotation+0x4e0>)
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	81bb      	strh	r3, [r7, #12]
 80030ba:	4b1c      	ldr	r3, [pc, #112]	; (800312c <setRotation+0x4e4>)
 80030bc:	881a      	ldrh	r2, [r3, #0]
 80030be:	4b1a      	ldr	r3, [pc, #104]	; (8003128 <setRotation+0x4e0>)
 80030c0:	801a      	strh	r2, [r3, #0]
 80030c2:	4a1a      	ldr	r2, [pc, #104]	; (800312c <setRotation+0x4e4>)
 80030c4:	89bb      	ldrh	r3, [r7, #12]
 80030c6:	8013      	strh	r3, [r2, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 80030c8:	4b1a      	ldr	r3, [pc, #104]	; (8003134 <setRotation+0x4ec>)
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	81bb      	strh	r3, [r7, #12]
 80030ce:	4b1b      	ldr	r3, [pc, #108]	; (800313c <setRotation+0x4f4>)
 80030d0:	881a      	ldrh	r2, [r3, #0]
 80030d2:	4b18      	ldr	r3, [pc, #96]	; (8003134 <setRotation+0x4ec>)
 80030d4:	801a      	strh	r2, [r3, #0]
 80030d6:	4a19      	ldr	r2, [pc, #100]	; (800313c <setRotation+0x4f4>)
 80030d8:	89bb      	ldrh	r3, [r7, #12]
 80030da:	8013      	strh	r3, [r2, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 80030dc:	4b16      	ldr	r3, [pc, #88]	; (8003138 <setRotation+0x4f0>)
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	81bb      	strh	r3, [r7, #12]
 80030e2:	4b17      	ldr	r3, [pc, #92]	; (8003140 <setRotation+0x4f8>)
 80030e4:	881a      	ldrh	r2, [r3, #0]
 80030e6:	4b14      	ldr	r3, [pc, #80]	; (8003138 <setRotation+0x4f0>)
 80030e8:	801a      	strh	r2, [r3, #0]
 80030ea:	4a15      	ldr	r2, [pc, #84]	; (8003140 <setRotation+0x4f8>)
 80030ec:	89bb      	ldrh	r3, [r7, #12]
 80030ee:	8013      	strh	r3, [r2, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 80030f0:	f7fd fd8c 	bl	8000c0c <width>
 80030f4:	4603      	mov	r3, r0
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	b21c      	sxth	r4, r3
 80030fc:	f7fd fd92 	bl	8000c24 <height>
 8003100:	4603      	mov	r3, r0
 8003102:	3b01      	subs	r3, #1
 8003104:	b29b      	uxth	r3, r3
 8003106:	b21b      	sxth	r3, r3
 8003108:	4622      	mov	r2, r4
 800310a:	2100      	movs	r1, #0
 800310c:	2000      	movs	r0, #0
 800310e:	f000 f8d9 	bl	80032c4 <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 8003112:	2200      	movs	r2, #0
 8003114:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003118:	2000      	movs	r0, #0
 800311a:	f000 f9f7 	bl	800350c <vertScroll>
}
 800311e:	bf00      	nop
 8003120:	371c      	adds	r7, #28
 8003122:	46bd      	mov	sp, r7
 8003124:	bd90      	pop	{r4, r7, pc}
 8003126:	bf00      	nop
 8003128:	2000011c 	.word	0x2000011c
 800312c:	2000011e 	.word	0x2000011e
 8003130:	20000120 	.word	0x20000120
 8003134:	20000122 	.word	0x20000122
 8003138:	20000124 	.word	0x20000124
 800313c:	20000126 	.word	0x20000126
 8003140:	20000128 	.word	0x20000128
 8003144:	2000010d 	.word	0x2000010d
 8003148:	2000011a 	.word	0x2000011a
 800314c:	20000116 	.word	0x20000116
 8003150:	20000110 	.word	0x20000110
 8003154:	20000114 	.word	0x20000114

08003158 <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8003158:	b590      	push	{r4, r7, lr}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	80fb      	strh	r3, [r7, #6]
 8003162:	460b      	mov	r3, r1
 8003164:	80bb      	strh	r3, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	807b      	strh	r3, [r7, #2]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 800316a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800316e:	2b00      	cmp	r3, #0
 8003170:	f2c0 8098 	blt.w	80032a4 <drawPixel+0x14c>
 8003174:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	f2c0 8093 	blt.w	80032a4 <drawPixel+0x14c>
 800317e:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8003182:	f7fd fd43 	bl	8000c0c <width>
 8003186:	4603      	mov	r3, r0
 8003188:	429c      	cmp	r4, r3
 800318a:	f280 808b 	bge.w	80032a4 <drawPixel+0x14c>
 800318e:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003192:	f7fd fd47 	bl	8000c24 <height>
 8003196:	4603      	mov	r3, r0
 8003198:	429c      	cmp	r4, r3
 800319a:	f280 8083 	bge.w	80032a4 <drawPixel+0x14c>
       return;
#if defined(SUPPORT_9488_555)
   if (is555) color = color565_to_555(color);
 800319e:	4b43      	ldr	r3, [pc, #268]	; (80032ac <drawPixel+0x154>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d005      	beq.n	80031b2 <drawPixel+0x5a>
 80031a6:	887b      	ldrh	r3, [r7, #2]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fd fd47 	bl	8000c3c <color565_to_555>
 80031ae:	4603      	mov	r3, r0
 80031b0:	807b      	strh	r3, [r7, #2]
#endif
   setAddrWindow(x, y, x, y);
 80031b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80031b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80031ba:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80031be:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80031c2:	f000 f87f 	bl	80032c4 <setAddrWindow>
//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
   if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 80031c6:	4b3a      	ldr	r3, [pc, #232]	; (80032b0 <drawPixel+0x158>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d062      	beq.n	8003294 <drawPixel+0x13c>
 80031ce:	2108      	movs	r1, #8
 80031d0:	4838      	ldr	r0, [pc, #224]	; (80032b4 <drawPixel+0x15c>)
 80031d2:	f7fd fccd 	bl	8000b70 <PIN_LOW>
 80031d6:	2104      	movs	r1, #4
 80031d8:	4836      	ldr	r0, [pc, #216]	; (80032b4 <drawPixel+0x15c>)
 80031da:	f7fd fcc9 	bl	8000b70 <PIN_LOW>
 80031de:	4b36      	ldr	r3, [pc, #216]	; (80032b8 <drawPixel+0x160>)
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	0a1b      	lsrs	r3, r3, #8
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	73fb      	strb	r3, [r7, #15]
 80031e8:	4b33      	ldr	r3, [pc, #204]	; (80032b8 <drawPixel+0x160>)
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	73bb      	strb	r3, [r7, #14]
 80031ee:	4b31      	ldr	r3, [pc, #196]	; (80032b4 <drawPixel+0x15c>)
 80031f0:	4a32      	ldr	r2, [pc, #200]	; (80032bc <drawPixel+0x164>)
 80031f2:	619a      	str	r2, [r3, #24]
 80031f4:	4b32      	ldr	r3, [pc, #200]	; (80032c0 <drawPixel+0x168>)
 80031f6:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 80031fa:	619a      	str	r2, [r3, #24]
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	035b      	lsls	r3, r3, #13
 8003200:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8003204:	7bfb      	ldrb	r3, [r7, #15]
 8003206:	109b      	asrs	r3, r3, #2
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	431a      	orrs	r2, r3
 800320e:	4b29      	ldr	r3, [pc, #164]	; (80032b4 <drawPixel+0x15c>)
 8003210:	619a      	str	r2, [r3, #24]
 8003212:	7bfb      	ldrb	r3, [r7, #15]
 8003214:	4a2a      	ldr	r2, [pc, #168]	; (80032c0 <drawPixel+0x168>)
 8003216:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 800321a:	6193      	str	r3, [r2, #24]
 800321c:	2102      	movs	r1, #2
 800321e:	4825      	ldr	r0, [pc, #148]	; (80032b4 <drawPixel+0x15c>)
 8003220:	f7fd fca6 	bl	8000b70 <PIN_LOW>
 8003224:	2102      	movs	r1, #2
 8003226:	4823      	ldr	r0, [pc, #140]	; (80032b4 <drawPixel+0x15c>)
 8003228:	f7fd fcb2 	bl	8000b90 <PIN_HIGH>
 800322c:	2102      	movs	r1, #2
 800322e:	4821      	ldr	r0, [pc, #132]	; (80032b4 <drawPixel+0x15c>)
 8003230:	f7fd fcae 	bl	8000b90 <PIN_HIGH>
 8003234:	4b1f      	ldr	r3, [pc, #124]	; (80032b4 <drawPixel+0x15c>)
 8003236:	4a21      	ldr	r2, [pc, #132]	; (80032bc <drawPixel+0x164>)
 8003238:	619a      	str	r2, [r3, #24]
 800323a:	4b21      	ldr	r3, [pc, #132]	; (80032c0 <drawPixel+0x168>)
 800323c:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8003240:	619a      	str	r2, [r3, #24]
 8003242:	7bbb      	ldrb	r3, [r7, #14]
 8003244:	035b      	lsls	r3, r3, #13
 8003246:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 800324a:	7bbb      	ldrb	r3, [r7, #14]
 800324c:	109b      	asrs	r3, r3, #2
 800324e:	f003 0320 	and.w	r3, r3, #32
 8003252:	431a      	orrs	r2, r3
 8003254:	4b17      	ldr	r3, [pc, #92]	; (80032b4 <drawPixel+0x15c>)
 8003256:	619a      	str	r2, [r3, #24]
 8003258:	7bbb      	ldrb	r3, [r7, #14]
 800325a:	4a19      	ldr	r2, [pc, #100]	; (80032c0 <drawPixel+0x168>)
 800325c:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8003260:	6193      	str	r3, [r2, #24]
 8003262:	2102      	movs	r1, #2
 8003264:	4813      	ldr	r0, [pc, #76]	; (80032b4 <drawPixel+0x15c>)
 8003266:	f7fd fc83 	bl	8000b70 <PIN_LOW>
 800326a:	2102      	movs	r1, #2
 800326c:	4811      	ldr	r0, [pc, #68]	; (80032b4 <drawPixel+0x15c>)
 800326e:	f7fd fc8f 	bl	8000b90 <PIN_HIGH>
 8003272:	2102      	movs	r1, #2
 8003274:	480f      	ldr	r0, [pc, #60]	; (80032b4 <drawPixel+0x15c>)
 8003276:	f7fd fc8b 	bl	8000b90 <PIN_HIGH>
 800327a:	2104      	movs	r1, #4
 800327c:	480d      	ldr	r0, [pc, #52]	; (80032b4 <drawPixel+0x15c>)
 800327e:	f7fd fc87 	bl	8000b90 <PIN_HIGH>
 8003282:	887b      	ldrh	r3, [r7, #2]
 8003284:	4618      	mov	r0, r3
 8003286:	f7fd fe0f 	bl	8000ea8 <write24>
 800328a:	2108      	movs	r1, #8
 800328c:	4809      	ldr	r0, [pc, #36]	; (80032b4 <drawPixel+0x15c>)
 800328e:	f7fd fc7f 	bl	8000b90 <PIN_HIGH>
 8003292:	e008      	b.n	80032a6 <drawPixel+0x14e>
   WriteCmdData(_MW, color);
 8003294:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <drawPixel+0x160>)
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	887a      	ldrh	r2, [r7, #2]
 800329a:	4611      	mov	r1, r2
 800329c:	4618      	mov	r0, r3
 800329e:	f7fd fd7c 	bl	8000d9a <WriteCmdData>
 80032a2:	e000      	b.n	80032a6 <drawPixel+0x14e>
       return;
 80032a4:	bf00      	nop
}
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd90      	pop	{r4, r7, pc}
 80032ac:	2000010e 	.word	0x2000010e
 80032b0:	2000010f 	.word	0x2000010f
 80032b4:	40020000 	.word	0x40020000
 80032b8:	20000120 	.word	0x20000120
 80032bc:	80200000 	.word	0x80200000
 80032c0:	40020400 	.word	0x40020400

080032c4 <setAddrWindow>:

void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 80032c4:	b590      	push	{r4, r7, lr}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	4604      	mov	r4, r0
 80032cc:	4608      	mov	r0, r1
 80032ce:	4611      	mov	r1, r2
 80032d0:	461a      	mov	r2, r3
 80032d2:	4623      	mov	r3, r4
 80032d4:	80fb      	strh	r3, [r7, #6]
 80032d6:	4603      	mov	r3, r0
 80032d8:	80bb      	strh	r3, [r7, #4]
 80032da:	460b      	mov	r3, r1
 80032dc:	807b      	strh	r3, [r7, #2]
 80032de:	4613      	mov	r3, r2
 80032e0:	803b      	strh	r3, [r7, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 80032e2:	4b80      	ldr	r3, [pc, #512]	; (80034e4 <setAddrWindow+0x220>)
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	f249 3227 	movw	r2, #37671	; 0x9327
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d117      	bne.n	800331e <setAddrWindow+0x5a>
	    if (rotation == 2) y += OFFSET_9327, y1 += OFFSET_9327;
 80032ee:	4b7e      	ldr	r3, [pc, #504]	; (80034e8 <setAddrWindow+0x224>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d107      	bne.n	8003306 <setAddrWindow+0x42>
 80032f6:	88bb      	ldrh	r3, [r7, #4]
 80032f8:	3320      	adds	r3, #32
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	80bb      	strh	r3, [r7, #4]
 80032fe:	883b      	ldrh	r3, [r7, #0]
 8003300:	3320      	adds	r3, #32
 8003302:	b29b      	uxth	r3, r3
 8003304:	803b      	strh	r3, [r7, #0]
	    if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;
 8003306:	4b78      	ldr	r3, [pc, #480]	; (80034e8 <setAddrWindow+0x224>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b03      	cmp	r3, #3
 800330c:	d107      	bne.n	800331e <setAddrWindow+0x5a>
 800330e:	88fb      	ldrh	r3, [r7, #6]
 8003310:	3320      	adds	r3, #32
 8003312:	b29b      	uxth	r3, r3
 8003314:	80fb      	strh	r3, [r7, #6]
 8003316:	887b      	ldrh	r3, [r7, #2]
 8003318:	3320      	adds	r3, #32
 800331a:	b29b      	uxth	r3, r3
 800331c:	807b      	strh	r3, [r7, #2]
   }
#endif
#if 1
   if (_lcd_ID == 0x1526 && (rotation & 1)) {
 800331e:	4b71      	ldr	r3, [pc, #452]	; (80034e4 <setAddrWindow+0x220>)
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	f241 5226 	movw	r2, #5414	; 0x1526
 8003326:	4293      	cmp	r3, r2
 8003328:	d128      	bne.n	800337c <setAddrWindow+0xb8>
 800332a:	4b6f      	ldr	r3, [pc, #444]	; (80034e8 <setAddrWindow+0x224>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d022      	beq.n	800337c <setAddrWindow+0xb8>
		int16_t dx = x1 - x, dy = y1 - y;
 8003336:	887a      	ldrh	r2, [r7, #2]
 8003338:	88fb      	ldrh	r3, [r7, #6]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	b29b      	uxth	r3, r3
 800333e:	81fb      	strh	r3, [r7, #14]
 8003340:	883a      	ldrh	r2, [r7, #0]
 8003342:	88bb      	ldrh	r3, [r7, #4]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	b29b      	uxth	r3, r3
 8003348:	81bb      	strh	r3, [r7, #12]
		if (dy == 0) { y1++; }
 800334a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d106      	bne.n	8003360 <setAddrWindow+0x9c>
 8003352:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003356:	b29b      	uxth	r3, r3
 8003358:	3301      	adds	r3, #1
 800335a:	b29b      	uxth	r3, r3
 800335c:	803b      	strh	r3, [r7, #0]
 800335e:	e00d      	b.n	800337c <setAddrWindow+0xb8>
		else if (dx == 0) { x1 += dy; y1 -= dy; }
 8003360:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d109      	bne.n	800337c <setAddrWindow+0xb8>
 8003368:	887a      	ldrh	r2, [r7, #2]
 800336a:	89bb      	ldrh	r3, [r7, #12]
 800336c:	4413      	add	r3, r2
 800336e:	b29b      	uxth	r3, r3
 8003370:	807b      	strh	r3, [r7, #2]
 8003372:	883a      	ldrh	r2, [r7, #0]
 8003374:	89bb      	ldrh	r3, [r7, #12]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	b29b      	uxth	r3, r3
 800337a:	803b      	strh	r3, [r7, #0]
   }
#endif
   if (_lcd_capable & MIPI_DCS_REV1) {
 800337c:	4b5b      	ldr	r3, [pc, #364]	; (80034ec <setAddrWindow+0x228>)
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d054      	beq.n	8003432 <setAddrWindow+0x16e>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 8003388:	4b59      	ldr	r3, [pc, #356]	; (80034f0 <setAddrWindow+0x22c>)
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	b2d8      	uxtb	r0, r3
 800338e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003392:	121b      	asrs	r3, r3, #8
 8003394:	b21b      	sxth	r3, r3
 8003396:	b2d9      	uxtb	r1, r3
 8003398:	88fb      	ldrh	r3, [r7, #6]
 800339a:	b2da      	uxtb	r2, r3
 800339c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80033a0:	121b      	asrs	r3, r3, #8
 80033a2:	b21b      	sxth	r3, r3
 80033a4:	b2dc      	uxtb	r4, r3
 80033a6:	887b      	ldrh	r3, [r7, #2]
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	4623      	mov	r3, r4
 80033ae:	f7fd ffc1 	bl	8001334 <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 80033b2:	4b50      	ldr	r3, [pc, #320]	; (80034f4 <setAddrWindow+0x230>)
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	b2d8      	uxtb	r0, r3
 80033b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80033bc:	121b      	asrs	r3, r3, #8
 80033be:	b21b      	sxth	r3, r3
 80033c0:	b2d9      	uxtb	r1, r3
 80033c2:	88bb      	ldrh	r3, [r7, #4]
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80033ca:	121b      	asrs	r3, r3, #8
 80033cc:	b21b      	sxth	r3, r3
 80033ce:	b2dc      	uxtb	r4, r3
 80033d0:	883b      	ldrh	r3, [r7, #0]
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	4623      	mov	r3, r4
 80033d8:	f7fd ffac 	bl	8001334 <WriteCmdParam4>
       if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 80033dc:	4b46      	ldr	r3, [pc, #280]	; (80034f8 <setAddrWindow+0x234>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d07b      	beq.n	80034dc <setAddrWindow+0x218>
 80033e4:	4b3f      	ldr	r3, [pc, #252]	; (80034e4 <setAddrWindow+0x220>)
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	2b65      	cmp	r3, #101	; 0x65
 80033ea:	d177      	bne.n	80034dc <setAddrWindow+0x218>
           uint8_t d[2];
           d[0] = x >> 8; d[1] = x;
 80033ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033f0:	121b      	asrs	r3, r3, #8
 80033f2:	b21b      	sxth	r3, r3
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	723b      	strb	r3, [r7, #8]
 80033f8:	88fb      	ldrh	r3, [r7, #6]
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 80033fe:	4b3f      	ldr	r3, [pc, #252]	; (80034fc <setAddrWindow+0x238>)
 8003400:	881b      	ldrh	r3, [r3, #0]
 8003402:	f107 0208 	add.w	r2, r7, #8
 8003406:	2102      	movs	r1, #2
 8003408:	4618      	mov	r0, r3
 800340a:	f7fd fe91 	bl	8001130 <WriteCmdParamN>
           d[0] = y >> 8; d[1] = y;
 800340e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003412:	121b      	asrs	r3, r3, #8
 8003414:	b21b      	sxth	r3, r3
 8003416:	b2db      	uxtb	r3, r3
 8003418:	723b      	strb	r3, [r7, #8]
 800341a:	88bb      	ldrh	r3, [r7, #4]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MP, 2, d);
 8003420:	4b37      	ldr	r3, [pc, #220]	; (8003500 <setAddrWindow+0x23c>)
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	f107 0208 	add.w	r2, r7, #8
 8003428:	2102      	movs	r1, #2
 800342a:	4618      	mov	r0, r3
 800342c:	f7fd fe80 	bl	8001130 <WriteCmdParamN>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 8003430:	e054      	b.n	80034dc <setAddrWindow+0x218>
       WriteCmdData(_MC, x);
 8003432:	4b32      	ldr	r3, [pc, #200]	; (80034fc <setAddrWindow+0x238>)
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	88fa      	ldrh	r2, [r7, #6]
 8003438:	4611      	mov	r1, r2
 800343a:	4618      	mov	r0, r3
 800343c:	f7fd fcad 	bl	8000d9a <WriteCmdData>
       WriteCmdData(_MP, y);
 8003440:	4b2f      	ldr	r3, [pc, #188]	; (8003500 <setAddrWindow+0x23c>)
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	88ba      	ldrh	r2, [r7, #4]
 8003446:	4611      	mov	r1, r2
 8003448:	4618      	mov	r0, r3
 800344a:	f7fd fca6 	bl	8000d9a <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 800344e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003452:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003456:	429a      	cmp	r2, r3
 8003458:	d105      	bne.n	8003466 <setAddrWindow+0x1a2>
 800345a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800345e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003462:	429a      	cmp	r2, r3
 8003464:	d03a      	beq.n	80034dc <setAddrWindow+0x218>
           if (_lcd_capable & XSA_XEA_16BIT) {
 8003466:	4b21      	ldr	r3, [pc, #132]	; (80034ec <setAddrWindow+0x228>)
 8003468:	881b      	ldrh	r3, [r3, #0]
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b00      	cmp	r3, #0
 8003470:	d018      	beq.n	80034a4 <setAddrWindow+0x1e0>
               if (rotation & 1)
 8003472:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <setAddrWindow+0x224>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <setAddrWindow+0x1ce>
                   y1 = y = (y1 << 8) | y;
 800347e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003482:	021b      	lsls	r3, r3, #8
 8003484:	b21a      	sxth	r2, r3
 8003486:	88bb      	ldrh	r3, [r7, #4]
 8003488:	4313      	orrs	r3, r2
 800348a:	80bb      	strh	r3, [r7, #4]
 800348c:	88bb      	ldrh	r3, [r7, #4]
 800348e:	803b      	strh	r3, [r7, #0]
 8003490:	e008      	b.n	80034a4 <setAddrWindow+0x1e0>
                   x1 = x = (x1 << 8) | x;
 8003492:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003496:	021b      	lsls	r3, r3, #8
 8003498:	b21a      	sxth	r2, r3
 800349a:	88fb      	ldrh	r3, [r7, #6]
 800349c:	4313      	orrs	r3, r2
 800349e:	80fb      	strh	r3, [r7, #6]
 80034a0:	88fb      	ldrh	r3, [r7, #6]
 80034a2:	807b      	strh	r3, [r7, #2]
           WriteCmdData(_SC, x);
 80034a4:	4b12      	ldr	r3, [pc, #72]	; (80034f0 <setAddrWindow+0x22c>)
 80034a6:	881b      	ldrh	r3, [r3, #0]
 80034a8:	88fa      	ldrh	r2, [r7, #6]
 80034aa:	4611      	mov	r1, r2
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7fd fc74 	bl	8000d9a <WriteCmdData>
           WriteCmdData(_SP, y);
 80034b2:	4b10      	ldr	r3, [pc, #64]	; (80034f4 <setAddrWindow+0x230>)
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	88ba      	ldrh	r2, [r7, #4]
 80034b8:	4611      	mov	r1, r2
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fd fc6d 	bl	8000d9a <WriteCmdData>
           WriteCmdData(_EC, x1);
 80034c0:	4b10      	ldr	r3, [pc, #64]	; (8003504 <setAddrWindow+0x240>)
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	887a      	ldrh	r2, [r7, #2]
 80034c6:	4611      	mov	r1, r2
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fd fc66 	bl	8000d9a <WriteCmdData>
           WriteCmdData(_EP, y1);
 80034ce:	4b0e      	ldr	r3, [pc, #56]	; (8003508 <setAddrWindow+0x244>)
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	883a      	ldrh	r2, [r7, #0]
 80034d4:	4611      	mov	r1, r2
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fd fc5f 	bl	8000d9a <WriteCmdData>
}
 80034dc:	bf00      	nop
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd90      	pop	{r4, r7, pc}
 80034e4:	20000116 	.word	0x20000116
 80034e8:	20000110 	.word	0x20000110
 80034ec:	20000114 	.word	0x20000114
 80034f0:	20000122 	.word	0x20000122
 80034f4:	20000126 	.word	0x20000126
 80034f8:	2000010d 	.word	0x2000010d
 80034fc:	2000011c 	.word	0x2000011c
 8003500:	2000011e 	.word	0x2000011e
 8003504:	20000124 	.word	0x20000124
 8003508:	20000128 	.word	0x20000128

0800350c <vertScroll>:

void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	80fb      	strh	r3, [r7, #6]
 8003516:	460b      	mov	r3, r1
 8003518:	80bb      	strh	r3, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	807b      	strh	r3, [r7, #2]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 800351e:	4b89      	ldr	r3, [pc, #548]	; (8003744 <vertScroll+0x238>)
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	f249 3227 	movw	r2, #37671	; 0x9327
 8003526:	4293      	cmp	r3, r2
 8003528:	d10b      	bne.n	8003542 <vertScroll+0x36>
	    if (rotation == 2 || rotation == 3) top += OFFSET_9327;
 800352a:	4b87      	ldr	r3, [pc, #540]	; (8003748 <vertScroll+0x23c>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d003      	beq.n	800353a <vertScroll+0x2e>
 8003532:	4b85      	ldr	r3, [pc, #532]	; (8003748 <vertScroll+0x23c>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b03      	cmp	r3, #3
 8003538:	d103      	bne.n	8003542 <vertScroll+0x36>
 800353a:	88fb      	ldrh	r3, [r7, #6]
 800353c:	3320      	adds	r3, #32
 800353e:	b29b      	uxth	r3, r3
 8003540:	80fb      	strh	r3, [r7, #6]
    }
#endif
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 8003542:	88fa      	ldrh	r2, [r7, #6]
 8003544:	88bb      	ldrh	r3, [r7, #4]
 8003546:	4413      	add	r3, r2
 8003548:	b29b      	uxth	r3, r3
 800354a:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800354e:	b29b      	uxth	r3, r3
 8003550:	82fb      	strh	r3, [r7, #22]
    int16_t vsp;
    int16_t sea = top;
 8003552:	88fb      	ldrh	r3, [r7, #6]
 8003554:	827b      	strh	r3, [r7, #18]
	if (_lcd_ID == 0x9327) bfa += 32;
 8003556:	4b7b      	ldr	r3, [pc, #492]	; (8003744 <vertScroll+0x238>)
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	f249 3227 	movw	r2, #37671	; 0x9327
 800355e:	4293      	cmp	r3, r2
 8003560:	d103      	bne.n	800356a <vertScroll+0x5e>
 8003562:	8afb      	ldrh	r3, [r7, #22]
 8003564:	3320      	adds	r3, #32
 8003566:	b29b      	uxth	r3, r3
 8003568:	82fb      	strh	r3, [r7, #22]
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 800356a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800356e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003572:	425b      	negs	r3, r3
 8003574:	429a      	cmp	r2, r3
 8003576:	dd05      	ble.n	8003584 <vertScroll+0x78>
 8003578:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800357c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003580:	429a      	cmp	r2, r3
 8003582:	db01      	blt.n	8003588 <vertScroll+0x7c>
 8003584:	2300      	movs	r3, #0
 8003586:	807b      	strh	r3, [r7, #2]
	vsp = top + offset; // vertical start position
 8003588:	88fa      	ldrh	r2, [r7, #6]
 800358a:	887b      	ldrh	r3, [r7, #2]
 800358c:	4413      	add	r3, r2
 800358e:	b29b      	uxth	r3, r3
 8003590:	82bb      	strh	r3, [r7, #20]
    if (offset < 0)
 8003592:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003596:	2b00      	cmp	r3, #0
 8003598:	da04      	bge.n	80035a4 <vertScroll+0x98>
        vsp += scrollines;          //keep in unsigned range
 800359a:	8aba      	ldrh	r2, [r7, #20]
 800359c:	88bb      	ldrh	r3, [r7, #4]
 800359e:	4413      	add	r3, r2
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	82bb      	strh	r3, [r7, #20]
    sea = top + scrollines - 1;
 80035a4:	88fa      	ldrh	r2, [r7, #6]
 80035a6:	88bb      	ldrh	r3, [r7, #4]
 80035a8:	4413      	add	r3, r2
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	827b      	strh	r3, [r7, #18]
    if (_lcd_capable & MIPI_DCS_REV1) {
 80035b2:	4b66      	ldr	r3, [pc, #408]	; (800374c <vertScroll+0x240>)
 80035b4:	881b      	ldrh	r3, [r3, #0]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d071      	beq.n	80036a2 <vertScroll+0x196>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 80035be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035c2:	121b      	asrs	r3, r3, #8
 80035c4:	b21b      	sxth	r3, r3
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	733b      	strb	r3, [r7, #12]
        d[1] = top;
 80035ca:	88fb      	ldrh	r3, [r7, #6]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	737b      	strb	r3, [r7, #13]
        d[2] = scrollines >> 8; //VSA
 80035d0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80035d4:	121b      	asrs	r3, r3, #8
 80035d6:	b21b      	sxth	r3, r3
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	73bb      	strb	r3, [r7, #14]
        d[3] = scrollines;
 80035dc:	88bb      	ldrh	r3, [r7, #4]
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	73fb      	strb	r3, [r7, #15]
        d[4] = bfa >> 8;        //BFA
 80035e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80035e6:	121b      	asrs	r3, r3, #8
 80035e8:	b21b      	sxth	r3, r3
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	743b      	strb	r3, [r7, #16]
        d[5] = bfa;
 80035ee:	8afb      	ldrh	r3, [r7, #22]
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	747b      	strb	r3, [r7, #17]
        WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 80035f4:	4b56      	ldr	r3, [pc, #344]	; (8003750 <vertScroll+0x244>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <vertScroll+0xf4>
 80035fc:	230e      	movs	r3, #14
 80035fe:	e000      	b.n	8003602 <vertScroll+0xf6>
 8003600:	2333      	movs	r3, #51	; 0x33
 8003602:	f107 020c 	add.w	r2, r7, #12
 8003606:	2106      	movs	r1, #6
 8003608:	4618      	mov	r0, r3
 800360a:	f7fd fd91 	bl	8001130 <WriteCmdParamN>
//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 800360e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003612:	121b      	asrs	r3, r3, #8
 8003614:	b21b      	sxth	r3, r3
 8003616:	b2db      	uxtb	r3, r3
 8003618:	733b      	strb	r3, [r7, #12]
        d[1] = vsp;
 800361a:	8abb      	ldrh	r3, [r7, #20]
 800361c:	b2db      	uxtb	r3, r3
 800361e:	737b      	strb	r3, [r7, #13]
        WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 8003620:	4b4b      	ldr	r3, [pc, #300]	; (8003750 <vertScroll+0x244>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <vertScroll+0x120>
 8003628:	2314      	movs	r3, #20
 800362a:	e000      	b.n	800362e <vertScroll+0x122>
 800362c:	2337      	movs	r3, #55	; 0x37
 800362e:	f107 020c 	add.w	r2, r7, #12
 8003632:	2102      	movs	r1, #2
 8003634:	4618      	mov	r0, r3
 8003636:	f7fd fd7b 	bl	8001130 <WriteCmdParamN>
		if (is8347) {
 800363a:	4b45      	ldr	r3, [pc, #276]	; (8003750 <vertScroll+0x244>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d01f      	beq.n	8003682 <vertScroll+0x176>
		    d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 8003642:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d009      	beq.n	800365e <vertScroll+0x152>
 800364a:	4b3e      	ldr	r3, [pc, #248]	; (8003744 <vertScroll+0x238>)
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	f248 3247 	movw	r2, #33607	; 0x8347
 8003652:	4293      	cmp	r3, r2
 8003654:	d101      	bne.n	800365a <vertScroll+0x14e>
 8003656:	2302      	movs	r3, #2
 8003658:	e002      	b.n	8003660 <vertScroll+0x154>
 800365a:	2308      	movs	r3, #8
 800365c:	e000      	b.n	8003660 <vertScroll+0x154>
 800365e:	2300      	movs	r3, #0
 8003660:	733b      	strb	r3, [r7, #12]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 8003662:	4b38      	ldr	r3, [pc, #224]	; (8003744 <vertScroll+0x238>)
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	f248 3247 	movw	r2, #33607	; 0x8347
 800366a:	4293      	cmp	r3, r2
 800366c:	d101      	bne.n	8003672 <vertScroll+0x166>
 800366e:	2318      	movs	r3, #24
 8003670:	e000      	b.n	8003674 <vertScroll+0x168>
 8003672:	2301      	movs	r3, #1
 8003674:	f107 020c 	add.w	r2, r7, #12
 8003678:	2101      	movs	r1, #1
 800367a:	4618      	mov	r0, r3
 800367c:	f7fd fd58 	bl	8001130 <WriteCmdParamN>
 8003680:	e05d      	b.n	800373e <vertScroll+0x232>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 8003682:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d159      	bne.n	800373e <vertScroll+0x232>
 800368a:	4b30      	ldr	r3, [pc, #192]	; (800374c <vertScroll+0x240>)
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d053      	beq.n	800373e <vertScroll+0x232>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 8003696:	2200      	movs	r2, #0
 8003698:	2100      	movs	r1, #0
 800369a:	2013      	movs	r0, #19
 800369c:	f7fd fd48 	bl	8001130 <WriteCmdParamN>
 80036a0:	e04d      	b.n	800373e <vertScroll+0x232>
		}
		return;
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 80036a2:	4b28      	ldr	r3, [pc, #160]	; (8003744 <vertScroll+0x238>)
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	f24b 5209 	movw	r2, #46345	; 0xb509
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d027      	beq.n	80036fe <vertScroll+0x1f2>
 80036ae:	f24b 5209 	movw	r2, #46345	; 0xb509
 80036b2:	4293      	cmp	r3, r2
 80036b4:	dc34      	bgt.n	8003720 <vertScroll+0x214>
 80036b6:	f249 3226 	movw	r2, #37670	; 0x9326
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d01f      	beq.n	80036fe <vertScroll+0x1f2>
 80036be:	f249 3226 	movw	r2, #37670	; 0x9326
 80036c2:	4293      	cmp	r3, r2
 80036c4:	dc2c      	bgt.n	8003720 <vertScroll+0x214>
 80036c6:	f247 7293 	movw	r2, #30611	; 0x7793
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d017      	beq.n	80036fe <vertScroll+0x1f2>
 80036ce:	f247 7293 	movw	r2, #30611	; 0x7793
 80036d2:	4293      	cmp	r3, r2
 80036d4:	dc24      	bgt.n	8003720 <vertScroll+0x214>
 80036d6:	f245 4220 	movw	r2, #21536	; 0x5420
 80036da:	4293      	cmp	r3, r2
 80036dc:	d00f      	beq.n	80036fe <vertScroll+0x1f2>
 80036de:	f247 7283 	movw	r2, #30595	; 0x7783
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d11c      	bne.n	8003720 <vertScroll+0x214>
    case 0x7783:
        WriteCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 80036e6:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <vertScroll+0x248>)
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	4619      	mov	r1, r3
 80036ec:	2061      	movs	r0, #97	; 0x61
 80036ee:	f7fd fb54 	bl	8000d9a <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 80036f2:	8abb      	ldrh	r3, [r7, #20]
 80036f4:	4619      	mov	r1, r3
 80036f6:	206a      	movs	r0, #106	; 0x6a
 80036f8:	f7fd fb4f 	bl	8000d9a <WriteCmdData>
        break;
 80036fc:	e01f      	b.n	800373e <vertScroll+0x232>
#endif
	case 0x5420:
    case 0x7793:
	case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 80036fe:	4b15      	ldr	r3, [pc, #84]	; (8003754 <vertScroll+0x248>)
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	f043 0302 	orr.w	r3, r3, #2
 8003706:	b29b      	uxth	r3, r3
 8003708:	4619      	mov	r1, r3
 800370a:	f240 4001 	movw	r0, #1025	; 0x401
 800370e:	f7fd fb44 	bl	8000d9a <WriteCmdData>
        WriteCmdData(0x404, vsp);       //VL#
 8003712:	8abb      	ldrh	r3, [r7, #20]
 8003714:	4619      	mov	r1, r3
 8003716:	f240 4004 	movw	r0, #1028	; 0x404
 800371a:	f7fd fb3e 	bl	8000d9a <WriteCmdData>
        break;
 800371e:	e00e      	b.n	800373e <vertScroll+0x232>
    default:
        // 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
        WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 8003720:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <vertScroll+0x248>)
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	f043 0302 	orr.w	r3, r3, #2
 8003728:	b29b      	uxth	r3, r3
 800372a:	4619      	mov	r1, r3
 800372c:	2061      	movs	r0, #97	; 0x61
 800372e:	f7fd fb34 	bl	8000d9a <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8003732:	8abb      	ldrh	r3, [r7, #20]
 8003734:	4619      	mov	r1, r3
 8003736:	206a      	movs	r0, #106	; 0x6a
 8003738:	f7fd fb2f 	bl	8000d9a <WriteCmdData>
        break;
 800373c:	bf00      	nop
    }
}
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20000116 	.word	0x20000116
 8003748:	20000110 	.word	0x20000110
 800374c:	20000114 	.word	0x20000114
 8003750:	2000010d 	.word	0x2000010d
 8003754:	20000118 	.word	0x20000118

08003758 <fillScreen>:
{
    pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}

void fillScreen(uint16_t color)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af02      	add	r7, sp, #8
 800375e:	4603      	mov	r3, r0
 8003760:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8003762:	4b08      	ldr	r3, [pc, #32]	; (8003784 <fillScreen+0x2c>)
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	b21a      	sxth	r2, r3
 8003768:	4b07      	ldr	r3, [pc, #28]	; (8003788 <fillScreen+0x30>)
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	b219      	sxth	r1, r3
 800376e:	88fb      	ldrh	r3, [r7, #6]
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	460b      	mov	r3, r1
 8003774:	2100      	movs	r1, #0
 8003776:	2000      	movs	r0, #0
 8003778:	f000 f8c4 	bl	8003904 <fillRect>
}
 800377c:	bf00      	nop
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	20000004 	.word	0x20000004
 8003788:	20000006 	.word	0x20000006

0800378c <invertDisplay>:

void invertDisplay(uint8_t i)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 8003796:	4b4c      	ldr	r3, [pc, #304]	; (80038c8 <invertDisplay+0x13c>)
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	bf14      	ite	ne
 80037a2:	2301      	movne	r3, #1
 80037a4:	2300      	moveq	r3, #0
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	b21a      	sxth	r2, r3
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	b21b      	sxth	r3, r3
 80037ae:	4053      	eors	r3, r2
 80037b0:	b21b      	sxth	r3, r3
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	4b45      	ldr	r3, [pc, #276]	; (80038cc <invertDisplay+0x140>)
 80037b6:	801a      	strh	r2, [r3, #0]
    if (_lcd_capable & MIPI_DCS_REV1) {
 80037b8:	4b43      	ldr	r3, [pc, #268]	; (80038c8 <invertDisplay+0x13c>)
 80037ba:	881b      	ldrh	r3, [r3, #0]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d035      	beq.n	8003830 <invertDisplay+0xa4>
        if (is8347) {
 80037c4:	4b42      	ldr	r3, [pc, #264]	; (80038d0 <invertDisplay+0x144>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d024      	beq.n	8003816 <invertDisplay+0x8a>
            // HX8347D: 0x36 Panel Characteristic. REV_Panel
            // HX8347A: 0x36 is Display Control 10
            if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 80037cc:	4b41      	ldr	r3, [pc, #260]	; (80038d4 <invertDisplay+0x148>)
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	f248 3247 	movw	r2, #33607	; 0x8347
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d005      	beq.n	80037e4 <invertDisplay+0x58>
 80037d8:	4b3e      	ldr	r3, [pc, #248]	; (80038d4 <invertDisplay+0x148>)
 80037da:	881b      	ldrh	r3, [r3, #0]
 80037dc:	f245 2252 	movw	r2, #21074	; 0x5252
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d108      	bne.n	80037f6 <invertDisplay+0x6a>
			    val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 80037e4:	4b39      	ldr	r3, [pc, #228]	; (80038cc <invertDisplay+0x140>)
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <invertDisplay+0x64>
 80037ec:	2306      	movs	r3, #6
 80037ee:	e000      	b.n	80037f2 <invertDisplay+0x66>
 80037f0:	2302      	movs	r3, #2
 80037f2:	73fb      	strb	r3, [r7, #15]
 80037f4:	e007      	b.n	8003806 <invertDisplay+0x7a>
            else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 80037f6:	4b35      	ldr	r3, [pc, #212]	; (80038cc <invertDisplay+0x140>)
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <invertDisplay+0x76>
 80037fe:	2308      	movs	r3, #8
 8003800:	e000      	b.n	8003804 <invertDisplay+0x78>
 8003802:	230a      	movs	r3, #10
 8003804:	73fb      	strb	r3, [r7, #15]
            // HX8347: 0x01 Display Mode has diff bit mapping for A, D
            WriteCmdParamN(0x01, 1, &val);
 8003806:	f107 030f 	add.w	r3, r7, #15
 800380a:	461a      	mov	r2, r3
 800380c:	2101      	movs	r1, #1
 800380e:	2001      	movs	r0, #1
 8003810:	f7fd fc8e 	bl	8001130 <WriteCmdParamN>
        } else
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
        return;
 8003814:	e055      	b.n	80038c2 <invertDisplay+0x136>
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 8003816:	4b2d      	ldr	r3, [pc, #180]	; (80038cc <invertDisplay+0x140>)
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <invertDisplay+0x96>
 800381e:	2321      	movs	r3, #33	; 0x21
 8003820:	e000      	b.n	8003824 <invertDisplay+0x98>
 8003822:	2320      	movs	r3, #32
 8003824:	2200      	movs	r2, #0
 8003826:	2100      	movs	r1, #0
 8003828:	4618      	mov	r0, r3
 800382a:	f7fd fc81 	bl	8001130 <WriteCmdParamN>
 800382e:	e048      	b.n	80038c2 <invertDisplay+0x136>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8003830:	4b28      	ldr	r3, [pc, #160]	; (80038d4 <invertDisplay+0x148>)
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003838:	4293      	cmp	r3, r2
 800383a:	d030      	beq.n	800389e <invertDisplay+0x112>
 800383c:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003840:	4293      	cmp	r3, r2
 8003842:	dc37      	bgt.n	80038b4 <invertDisplay+0x128>
 8003844:	f249 3226 	movw	r2, #37670	; 0x9326
 8003848:	4293      	cmp	r3, r2
 800384a:	d028      	beq.n	800389e <invertDisplay+0x112>
 800384c:	f249 3226 	movw	r2, #37670	; 0x9326
 8003850:	4293      	cmp	r3, r2
 8003852:	dc2f      	bgt.n	80038b4 <invertDisplay+0x128>
 8003854:	f249 2225 	movw	r2, #37413	; 0x9225
 8003858:	4293      	cmp	r3, r2
 800385a:	d013      	beq.n	8003884 <invertDisplay+0xf8>
 800385c:	f249 2225 	movw	r2, #37413	; 0x9225
 8003860:	4293      	cmp	r3, r2
 8003862:	dc27      	bgt.n	80038b4 <invertDisplay+0x128>
 8003864:	f247 7293 	movw	r2, #30611	; 0x7793
 8003868:	4293      	cmp	r3, r2
 800386a:	d018      	beq.n	800389e <invertDisplay+0x112>
 800386c:	f247 7293 	movw	r2, #30611	; 0x7793
 8003870:	4293      	cmp	r3, r2
 8003872:	dc1f      	bgt.n	80038b4 <invertDisplay+0x128>
 8003874:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003878:	d004      	beq.n	8003884 <invertDisplay+0xf8>
 800387a:	f245 4220 	movw	r2, #21536	; 0x5420
 800387e:	4293      	cmp	r3, r2
 8003880:	d00d      	beq.n	800389e <invertDisplay+0x112>
 8003882:	e017      	b.n	80038b4 <invertDisplay+0x128>
#ifdef SUPPORT_0139
    case 0x0139:
#endif
    case 0x9225:                                        //REV is in reg(0x07) like Samsung
    case 0x0154:
        WriteCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 8003884:	4b11      	ldr	r3, [pc, #68]	; (80038cc <invertDisplay+0x140>)
 8003886:	881b      	ldrh	r3, [r3, #0]
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	b21b      	sxth	r3, r3
 800388c:	f043 0313 	orr.w	r3, r3, #19
 8003890:	b21b      	sxth	r3, r3
 8003892:	b29b      	uxth	r3, r3
 8003894:	4619      	mov	r1, r3
 8003896:	2007      	movs	r0, #7
 8003898:	f7fd fa7f 	bl	8000d9a <WriteCmdData>
        break;
 800389c:	e011      	b.n	80038c2 <invertDisplay+0x136>
#endif
	case 0x5420:
    case 0x7793:
    case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 800389e:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <invertDisplay+0x140>)
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	f043 0302 	orr.w	r3, r3, #2
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	4619      	mov	r1, r3
 80038aa:	f240 4001 	movw	r0, #1025	; 0x401
 80038ae:	f7fd fa74 	bl	8000d9a <WriteCmdData>
        break;
 80038b2:	e006      	b.n	80038c2 <invertDisplay+0x136>
    default:
        WriteCmdData(0x61, _lcd_rev);
 80038b4:	4b05      	ldr	r3, [pc, #20]	; (80038cc <invertDisplay+0x140>)
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	4619      	mov	r1, r3
 80038ba:	2061      	movs	r0, #97	; 0x61
 80038bc:	f7fd fa6d 	bl	8000d9a <WriteCmdData>
        break;
 80038c0:	bf00      	nop
    }
}
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	20000114 	.word	0x20000114
 80038cc:	20000118 	.word	0x20000118
 80038d0:	2000010d 	.word	0x2000010d
 80038d4:	20000116 	.word	0x20000116

080038d8 <writePixel>:
{
	fillRect(x, y, w, 1, color);
}

void writePixel(int16_t x, int16_t y, uint16_t color)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	80fb      	strh	r3, [r7, #6]
 80038e2:	460b      	mov	r3, r1
 80038e4:	80bb      	strh	r3, [r7, #4]
 80038e6:	4613      	mov	r3, r2
 80038e8:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 80038ea:	887a      	ldrh	r2, [r7, #2]
 80038ec:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80038f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff fc2f 	bl	8003158 <drawPixel>
}
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <fillRect>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8003904:	b590      	push	{r4, r7, lr}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	4604      	mov	r4, r0
 800390c:	4608      	mov	r0, r1
 800390e:	4611      	mov	r1, r2
 8003910:	461a      	mov	r2, r3
 8003912:	4623      	mov	r3, r4
 8003914:	80fb      	strh	r3, [r7, #6]
 8003916:	4603      	mov	r3, r0
 8003918:	80bb      	strh	r3, [r7, #4]
 800391a:	460b      	mov	r3, r1
 800391c:	807b      	strh	r3, [r7, #2]
 800391e:	4613      	mov	r3, r2
 8003920:	803b      	strh	r3, [r7, #0]
    int16_t end;
#if defined(SUPPORT_9488_555)
    if (is555) color = color565_to_555(color);
 8003922:	4b6e      	ldr	r3, [pc, #440]	; (8003adc <fillRect+0x1d8>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d005      	beq.n	8003936 <fillRect+0x32>
 800392a:	8c3b      	ldrh	r3, [r7, #32]
 800392c:	4618      	mov	r0, r3
 800392e:	f7fd f985 	bl	8000c3c <color565_to_555>
 8003932:	4603      	mov	r3, r0
 8003934:	843b      	strh	r3, [r7, #32]
#endif
    if (w < 0) {
 8003936:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800393a:	2b00      	cmp	r3, #0
 800393c:	da08      	bge.n	8003950 <fillRect+0x4c>
        w = -w;
 800393e:	887b      	ldrh	r3, [r7, #2]
 8003940:	425b      	negs	r3, r3
 8003942:	b29b      	uxth	r3, r3
 8003944:	807b      	strh	r3, [r7, #2]
        x -= w;
 8003946:	88fa      	ldrh	r2, [r7, #6]
 8003948:	887b      	ldrh	r3, [r7, #2]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	b29b      	uxth	r3, r3
 800394e:	80fb      	strh	r3, [r7, #6]
    }                           //+ve w
    end = x + w;
 8003950:	88fa      	ldrh	r2, [r7, #6]
 8003952:	887b      	ldrh	r3, [r7, #2]
 8003954:	4413      	add	r3, r2
 8003956:	b29b      	uxth	r3, r3
 8003958:	81fb      	strh	r3, [r7, #14]
    if (x < 0)
 800395a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800395e:	2b00      	cmp	r3, #0
 8003960:	da01      	bge.n	8003966 <fillRect+0x62>
        x = 0;
 8003962:	2300      	movs	r3, #0
 8003964:	80fb      	strh	r3, [r7, #6]
    if (end > width())
 8003966:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 800396a:	f7fd f94f 	bl	8000c0c <width>
 800396e:	4603      	mov	r3, r0
 8003970:	429c      	cmp	r4, r3
 8003972:	dd03      	ble.n	800397c <fillRect+0x78>
        end = width();
 8003974:	f7fd f94a 	bl	8000c0c <width>
 8003978:	4603      	mov	r3, r0
 800397a:	81fb      	strh	r3, [r7, #14]
    w = end - x;
 800397c:	89fa      	ldrh	r2, [r7, #14]
 800397e:	88fb      	ldrh	r3, [r7, #6]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	b29b      	uxth	r3, r3
 8003984:	807b      	strh	r3, [r7, #2]
    if (h < 0) {
 8003986:	f9b7 3000 	ldrsh.w	r3, [r7]
 800398a:	2b00      	cmp	r3, #0
 800398c:	da08      	bge.n	80039a0 <fillRect+0x9c>
        h = -h;
 800398e:	883b      	ldrh	r3, [r7, #0]
 8003990:	425b      	negs	r3, r3
 8003992:	b29b      	uxth	r3, r3
 8003994:	803b      	strh	r3, [r7, #0]
        y -= h;
 8003996:	88ba      	ldrh	r2, [r7, #4]
 8003998:	883b      	ldrh	r3, [r7, #0]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	b29b      	uxth	r3, r3
 800399e:	80bb      	strh	r3, [r7, #4]
    }                           //+ve h
    end = y + h;
 80039a0:	88ba      	ldrh	r2, [r7, #4]
 80039a2:	883b      	ldrh	r3, [r7, #0]
 80039a4:	4413      	add	r3, r2
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	81fb      	strh	r3, [r7, #14]
    if (y < 0)
 80039aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	da01      	bge.n	80039b6 <fillRect+0xb2>
        y = 0;
 80039b2:	2300      	movs	r3, #0
 80039b4:	80bb      	strh	r3, [r7, #4]
    if (end > height())
 80039b6:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80039ba:	f7fd f933 	bl	8000c24 <height>
 80039be:	4603      	mov	r3, r0
 80039c0:	429c      	cmp	r4, r3
 80039c2:	dd03      	ble.n	80039cc <fillRect+0xc8>
        end = height();
 80039c4:	f7fd f92e 	bl	8000c24 <height>
 80039c8:	4603      	mov	r3, r0
 80039ca:	81fb      	strh	r3, [r7, #14]
    h = end - y;
 80039cc:	89fa      	ldrh	r2, [r7, #14]
 80039ce:	88bb      	ldrh	r3, [r7, #4]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	803b      	strh	r3, [r7, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 80039d6:	88fa      	ldrh	r2, [r7, #6]
 80039d8:	887b      	ldrh	r3, [r7, #2]
 80039da:	4413      	add	r3, r2
 80039dc:	b29b      	uxth	r3, r3
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	b21c      	sxth	r4, r3
 80039e4:	88ba      	ldrh	r2, [r7, #4]
 80039e6:	883b      	ldrh	r3, [r7, #0]
 80039e8:	4413      	add	r3, r2
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	b21b      	sxth	r3, r3
 80039f2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80039f6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80039fa:	4622      	mov	r2, r4
 80039fc:	f7ff fc62 	bl	80032c4 <setAddrWindow>
    CS_ACTIVE;
 8003a00:	2108      	movs	r1, #8
 8003a02:	4837      	ldr	r0, [pc, #220]	; (8003ae0 <fillRect+0x1dc>)
 8003a04:	f7fd f8b4 	bl	8000b70 <PIN_LOW>
    WriteCmd(_MW);
 8003a08:	2104      	movs	r1, #4
 8003a0a:	4835      	ldr	r0, [pc, #212]	; (8003ae0 <fillRect+0x1dc>)
 8003a0c:	f7fd f8b0 	bl	8000b70 <PIN_LOW>
 8003a10:	4b34      	ldr	r3, [pc, #208]	; (8003ae4 <fillRect+0x1e0>)
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	0a1b      	lsrs	r3, r3, #8
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	737b      	strb	r3, [r7, #13]
 8003a1a:	4b32      	ldr	r3, [pc, #200]	; (8003ae4 <fillRect+0x1e0>)
 8003a1c:	881b      	ldrh	r3, [r3, #0]
 8003a1e:	733b      	strb	r3, [r7, #12]
 8003a20:	4b2f      	ldr	r3, [pc, #188]	; (8003ae0 <fillRect+0x1dc>)
 8003a22:	4a31      	ldr	r2, [pc, #196]	; (8003ae8 <fillRect+0x1e4>)
 8003a24:	619a      	str	r2, [r3, #24]
 8003a26:	4b31      	ldr	r3, [pc, #196]	; (8003aec <fillRect+0x1e8>)
 8003a28:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8003a2c:	619a      	str	r2, [r3, #24]
 8003a2e:	7b7b      	ldrb	r3, [r7, #13]
 8003a30:	035b      	lsls	r3, r3, #13
 8003a32:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8003a36:	7b7b      	ldrb	r3, [r7, #13]
 8003a38:	109b      	asrs	r3, r3, #2
 8003a3a:	f003 0320 	and.w	r3, r3, #32
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	4b27      	ldr	r3, [pc, #156]	; (8003ae0 <fillRect+0x1dc>)
 8003a42:	619a      	str	r2, [r3, #24]
 8003a44:	7b7b      	ldrb	r3, [r7, #13]
 8003a46:	4a29      	ldr	r2, [pc, #164]	; (8003aec <fillRect+0x1e8>)
 8003a48:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8003a4c:	6193      	str	r3, [r2, #24]
 8003a4e:	2102      	movs	r1, #2
 8003a50:	4823      	ldr	r0, [pc, #140]	; (8003ae0 <fillRect+0x1dc>)
 8003a52:	f7fd f88d 	bl	8000b70 <PIN_LOW>
 8003a56:	2102      	movs	r1, #2
 8003a58:	4821      	ldr	r0, [pc, #132]	; (8003ae0 <fillRect+0x1dc>)
 8003a5a:	f7fd f899 	bl	8000b90 <PIN_HIGH>
 8003a5e:	2102      	movs	r1, #2
 8003a60:	481f      	ldr	r0, [pc, #124]	; (8003ae0 <fillRect+0x1dc>)
 8003a62:	f7fd f895 	bl	8000b90 <PIN_HIGH>
 8003a66:	4b1e      	ldr	r3, [pc, #120]	; (8003ae0 <fillRect+0x1dc>)
 8003a68:	4a1f      	ldr	r2, [pc, #124]	; (8003ae8 <fillRect+0x1e4>)
 8003a6a:	619a      	str	r2, [r3, #24]
 8003a6c:	4b1f      	ldr	r3, [pc, #124]	; (8003aec <fillRect+0x1e8>)
 8003a6e:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8003a72:	619a      	str	r2, [r3, #24]
 8003a74:	7b3b      	ldrb	r3, [r7, #12]
 8003a76:	035b      	lsls	r3, r3, #13
 8003a78:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8003a7c:	7b3b      	ldrb	r3, [r7, #12]
 8003a7e:	109b      	asrs	r3, r3, #2
 8003a80:	f003 0320 	and.w	r3, r3, #32
 8003a84:	431a      	orrs	r2, r3
 8003a86:	4b16      	ldr	r3, [pc, #88]	; (8003ae0 <fillRect+0x1dc>)
 8003a88:	619a      	str	r2, [r3, #24]
 8003a8a:	7b3b      	ldrb	r3, [r7, #12]
 8003a8c:	4a17      	ldr	r2, [pc, #92]	; (8003aec <fillRect+0x1e8>)
 8003a8e:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8003a92:	6193      	str	r3, [r2, #24]
 8003a94:	2102      	movs	r1, #2
 8003a96:	4812      	ldr	r0, [pc, #72]	; (8003ae0 <fillRect+0x1dc>)
 8003a98:	f7fd f86a 	bl	8000b70 <PIN_LOW>
 8003a9c:	2102      	movs	r1, #2
 8003a9e:	4810      	ldr	r0, [pc, #64]	; (8003ae0 <fillRect+0x1dc>)
 8003aa0:	f7fd f876 	bl	8000b90 <PIN_HIGH>
 8003aa4:	2102      	movs	r1, #2
 8003aa6:	480e      	ldr	r0, [pc, #56]	; (8003ae0 <fillRect+0x1dc>)
 8003aa8:	f7fd f872 	bl	8000b90 <PIN_HIGH>
 8003aac:	2104      	movs	r1, #4
 8003aae:	480c      	ldr	r0, [pc, #48]	; (8003ae0 <fillRect+0x1dc>)
 8003ab0:	f7fd f86e 	bl	8000b90 <PIN_HIGH>
    if (h > w) {
 8003ab4:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003ab8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	dd05      	ble.n	8003acc <fillRect+0x1c8>
        end = h;
 8003ac0:	883b      	ldrh	r3, [r7, #0]
 8003ac2:	81fb      	strh	r3, [r7, #14]
        h = w;
 8003ac4:	887b      	ldrh	r3, [r7, #2]
 8003ac6:	803b      	strh	r3, [r7, #0]
        w = end;
 8003ac8:	89fb      	ldrh	r3, [r7, #14]
 8003aca:	807b      	strh	r3, [r7, #2]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 8003acc:	8c3b      	ldrh	r3, [r7, #32]
 8003ace:	0a1b      	lsrs	r3, r3, #8
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	72fb      	strb	r3, [r7, #11]
 8003ad4:	8c3b      	ldrh	r3, [r7, #32]
 8003ad6:	72bb      	strb	r3, [r7, #10]
    while (h-- > 0) {
 8003ad8:	e05a      	b.n	8003b90 <fillRect+0x28c>
 8003ada:	bf00      	nop
 8003adc:	2000010e 	.word	0x2000010e
 8003ae0:	40020000 	.word	0x40020000
 8003ae4:	20000120 	.word	0x20000120
 8003ae8:	80200000 	.word	0x80200000
 8003aec:	40020400 	.word	0x40020400
        end = w;
 8003af0:	887b      	ldrh	r3, [r7, #2]
 8003af2:	81fb      	strh	r3, [r7, #14]
//                 write8(b);
//             } while (--end != 0);
//        } else
//#endif
        do {
            write8(hi);
 8003af4:	4b40      	ldr	r3, [pc, #256]	; (8003bf8 <fillRect+0x2f4>)
 8003af6:	4a41      	ldr	r2, [pc, #260]	; (8003bfc <fillRect+0x2f8>)
 8003af8:	619a      	str	r2, [r3, #24]
 8003afa:	4b41      	ldr	r3, [pc, #260]	; (8003c00 <fillRect+0x2fc>)
 8003afc:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8003b00:	619a      	str	r2, [r3, #24]
 8003b02:	7afb      	ldrb	r3, [r7, #11]
 8003b04:	035b      	lsls	r3, r3, #13
 8003b06:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8003b0a:	7afb      	ldrb	r3, [r7, #11]
 8003b0c:	109b      	asrs	r3, r3, #2
 8003b0e:	f003 0320 	and.w	r3, r3, #32
 8003b12:	431a      	orrs	r2, r3
 8003b14:	4b38      	ldr	r3, [pc, #224]	; (8003bf8 <fillRect+0x2f4>)
 8003b16:	619a      	str	r2, [r3, #24]
 8003b18:	7afb      	ldrb	r3, [r7, #11]
 8003b1a:	4a39      	ldr	r2, [pc, #228]	; (8003c00 <fillRect+0x2fc>)
 8003b1c:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8003b20:	6193      	str	r3, [r2, #24]
 8003b22:	2102      	movs	r1, #2
 8003b24:	4834      	ldr	r0, [pc, #208]	; (8003bf8 <fillRect+0x2f4>)
 8003b26:	f7fd f823 	bl	8000b70 <PIN_LOW>
 8003b2a:	2102      	movs	r1, #2
 8003b2c:	4832      	ldr	r0, [pc, #200]	; (8003bf8 <fillRect+0x2f4>)
 8003b2e:	f7fd f82f 	bl	8000b90 <PIN_HIGH>
 8003b32:	2102      	movs	r1, #2
 8003b34:	4830      	ldr	r0, [pc, #192]	; (8003bf8 <fillRect+0x2f4>)
 8003b36:	f7fd f82b 	bl	8000b90 <PIN_HIGH>
            write8(lo);
 8003b3a:	4b2f      	ldr	r3, [pc, #188]	; (8003bf8 <fillRect+0x2f4>)
 8003b3c:	4a2f      	ldr	r2, [pc, #188]	; (8003bfc <fillRect+0x2f8>)
 8003b3e:	619a      	str	r2, [r3, #24]
 8003b40:	4b2f      	ldr	r3, [pc, #188]	; (8003c00 <fillRect+0x2fc>)
 8003b42:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8003b46:	619a      	str	r2, [r3, #24]
 8003b48:	7abb      	ldrb	r3, [r7, #10]
 8003b4a:	035b      	lsls	r3, r3, #13
 8003b4c:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8003b50:	7abb      	ldrb	r3, [r7, #10]
 8003b52:	109b      	asrs	r3, r3, #2
 8003b54:	f003 0320 	and.w	r3, r3, #32
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	4b27      	ldr	r3, [pc, #156]	; (8003bf8 <fillRect+0x2f4>)
 8003b5c:	619a      	str	r2, [r3, #24]
 8003b5e:	7abb      	ldrb	r3, [r7, #10]
 8003b60:	4a27      	ldr	r2, [pc, #156]	; (8003c00 <fillRect+0x2fc>)
 8003b62:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8003b66:	6193      	str	r3, [r2, #24]
 8003b68:	2102      	movs	r1, #2
 8003b6a:	4823      	ldr	r0, [pc, #140]	; (8003bf8 <fillRect+0x2f4>)
 8003b6c:	f7fd f800 	bl	8000b70 <PIN_LOW>
 8003b70:	2102      	movs	r1, #2
 8003b72:	4821      	ldr	r0, [pc, #132]	; (8003bf8 <fillRect+0x2f4>)
 8003b74:	f7fd f80c 	bl	8000b90 <PIN_HIGH>
 8003b78:	2102      	movs	r1, #2
 8003b7a:	481f      	ldr	r0, [pc, #124]	; (8003bf8 <fillRect+0x2f4>)
 8003b7c:	f7fd f808 	bl	8000b90 <PIN_HIGH>
        } while (--end != 0);
 8003b80:	89fb      	ldrh	r3, [r7, #14]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	81fb      	strh	r3, [r7, #14]
 8003b88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1b1      	bne.n	8003af4 <fillRect+0x1f0>
    while (h-- > 0) {
 8003b90:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	3a01      	subs	r2, #1
 8003b98:	b292      	uxth	r2, r2
 8003b9a:	803a      	strh	r2, [r7, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	dca7      	bgt.n	8003af0 <fillRect+0x1ec>
#endif
    }
    CS_IDLE;
 8003ba0:	2108      	movs	r1, #8
 8003ba2:	4815      	ldr	r0, [pc, #84]	; (8003bf8 <fillRect+0x2f4>)
 8003ba4:	f7fc fff4 	bl	8000b90 <PIN_HIGH>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 8003ba8:	4b16      	ldr	r3, [pc, #88]	; (8003c04 <fillRect+0x300>)
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00b      	beq.n	8003bcc <fillRect+0x2c8>
 8003bb4:	4b14      	ldr	r3, [pc, #80]	; (8003c08 <fillRect+0x304>)
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	f241 5226 	movw	r2, #5414	; 0x1526
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d116      	bne.n	8003bee <fillRect+0x2ea>
 8003bc0:	4b12      	ldr	r3, [pc, #72]	; (8003c0c <fillRect+0x308>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d010      	beq.n	8003bee <fillRect+0x2ea>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 8003bcc:	f7fd f81e 	bl	8000c0c <width>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	b21c      	sxth	r4, r3
 8003bd8:	f7fd f824 	bl	8000c24 <height>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	b21b      	sxth	r3, r3
 8003be4:	4622      	mov	r2, r4
 8003be6:	2100      	movs	r1, #0
 8003be8:	2000      	movs	r0, #0
 8003bea:	f7ff fb6b 	bl	80032c4 <setAddrWindow>
}
 8003bee:	bf00      	nop
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd90      	pop	{r4, r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40020000 	.word	0x40020000
 8003bfc:	80200000 	.word	0x80200000
 8003c00:	40020400 	.word	0x40020400
 8003c04:	20000114 	.word	0x20000114
 8003c08:	20000116 	.word	0x20000116
 8003c0c:	20000110 	.word	0x20000110

08003c10 <drawRGBBitmap>:
            }
        }
    }
}

void drawRGBBitmap(int16_t x, int16_t y, uint16_t *bitmap, int16_t w, int16_t h) {
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60ba      	str	r2, [r7, #8]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	81fb      	strh	r3, [r7, #14]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	81bb      	strh	r3, [r7, #12]
 8003c22:	4613      	mov	r3, r2
 8003c24:	80fb      	strh	r3, [r7, #6]
  startWrite();
 8003c26:	f7fd f8dd 	bl	8000de4 <startWrite>
  for (int16_t j = 0; j < h; j++, y++) {
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	82fb      	strh	r3, [r7, #22]
 8003c2e:	e031      	b.n	8003c94 <drawRGBBitmap+0x84>
    for (int16_t i = 0; i < w; i++) {
 8003c30:	2300      	movs	r3, #0
 8003c32:	82bb      	strh	r3, [r7, #20]
 8003c34:	e01c      	b.n	8003c70 <drawRGBBitmap+0x60>
      writePixel(x + i, y, bitmap[j * w + i]);
 8003c36:	89fa      	ldrh	r2, [r7, #14]
 8003c38:	8abb      	ldrh	r3, [r7, #20]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	b218      	sxth	r0, r3
 8003c40:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003c44:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003c48:	fb03 f202 	mul.w	r2, r3, r2
 8003c4c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003c50:	4413      	add	r3, r2
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	4413      	add	r3, r2
 8003c58:	881a      	ldrh	r2, [r3, #0]
 8003c5a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003c5e:	4619      	mov	r1, r3
 8003c60:	f7ff fe3a 	bl	80038d8 <writePixel>
    for (int16_t i = 0; i < w; i++) {
 8003c64:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	82bb      	strh	r3, [r7, #20]
 8003c70:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003c74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	dbdc      	blt.n	8003c36 <drawRGBBitmap+0x26>
  for (int16_t j = 0; j < h; j++, y++) {
 8003c7c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	3301      	adds	r3, #1
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	82fb      	strh	r3, [r7, #22]
 8003c88:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3301      	adds	r3, #1
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	81bb      	strh	r3, [r7, #12]
 8003c94:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003c98:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	dbc7      	blt.n	8003c30 <drawRGBBitmap+0x20>
    }
  }
  endWrite();
 8003ca0:	f7fd f8a7 	bl	8000df2 <endWrite>
}
 8003ca4:	bf00      	nop
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ce4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003cb0:	480d      	ldr	r0, [pc, #52]	; (8003ce8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003cb2:	490e      	ldr	r1, [pc, #56]	; (8003cec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003cb4:	4a0e      	ldr	r2, [pc, #56]	; (8003cf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cb8:	e002      	b.n	8003cc0 <LoopCopyDataInit>

08003cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cbe:	3304      	adds	r3, #4

08003cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cc4:	d3f9      	bcc.n	8003cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cc6:	4a0b      	ldr	r2, [pc, #44]	; (8003cf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003cc8:	4c0b      	ldr	r4, [pc, #44]	; (8003cf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ccc:	e001      	b.n	8003cd2 <LoopFillZerobss>

08003cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cd0:	3204      	adds	r2, #4

08003cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cd4:	d3fb      	bcc.n	8003cce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003cd6:	f7fc ff21 	bl	8000b1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cda:	f001 ffd5 	bl	8005c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cde:	f7fc fbf9 	bl	80004d4 <main>
  bx  lr    
 8003ce2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ce4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8003cf0:	0802ba54 	.word	0x0802ba54
  ldr r2, =_sbss
 8003cf4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8003cf8:	20000130 	.word	0x20000130

08003cfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003cfc:	e7fe      	b.n	8003cfc <ADC_IRQHandler>
	...

08003d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d04:	4b0e      	ldr	r3, [pc, #56]	; (8003d40 <HAL_Init+0x40>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a0d      	ldr	r2, [pc, #52]	; (8003d40 <HAL_Init+0x40>)
 8003d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d10:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <HAL_Init+0x40>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a0a      	ldr	r2, [pc, #40]	; (8003d40 <HAL_Init+0x40>)
 8003d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d1c:	4b08      	ldr	r3, [pc, #32]	; (8003d40 <HAL_Init+0x40>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a07      	ldr	r2, [pc, #28]	; (8003d40 <HAL_Init+0x40>)
 8003d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d28:	2003      	movs	r0, #3
 8003d2a:	f000 fba3 	bl	8004474 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d2e:	200f      	movs	r0, #15
 8003d30:	f000 f808 	bl	8003d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d34:	f7fc fdd0 	bl	80008d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40023c00 	.word	0x40023c00

08003d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d4c:	4b12      	ldr	r3, [pc, #72]	; (8003d98 <HAL_InitTick+0x54>)
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	4b12      	ldr	r3, [pc, #72]	; (8003d9c <HAL_InitTick+0x58>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	4619      	mov	r1, r3
 8003d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fbad 	bl	80044c2 <HAL_SYSTICK_Config>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e00e      	b.n	8003d90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b0f      	cmp	r3, #15
 8003d76:	d80a      	bhi.n	8003d8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d78:	2200      	movs	r2, #0
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d80:	f000 fb83 	bl	800448a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d84:	4a06      	ldr	r2, [pc, #24]	; (8003da0 <HAL_InitTick+0x5c>)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	e000      	b.n	8003d90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	20000000 	.word	0x20000000
 8003d9c:	2000000c 	.word	0x2000000c
 8003da0:	20000008 	.word	0x20000008

08003da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003da8:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <HAL_IncTick+0x20>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	461a      	mov	r2, r3
 8003dae:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <HAL_IncTick+0x24>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4413      	add	r3, r2
 8003db4:	4a04      	ldr	r2, [pc, #16]	; (8003dc8 <HAL_IncTick+0x24>)
 8003db6:	6013      	str	r3, [r2, #0]
}
 8003db8:	bf00      	nop
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	2000000c 	.word	0x2000000c
 8003dc8:	2000012c 	.word	0x2000012c

08003dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  return uwTick;
 8003dd0:	4b03      	ldr	r3, [pc, #12]	; (8003de0 <HAL_GetTick+0x14>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	2000012c 	.word	0x2000012c

08003de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dec:	f7ff ffee 	bl	8003dcc <HAL_GetTick>
 8003df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfc:	d005      	beq.n	8003e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dfe:	4b0a      	ldr	r3, [pc, #40]	; (8003e28 <HAL_Delay+0x44>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4413      	add	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e0a:	bf00      	nop
 8003e0c:	f7ff ffde 	bl	8003dcc <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d8f7      	bhi.n	8003e0c <HAL_Delay+0x28>
  {
  }
}
 8003e1c:	bf00      	nop
 8003e1e:	bf00      	nop
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	2000000c 	.word	0x2000000c

08003e2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e34:	2300      	movs	r3, #0
 8003e36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e033      	b.n	8003eaa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d109      	bne.n	8003e5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7fc fd6c 	bl	8000928 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f003 0310 	and.w	r3, r3, #16
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d118      	bne.n	8003e9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e72:	f023 0302 	bic.w	r3, r3, #2
 8003e76:	f043 0202 	orr.w	r2, r3, #2
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f94a 	bl	8004118 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	f023 0303 	bic.w	r3, r3, #3
 8003e92:	f043 0201 	orr.w	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	641a      	str	r2, [r3, #64]	; 0x40
 8003e9a:	e001      	b.n	8003ea0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <HAL_ADC_ConfigChannel+0x1c>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e113      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x244>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b09      	cmp	r3, #9
 8003ede:	d925      	bls.n	8003f2c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68d9      	ldr	r1, [r3, #12]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	461a      	mov	r2, r3
 8003eee:	4613      	mov	r3, r2
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	4413      	add	r3, r2
 8003ef4:	3b1e      	subs	r3, #30
 8003ef6:	2207      	movs	r2, #7
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	43da      	mvns	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	400a      	ands	r2, r1
 8003f04:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68d9      	ldr	r1, [r3, #12]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	4618      	mov	r0, r3
 8003f18:	4603      	mov	r3, r0
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	4403      	add	r3, r0
 8003f1e:	3b1e      	subs	r3, #30
 8003f20:	409a      	lsls	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	60da      	str	r2, [r3, #12]
 8003f2a:	e022      	b.n	8003f72 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6919      	ldr	r1, [r3, #16]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	4413      	add	r3, r2
 8003f40:	2207      	movs	r2, #7
 8003f42:	fa02 f303 	lsl.w	r3, r2, r3
 8003f46:	43da      	mvns	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	400a      	ands	r2, r1
 8003f4e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6919      	ldr	r1, [r3, #16]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	4618      	mov	r0, r3
 8003f62:	4603      	mov	r3, r0
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	4403      	add	r3, r0
 8003f68:	409a      	lsls	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b06      	cmp	r3, #6
 8003f78:	d824      	bhi.n	8003fc4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	4613      	mov	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	3b05      	subs	r3, #5
 8003f8c:	221f      	movs	r2, #31
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	43da      	mvns	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	400a      	ands	r2, r1
 8003f9a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	4618      	mov	r0, r3
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3b05      	subs	r3, #5
 8003fb6:	fa00 f203 	lsl.w	r2, r0, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	635a      	str	r2, [r3, #52]	; 0x34
 8003fc2:	e04c      	b.n	800405e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b0c      	cmp	r3, #12
 8003fca:	d824      	bhi.n	8004016 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4413      	add	r3, r2
 8003fdc:	3b23      	subs	r3, #35	; 0x23
 8003fde:	221f      	movs	r2, #31
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	43da      	mvns	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	400a      	ands	r2, r1
 8003fec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	4613      	mov	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	3b23      	subs	r3, #35	; 0x23
 8004008:	fa00 f203 	lsl.w	r2, r0, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	631a      	str	r2, [r3, #48]	; 0x30
 8004014:	e023      	b.n	800405e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	4613      	mov	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	3b41      	subs	r3, #65	; 0x41
 8004028:	221f      	movs	r2, #31
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	43da      	mvns	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	400a      	ands	r2, r1
 8004036:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	b29b      	uxth	r3, r3
 8004044:	4618      	mov	r0, r3
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	3b41      	subs	r3, #65	; 0x41
 8004052:	fa00 f203 	lsl.w	r2, r0, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800405e:	4b29      	ldr	r3, [pc, #164]	; (8004104 <HAL_ADC_ConfigChannel+0x250>)
 8004060:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a28      	ldr	r2, [pc, #160]	; (8004108 <HAL_ADC_ConfigChannel+0x254>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d10f      	bne.n	800408c <HAL_ADC_ConfigChannel+0x1d8>
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b12      	cmp	r3, #18
 8004072:	d10b      	bne.n	800408c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a1d      	ldr	r2, [pc, #116]	; (8004108 <HAL_ADC_ConfigChannel+0x254>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d12b      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x23a>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a1c      	ldr	r2, [pc, #112]	; (800410c <HAL_ADC_ConfigChannel+0x258>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d003      	beq.n	80040a8 <HAL_ADC_ConfigChannel+0x1f4>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b11      	cmp	r3, #17
 80040a6:	d122      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a11      	ldr	r2, [pc, #68]	; (800410c <HAL_ADC_ConfigChannel+0x258>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d111      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80040ca:	4b11      	ldr	r3, [pc, #68]	; (8004110 <HAL_ADC_ConfigChannel+0x25c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a11      	ldr	r2, [pc, #68]	; (8004114 <HAL_ADC_ConfigChannel+0x260>)
 80040d0:	fba2 2303 	umull	r2, r3, r2, r3
 80040d4:	0c9a      	lsrs	r2, r3, #18
 80040d6:	4613      	mov	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80040e0:	e002      	b.n	80040e8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	3b01      	subs	r3, #1
 80040e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1f9      	bne.n	80040e2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	40012300 	.word	0x40012300
 8004108:	40012000 	.word	0x40012000
 800410c:	10000012 	.word	0x10000012
 8004110:	20000000 	.word	0x20000000
 8004114:	431bde83 	.word	0x431bde83

08004118 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004120:	4b79      	ldr	r3, [pc, #484]	; (8004308 <ADC_Init+0x1f0>)
 8004122:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	431a      	orrs	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800414c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6859      	ldr	r1, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	021a      	lsls	r2, r3, #8
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004170:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6859      	ldr	r1, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689a      	ldr	r2, [r3, #8]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004192:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6899      	ldr	r1, [r3, #8]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68da      	ldr	r2, [r3, #12]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	4a58      	ldr	r2, [pc, #352]	; (800430c <ADC_Init+0x1f4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d022      	beq.n	80041f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6899      	ldr	r1, [r3, #8]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80041e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6899      	ldr	r1, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	609a      	str	r2, [r3, #8]
 80041f4:	e00f      	b.n	8004216 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004204:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004214:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0202 	bic.w	r2, r2, #2
 8004224:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	6899      	ldr	r1, [r3, #8]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	7e1b      	ldrb	r3, [r3, #24]
 8004230:	005a      	lsls	r2, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d01b      	beq.n	800427c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004252:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004262:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6859      	ldr	r1, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	3b01      	subs	r3, #1
 8004270:	035a      	lsls	r2, r3, #13
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	605a      	str	r2, [r3, #4]
 800427a:	e007      	b.n	800428c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800428a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800429a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	051a      	lsls	r2, r3, #20
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80042c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6899      	ldr	r1, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042ce:	025a      	lsls	r2, r3, #9
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689a      	ldr	r2, [r3, #8]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6899      	ldr	r1, [r3, #8]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	029a      	lsls	r2, r3, #10
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	609a      	str	r2, [r3, #8]
}
 80042fc:	bf00      	nop
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	40012300 	.word	0x40012300
 800430c:	0f000001 	.word	0x0f000001

08004310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f003 0307 	and.w	r3, r3, #7
 800431e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004320:	4b0c      	ldr	r3, [pc, #48]	; (8004354 <__NVIC_SetPriorityGrouping+0x44>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800432c:	4013      	ands	r3, r2
 800432e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004338:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800433c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004342:	4a04      	ldr	r2, [pc, #16]	; (8004354 <__NVIC_SetPriorityGrouping+0x44>)
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	60d3      	str	r3, [r2, #12]
}
 8004348:	bf00      	nop
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	e000ed00 	.word	0xe000ed00

08004358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800435c:	4b04      	ldr	r3, [pc, #16]	; (8004370 <__NVIC_GetPriorityGrouping+0x18>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	0a1b      	lsrs	r3, r3, #8
 8004362:	f003 0307 	and.w	r3, r3, #7
}
 8004366:	4618      	mov	r0, r3
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	e000ed00 	.word	0xe000ed00

08004374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	4603      	mov	r3, r0
 800437c:	6039      	str	r1, [r7, #0]
 800437e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004384:	2b00      	cmp	r3, #0
 8004386:	db0a      	blt.n	800439e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	b2da      	uxtb	r2, r3
 800438c:	490c      	ldr	r1, [pc, #48]	; (80043c0 <__NVIC_SetPriority+0x4c>)
 800438e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004392:	0112      	lsls	r2, r2, #4
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	440b      	add	r3, r1
 8004398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800439c:	e00a      	b.n	80043b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	4908      	ldr	r1, [pc, #32]	; (80043c4 <__NVIC_SetPriority+0x50>)
 80043a4:	79fb      	ldrb	r3, [r7, #7]
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	3b04      	subs	r3, #4
 80043ac:	0112      	lsls	r2, r2, #4
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	440b      	add	r3, r1
 80043b2:	761a      	strb	r2, [r3, #24]
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	e000e100 	.word	0xe000e100
 80043c4:	e000ed00 	.word	0xe000ed00

080043c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b089      	sub	sp, #36	; 0x24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	f1c3 0307 	rsb	r3, r3, #7
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	bf28      	it	cs
 80043e6:	2304      	movcs	r3, #4
 80043e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	3304      	adds	r3, #4
 80043ee:	2b06      	cmp	r3, #6
 80043f0:	d902      	bls.n	80043f8 <NVIC_EncodePriority+0x30>
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	3b03      	subs	r3, #3
 80043f6:	e000      	b.n	80043fa <NVIC_EncodePriority+0x32>
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	43da      	mvns	r2, r3
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	401a      	ands	r2, r3
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004410:	f04f 31ff 	mov.w	r1, #4294967295
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	fa01 f303 	lsl.w	r3, r1, r3
 800441a:	43d9      	mvns	r1, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004420:	4313      	orrs	r3, r2
         );
}
 8004422:	4618      	mov	r0, r3
 8004424:	3724      	adds	r7, #36	; 0x24
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
	...

08004430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3b01      	subs	r3, #1
 800443c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004440:	d301      	bcc.n	8004446 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004442:	2301      	movs	r3, #1
 8004444:	e00f      	b.n	8004466 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004446:	4a0a      	ldr	r2, [pc, #40]	; (8004470 <SysTick_Config+0x40>)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3b01      	subs	r3, #1
 800444c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800444e:	210f      	movs	r1, #15
 8004450:	f04f 30ff 	mov.w	r0, #4294967295
 8004454:	f7ff ff8e 	bl	8004374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004458:	4b05      	ldr	r3, [pc, #20]	; (8004470 <SysTick_Config+0x40>)
 800445a:	2200      	movs	r2, #0
 800445c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800445e:	4b04      	ldr	r3, [pc, #16]	; (8004470 <SysTick_Config+0x40>)
 8004460:	2207      	movs	r2, #7
 8004462:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	e000e010 	.word	0xe000e010

08004474 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff ff47 	bl	8004310 <__NVIC_SetPriorityGrouping>
}
 8004482:	bf00      	nop
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800448a:	b580      	push	{r7, lr}
 800448c:	b086      	sub	sp, #24
 800448e:	af00      	add	r7, sp, #0
 8004490:	4603      	mov	r3, r0
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	607a      	str	r2, [r7, #4]
 8004496:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004498:	2300      	movs	r3, #0
 800449a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800449c:	f7ff ff5c 	bl	8004358 <__NVIC_GetPriorityGrouping>
 80044a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	68b9      	ldr	r1, [r7, #8]
 80044a6:	6978      	ldr	r0, [r7, #20]
 80044a8:	f7ff ff8e 	bl	80043c8 <NVIC_EncodePriority>
 80044ac:	4602      	mov	r2, r0
 80044ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044b2:	4611      	mov	r1, r2
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff ff5d 	bl	8004374 <__NVIC_SetPriority>
}
 80044ba:	bf00      	nop
 80044bc:	3718      	adds	r7, #24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b082      	sub	sp, #8
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7ff ffb0 	bl	8004430 <SysTick_Config>
 80044d0:	4603      	mov	r3, r0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b082      	sub	sp, #8
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e00e      	b.n	800450a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	795b      	ldrb	r3, [r3, #5]
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d105      	bne.n	8004502 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7fc fa57 	bl	80009b0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004514:	b480      	push	{r7}
 8004516:	b089      	sub	sp, #36	; 0x24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800451e:	2300      	movs	r3, #0
 8004520:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004522:	2300      	movs	r3, #0
 8004524:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004526:	2300      	movs	r3, #0
 8004528:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800452a:	2300      	movs	r3, #0
 800452c:	61fb      	str	r3, [r7, #28]
 800452e:	e159      	b.n	80047e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004530:	2201      	movs	r2, #1
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	4013      	ands	r3, r2
 8004542:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	429a      	cmp	r2, r3
 800454a:	f040 8148 	bne.w	80047de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	2b01      	cmp	r3, #1
 8004558:	d005      	beq.n	8004566 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004562:	2b02      	cmp	r3, #2
 8004564:	d130      	bne.n	80045c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	2203      	movs	r2, #3
 8004572:	fa02 f303 	lsl.w	r3, r2, r3
 8004576:	43db      	mvns	r3, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4013      	ands	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	fa02 f303 	lsl.w	r3, r2, r3
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	4313      	orrs	r3, r2
 800458e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800459c:	2201      	movs	r2, #1
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	43db      	mvns	r3, r3
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	4013      	ands	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	091b      	lsrs	r3, r3, #4
 80045b2:	f003 0201 	and.w	r2, r3, #1
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	4313      	orrs	r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f003 0303 	and.w	r3, r3, #3
 80045d0:	2b03      	cmp	r3, #3
 80045d2:	d017      	beq.n	8004604 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	2203      	movs	r2, #3
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	43db      	mvns	r3, r3
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	4013      	ands	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f003 0303 	and.w	r3, r3, #3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d123      	bne.n	8004658 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	08da      	lsrs	r2, r3, #3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3208      	adds	r2, #8
 8004618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800461c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	220f      	movs	r2, #15
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	43db      	mvns	r3, r3
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	4013      	ands	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	4313      	orrs	r3, r2
 8004648:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	08da      	lsrs	r2, r3, #3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	3208      	adds	r2, #8
 8004652:	69b9      	ldr	r1, [r7, #24]
 8004654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	2203      	movs	r2, #3
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	43db      	mvns	r3, r3
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	4013      	ands	r3, r2
 800466e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f003 0203 	and.w	r2, r3, #3
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	fa02 f303 	lsl.w	r3, r2, r3
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	4313      	orrs	r3, r2
 8004684:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 80a2 	beq.w	80047de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800469a:	2300      	movs	r3, #0
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	4b57      	ldr	r3, [pc, #348]	; (80047fc <HAL_GPIO_Init+0x2e8>)
 80046a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a2:	4a56      	ldr	r2, [pc, #344]	; (80047fc <HAL_GPIO_Init+0x2e8>)
 80046a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046a8:	6453      	str	r3, [r2, #68]	; 0x44
 80046aa:	4b54      	ldr	r3, [pc, #336]	; (80047fc <HAL_GPIO_Init+0x2e8>)
 80046ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046b6:	4a52      	ldr	r2, [pc, #328]	; (8004800 <HAL_GPIO_Init+0x2ec>)
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	089b      	lsrs	r3, r3, #2
 80046bc:	3302      	adds	r3, #2
 80046be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	220f      	movs	r2, #15
 80046ce:	fa02 f303 	lsl.w	r3, r2, r3
 80046d2:	43db      	mvns	r3, r3
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	4013      	ands	r3, r2
 80046d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a49      	ldr	r2, [pc, #292]	; (8004804 <HAL_GPIO_Init+0x2f0>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d019      	beq.n	8004716 <HAL_GPIO_Init+0x202>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a48      	ldr	r2, [pc, #288]	; (8004808 <HAL_GPIO_Init+0x2f4>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d013      	beq.n	8004712 <HAL_GPIO_Init+0x1fe>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a47      	ldr	r2, [pc, #284]	; (800480c <HAL_GPIO_Init+0x2f8>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d00d      	beq.n	800470e <HAL_GPIO_Init+0x1fa>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a46      	ldr	r2, [pc, #280]	; (8004810 <HAL_GPIO_Init+0x2fc>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d007      	beq.n	800470a <HAL_GPIO_Init+0x1f6>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a45      	ldr	r2, [pc, #276]	; (8004814 <HAL_GPIO_Init+0x300>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d101      	bne.n	8004706 <HAL_GPIO_Init+0x1f2>
 8004702:	2304      	movs	r3, #4
 8004704:	e008      	b.n	8004718 <HAL_GPIO_Init+0x204>
 8004706:	2307      	movs	r3, #7
 8004708:	e006      	b.n	8004718 <HAL_GPIO_Init+0x204>
 800470a:	2303      	movs	r3, #3
 800470c:	e004      	b.n	8004718 <HAL_GPIO_Init+0x204>
 800470e:	2302      	movs	r3, #2
 8004710:	e002      	b.n	8004718 <HAL_GPIO_Init+0x204>
 8004712:	2301      	movs	r3, #1
 8004714:	e000      	b.n	8004718 <HAL_GPIO_Init+0x204>
 8004716:	2300      	movs	r3, #0
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	f002 0203 	and.w	r2, r2, #3
 800471e:	0092      	lsls	r2, r2, #2
 8004720:	4093      	lsls	r3, r2
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4313      	orrs	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004728:	4935      	ldr	r1, [pc, #212]	; (8004800 <HAL_GPIO_Init+0x2ec>)
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	089b      	lsrs	r3, r3, #2
 800472e:	3302      	adds	r3, #2
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004736:	4b38      	ldr	r3, [pc, #224]	; (8004818 <HAL_GPIO_Init+0x304>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	43db      	mvns	r3, r3
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	4013      	ands	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	4313      	orrs	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800475a:	4a2f      	ldr	r2, [pc, #188]	; (8004818 <HAL_GPIO_Init+0x304>)
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004760:	4b2d      	ldr	r3, [pc, #180]	; (8004818 <HAL_GPIO_Init+0x304>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	43db      	mvns	r3, r3
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	4013      	ands	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004784:	4a24      	ldr	r2, [pc, #144]	; (8004818 <HAL_GPIO_Init+0x304>)
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800478a:	4b23      	ldr	r3, [pc, #140]	; (8004818 <HAL_GPIO_Init+0x304>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	43db      	mvns	r3, r3
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	4013      	ands	r3, r2
 8004798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047ae:	4a1a      	ldr	r2, [pc, #104]	; (8004818 <HAL_GPIO_Init+0x304>)
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047b4:	4b18      	ldr	r3, [pc, #96]	; (8004818 <HAL_GPIO_Init+0x304>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	43db      	mvns	r3, r3
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4013      	ands	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047d8:	4a0f      	ldr	r2, [pc, #60]	; (8004818 <HAL_GPIO_Init+0x304>)
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	3301      	adds	r3, #1
 80047e2:	61fb      	str	r3, [r7, #28]
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	2b0f      	cmp	r3, #15
 80047e8:	f67f aea2 	bls.w	8004530 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047ec:	bf00      	nop
 80047ee:	bf00      	nop
 80047f0:	3724      	adds	r7, #36	; 0x24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40023800 	.word	0x40023800
 8004800:	40013800 	.word	0x40013800
 8004804:	40020000 	.word	0x40020000
 8004808:	40020400 	.word	0x40020400
 800480c:	40020800 	.word	0x40020800
 8004810:	40020c00 	.word	0x40020c00
 8004814:	40021000 	.word	0x40021000
 8004818:	40013c00 	.word	0x40013c00

0800481c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	807b      	strh	r3, [r7, #2]
 8004828:	4613      	mov	r3, r2
 800482a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800482c:	787b      	ldrb	r3, [r7, #1]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004832:	887a      	ldrh	r2, [r7, #2]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004838:	e003      	b.n	8004842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800483a:	887b      	ldrh	r3, [r7, #2]
 800483c:	041a      	lsls	r2, r3, #16
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	619a      	str	r2, [r3, #24]
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
	...

08004850 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e267      	b.n	8004d32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d075      	beq.n	800495a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800486e:	4b88      	ldr	r3, [pc, #544]	; (8004a90 <HAL_RCC_OscConfig+0x240>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 030c 	and.w	r3, r3, #12
 8004876:	2b04      	cmp	r3, #4
 8004878:	d00c      	beq.n	8004894 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800487a:	4b85      	ldr	r3, [pc, #532]	; (8004a90 <HAL_RCC_OscConfig+0x240>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004882:	2b08      	cmp	r3, #8
 8004884:	d112      	bne.n	80048ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004886:	4b82      	ldr	r3, [pc, #520]	; (8004a90 <HAL_RCC_OscConfig+0x240>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800488e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004892:	d10b      	bne.n	80048ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004894:	4b7e      	ldr	r3, [pc, #504]	; (8004a90 <HAL_RCC_OscConfig+0x240>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d05b      	beq.n	8004958 <HAL_RCC_OscConfig+0x108>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d157      	bne.n	8004958 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e242      	b.n	8004d32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b4:	d106      	bne.n	80048c4 <HAL_RCC_OscConfig+0x74>
 80048b6:	4b76      	ldr	r3, [pc, #472]	; (8004a90 <HAL_RCC_OscConfig+0x240>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a75      	ldr	r2, [pc, #468]	; (8004a90 <HAL_RCC_OscConfig+0x240>)
 80048bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	e01d      	b.n	8004900 <HAL_RCC_OscConfig+0xb0>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048cc:	d10c      	bne.n	80048e8 <HAL_RCC_OscConfig+0x98>
 80048ce:	4b70      	ldr	r3, [pc, #448]	; (8004a90 <HAL_RCC_OscConfig+0x240>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a6f      	ldr	r2, [pc, #444]	; (8004a90 <HAL_RCC_OscConfig+0x240>)
 80048d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	4b6d      	ldr	r3, [pc, #436]	; (8004a90 <HAL_RCC_OscConfig+0x240>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a6c      	ldr	r2, [pc, #432]	; (8004a90 <HAL_RCC_OscConfig+0x240>)
 80048e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	e00b      	b.n	8004900 <HAL_RCC_OscConfig+0xb0>
 80048e8:	4b69      	ldr	r3, [pc, #420]	; (8004a90 <HAL_RCC_OscConfig+0x240>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a68      	ldr	r2, [pc, #416]	; (8004a90 <HAL_RCC_OscConfig+0x240>)
 80048ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048f2:	6013      	str	r3, [r2, #0]
 80048f4:	4b66      	ldr	r3, [pc, #408]	; (8004a90 <HAL_RCC_OscConfig+0x240>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a65      	ldr	r2, [pc, #404]	; (8004a90 <HAL_RCC_OscConfig+0x240>)
 80048fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d013      	beq.n	8004930 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004908:	f7ff fa60 	bl	8003dcc <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004910:	f7ff fa5c 	bl	8003dcc <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b64      	cmp	r3, #100	; 0x64
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e207      	b.n	8004d32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004922:	4b5b      	ldr	r3, [pc, #364]	; (8004a90 <HAL_RCC_OscConfig+0x240>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0f0      	beq.n	8004910 <HAL_RCC_OscConfig+0xc0>
 800492e:	e014      	b.n	800495a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004930:	f7ff fa4c 	bl	8003dcc <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004938:	f7ff fa48 	bl	8003dcc <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b64      	cmp	r3, #100	; 0x64
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e1f3      	b.n	8004d32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800494a:	4b51      	ldr	r3, [pc, #324]	; (8004a90 <HAL_RCC_OscConfig+0x240>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1f0      	bne.n	8004938 <HAL_RCC_OscConfig+0xe8>
 8004956:	e000      	b.n	800495a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d063      	beq.n	8004a2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004966:	4b4a      	ldr	r3, [pc, #296]	; (8004a90 <HAL_RCC_OscConfig+0x240>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 030c 	and.w	r3, r3, #12
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00b      	beq.n	800498a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004972:	4b47      	ldr	r3, [pc, #284]	; (8004a90 <HAL_RCC_OscConfig+0x240>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800497a:	2b08      	cmp	r3, #8
 800497c:	d11c      	bne.n	80049b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800497e:	4b44      	ldr	r3, [pc, #272]	; (8004a90 <HAL_RCC_OscConfig+0x240>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d116      	bne.n	80049b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800498a:	4b41      	ldr	r3, [pc, #260]	; (8004a90 <HAL_RCC_OscConfig+0x240>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d005      	beq.n	80049a2 <HAL_RCC_OscConfig+0x152>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d001      	beq.n	80049a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e1c7      	b.n	8004d32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a2:	4b3b      	ldr	r3, [pc, #236]	; (8004a90 <HAL_RCC_OscConfig+0x240>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	4937      	ldr	r1, [pc, #220]	; (8004a90 <HAL_RCC_OscConfig+0x240>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049b6:	e03a      	b.n	8004a2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d020      	beq.n	8004a02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049c0:	4b34      	ldr	r3, [pc, #208]	; (8004a94 <HAL_RCC_OscConfig+0x244>)
 80049c2:	2201      	movs	r2, #1
 80049c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c6:	f7ff fa01 	bl	8003dcc <HAL_GetTick>
 80049ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049cc:	e008      	b.n	80049e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049ce:	f7ff f9fd 	bl	8003dcc <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e1a8      	b.n	8004d32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e0:	4b2b      	ldr	r3, [pc, #172]	; (8004a90 <HAL_RCC_OscConfig+0x240>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0f0      	beq.n	80049ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ec:	4b28      	ldr	r3, [pc, #160]	; (8004a90 <HAL_RCC_OscConfig+0x240>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	00db      	lsls	r3, r3, #3
 80049fa:	4925      	ldr	r1, [pc, #148]	; (8004a90 <HAL_RCC_OscConfig+0x240>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	600b      	str	r3, [r1, #0]
 8004a00:	e015      	b.n	8004a2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a02:	4b24      	ldr	r3, [pc, #144]	; (8004a94 <HAL_RCC_OscConfig+0x244>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a08:	f7ff f9e0 	bl	8003dcc <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a10:	f7ff f9dc 	bl	8003dcc <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e187      	b.n	8004d32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a22:	4b1b      	ldr	r3, [pc, #108]	; (8004a90 <HAL_RCC_OscConfig+0x240>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1f0      	bne.n	8004a10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d036      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d016      	beq.n	8004a70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a42:	4b15      	ldr	r3, [pc, #84]	; (8004a98 <HAL_RCC_OscConfig+0x248>)
 8004a44:	2201      	movs	r2, #1
 8004a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a48:	f7ff f9c0 	bl	8003dcc <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a50:	f7ff f9bc 	bl	8003dcc <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e167      	b.n	8004d32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a62:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <HAL_RCC_OscConfig+0x240>)
 8004a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0f0      	beq.n	8004a50 <HAL_RCC_OscConfig+0x200>
 8004a6e:	e01b      	b.n	8004aa8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a70:	4b09      	ldr	r3, [pc, #36]	; (8004a98 <HAL_RCC_OscConfig+0x248>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a76:	f7ff f9a9 	bl	8003dcc <HAL_GetTick>
 8004a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a7c:	e00e      	b.n	8004a9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a7e:	f7ff f9a5 	bl	8003dcc <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d907      	bls.n	8004a9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e150      	b.n	8004d32 <HAL_RCC_OscConfig+0x4e2>
 8004a90:	40023800 	.word	0x40023800
 8004a94:	42470000 	.word	0x42470000
 8004a98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a9c:	4b88      	ldr	r3, [pc, #544]	; (8004cc0 <HAL_RCC_OscConfig+0x470>)
 8004a9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1ea      	bne.n	8004a7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 8097 	beq.w	8004be4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aba:	4b81      	ldr	r3, [pc, #516]	; (8004cc0 <HAL_RCC_OscConfig+0x470>)
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10f      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60bb      	str	r3, [r7, #8]
 8004aca:	4b7d      	ldr	r3, [pc, #500]	; (8004cc0 <HAL_RCC_OscConfig+0x470>)
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	4a7c      	ldr	r2, [pc, #496]	; (8004cc0 <HAL_RCC_OscConfig+0x470>)
 8004ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ad6:	4b7a      	ldr	r3, [pc, #488]	; (8004cc0 <HAL_RCC_OscConfig+0x470>)
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ade:	60bb      	str	r3, [r7, #8]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae6:	4b77      	ldr	r3, [pc, #476]	; (8004cc4 <HAL_RCC_OscConfig+0x474>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d118      	bne.n	8004b24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004af2:	4b74      	ldr	r3, [pc, #464]	; (8004cc4 <HAL_RCC_OscConfig+0x474>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a73      	ldr	r2, [pc, #460]	; (8004cc4 <HAL_RCC_OscConfig+0x474>)
 8004af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004afc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004afe:	f7ff f965 	bl	8003dcc <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b04:	e008      	b.n	8004b18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b06:	f7ff f961 	bl	8003dcc <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e10c      	b.n	8004d32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b18:	4b6a      	ldr	r3, [pc, #424]	; (8004cc4 <HAL_RCC_OscConfig+0x474>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0f0      	beq.n	8004b06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d106      	bne.n	8004b3a <HAL_RCC_OscConfig+0x2ea>
 8004b2c:	4b64      	ldr	r3, [pc, #400]	; (8004cc0 <HAL_RCC_OscConfig+0x470>)
 8004b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b30:	4a63      	ldr	r2, [pc, #396]	; (8004cc0 <HAL_RCC_OscConfig+0x470>)
 8004b32:	f043 0301 	orr.w	r3, r3, #1
 8004b36:	6713      	str	r3, [r2, #112]	; 0x70
 8004b38:	e01c      	b.n	8004b74 <HAL_RCC_OscConfig+0x324>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	2b05      	cmp	r3, #5
 8004b40:	d10c      	bne.n	8004b5c <HAL_RCC_OscConfig+0x30c>
 8004b42:	4b5f      	ldr	r3, [pc, #380]	; (8004cc0 <HAL_RCC_OscConfig+0x470>)
 8004b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b46:	4a5e      	ldr	r2, [pc, #376]	; (8004cc0 <HAL_RCC_OscConfig+0x470>)
 8004b48:	f043 0304 	orr.w	r3, r3, #4
 8004b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b4e:	4b5c      	ldr	r3, [pc, #368]	; (8004cc0 <HAL_RCC_OscConfig+0x470>)
 8004b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b52:	4a5b      	ldr	r2, [pc, #364]	; (8004cc0 <HAL_RCC_OscConfig+0x470>)
 8004b54:	f043 0301 	orr.w	r3, r3, #1
 8004b58:	6713      	str	r3, [r2, #112]	; 0x70
 8004b5a:	e00b      	b.n	8004b74 <HAL_RCC_OscConfig+0x324>
 8004b5c:	4b58      	ldr	r3, [pc, #352]	; (8004cc0 <HAL_RCC_OscConfig+0x470>)
 8004b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b60:	4a57      	ldr	r2, [pc, #348]	; (8004cc0 <HAL_RCC_OscConfig+0x470>)
 8004b62:	f023 0301 	bic.w	r3, r3, #1
 8004b66:	6713      	str	r3, [r2, #112]	; 0x70
 8004b68:	4b55      	ldr	r3, [pc, #340]	; (8004cc0 <HAL_RCC_OscConfig+0x470>)
 8004b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6c:	4a54      	ldr	r2, [pc, #336]	; (8004cc0 <HAL_RCC_OscConfig+0x470>)
 8004b6e:	f023 0304 	bic.w	r3, r3, #4
 8004b72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d015      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b7c:	f7ff f926 	bl	8003dcc <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b82:	e00a      	b.n	8004b9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b84:	f7ff f922 	bl	8003dcc <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e0cb      	b.n	8004d32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b9a:	4b49      	ldr	r3, [pc, #292]	; (8004cc0 <HAL_RCC_OscConfig+0x470>)
 8004b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0ee      	beq.n	8004b84 <HAL_RCC_OscConfig+0x334>
 8004ba6:	e014      	b.n	8004bd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ba8:	f7ff f910 	bl	8003dcc <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bae:	e00a      	b.n	8004bc6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bb0:	f7ff f90c 	bl	8003dcc <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e0b5      	b.n	8004d32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bc6:	4b3e      	ldr	r3, [pc, #248]	; (8004cc0 <HAL_RCC_OscConfig+0x470>)
 8004bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1ee      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bd2:	7dfb      	ldrb	r3, [r7, #23]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d105      	bne.n	8004be4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bd8:	4b39      	ldr	r3, [pc, #228]	; (8004cc0 <HAL_RCC_OscConfig+0x470>)
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	4a38      	ldr	r2, [pc, #224]	; (8004cc0 <HAL_RCC_OscConfig+0x470>)
 8004bde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004be2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 80a1 	beq.w	8004d30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bee:	4b34      	ldr	r3, [pc, #208]	; (8004cc0 <HAL_RCC_OscConfig+0x470>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 030c 	and.w	r3, r3, #12
 8004bf6:	2b08      	cmp	r3, #8
 8004bf8:	d05c      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d141      	bne.n	8004c86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c02:	4b31      	ldr	r3, [pc, #196]	; (8004cc8 <HAL_RCC_OscConfig+0x478>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c08:	f7ff f8e0 	bl	8003dcc <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c10:	f7ff f8dc 	bl	8003dcc <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e087      	b.n	8004d32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c22:	4b27      	ldr	r3, [pc, #156]	; (8004cc0 <HAL_RCC_OscConfig+0x470>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1f0      	bne.n	8004c10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	69da      	ldr	r2, [r3, #28]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	019b      	lsls	r3, r3, #6
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c44:	085b      	lsrs	r3, r3, #1
 8004c46:	3b01      	subs	r3, #1
 8004c48:	041b      	lsls	r3, r3, #16
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	061b      	lsls	r3, r3, #24
 8004c52:	491b      	ldr	r1, [pc, #108]	; (8004cc0 <HAL_RCC_OscConfig+0x470>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c58:	4b1b      	ldr	r3, [pc, #108]	; (8004cc8 <HAL_RCC_OscConfig+0x478>)
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c5e:	f7ff f8b5 	bl	8003dcc <HAL_GetTick>
 8004c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c64:	e008      	b.n	8004c78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c66:	f7ff f8b1 	bl	8003dcc <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e05c      	b.n	8004d32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c78:	4b11      	ldr	r3, [pc, #68]	; (8004cc0 <HAL_RCC_OscConfig+0x470>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0f0      	beq.n	8004c66 <HAL_RCC_OscConfig+0x416>
 8004c84:	e054      	b.n	8004d30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c86:	4b10      	ldr	r3, [pc, #64]	; (8004cc8 <HAL_RCC_OscConfig+0x478>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8c:	f7ff f89e 	bl	8003dcc <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c94:	f7ff f89a 	bl	8003dcc <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e045      	b.n	8004d32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ca6:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <HAL_RCC_OscConfig+0x470>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f0      	bne.n	8004c94 <HAL_RCC_OscConfig+0x444>
 8004cb2:	e03d      	b.n	8004d30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d107      	bne.n	8004ccc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e038      	b.n	8004d32 <HAL_RCC_OscConfig+0x4e2>
 8004cc0:	40023800 	.word	0x40023800
 8004cc4:	40007000 	.word	0x40007000
 8004cc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ccc:	4b1b      	ldr	r3, [pc, #108]	; (8004d3c <HAL_RCC_OscConfig+0x4ec>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d028      	beq.n	8004d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d121      	bne.n	8004d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d11a      	bne.n	8004d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d111      	bne.n	8004d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d12:	085b      	lsrs	r3, r3, #1
 8004d14:	3b01      	subs	r3, #1
 8004d16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d107      	bne.n	8004d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d001      	beq.n	8004d30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e000      	b.n	8004d32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3718      	adds	r7, #24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	40023800 	.word	0x40023800

08004d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e0cc      	b.n	8004eee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d54:	4b68      	ldr	r3, [pc, #416]	; (8004ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d90c      	bls.n	8004d7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d62:	4b65      	ldr	r3, [pc, #404]	; (8004ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	b2d2      	uxtb	r2, r2
 8004d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d6a:	4b63      	ldr	r3, [pc, #396]	; (8004ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d001      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e0b8      	b.n	8004eee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d020      	beq.n	8004dca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d005      	beq.n	8004da0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d94:	4b59      	ldr	r3, [pc, #356]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	4a58      	ldr	r2, [pc, #352]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004d9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0308 	and.w	r3, r3, #8
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d005      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dac:	4b53      	ldr	r3, [pc, #332]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	4a52      	ldr	r2, [pc, #328]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004db2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004db6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004db8:	4b50      	ldr	r3, [pc, #320]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	494d      	ldr	r1, [pc, #308]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d044      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d107      	bne.n	8004dee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dde:	4b47      	ldr	r3, [pc, #284]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d119      	bne.n	8004e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e07f      	b.n	8004eee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d003      	beq.n	8004dfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d107      	bne.n	8004e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dfe:	4b3f      	ldr	r3, [pc, #252]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d109      	bne.n	8004e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e06f      	b.n	8004eee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e0e:	4b3b      	ldr	r3, [pc, #236]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e067      	b.n	8004eee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e1e:	4b37      	ldr	r3, [pc, #220]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f023 0203 	bic.w	r2, r3, #3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	4934      	ldr	r1, [pc, #208]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e30:	f7fe ffcc 	bl	8003dcc <HAL_GetTick>
 8004e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e36:	e00a      	b.n	8004e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e38:	f7fe ffc8 	bl	8003dcc <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e04f      	b.n	8004eee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e4e:	4b2b      	ldr	r3, [pc, #172]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f003 020c 	and.w	r2, r3, #12
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d1eb      	bne.n	8004e38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e60:	4b25      	ldr	r3, [pc, #148]	; (8004ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d20c      	bcs.n	8004e88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e6e:	4b22      	ldr	r3, [pc, #136]	; (8004ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	b2d2      	uxtb	r2, r2
 8004e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e76:	4b20      	ldr	r3, [pc, #128]	; (8004ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0307 	and.w	r3, r3, #7
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d001      	beq.n	8004e88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e032      	b.n	8004eee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d008      	beq.n	8004ea6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e94:	4b19      	ldr	r3, [pc, #100]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	4916      	ldr	r1, [pc, #88]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d009      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eb2:	4b12      	ldr	r3, [pc, #72]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	490e      	ldr	r1, [pc, #56]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ec6:	f000 f821 	bl	8004f0c <HAL_RCC_GetSysClockFreq>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	091b      	lsrs	r3, r3, #4
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	490a      	ldr	r1, [pc, #40]	; (8004f00 <HAL_RCC_ClockConfig+0x1c0>)
 8004ed8:	5ccb      	ldrb	r3, [r1, r3]
 8004eda:	fa22 f303 	lsr.w	r3, r2, r3
 8004ede:	4a09      	ldr	r2, [pc, #36]	; (8004f04 <HAL_RCC_ClockConfig+0x1c4>)
 8004ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ee2:	4b09      	ldr	r3, [pc, #36]	; (8004f08 <HAL_RCC_ClockConfig+0x1c8>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fe ff2c 	bl	8003d44 <HAL_InitTick>

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	40023c00 	.word	0x40023c00
 8004efc:	40023800 	.word	0x40023800
 8004f00:	0802b4ec 	.word	0x0802b4ec
 8004f04:	20000000 	.word	0x20000000
 8004f08:	20000008 	.word	0x20000008

08004f0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f10:	b090      	sub	sp, #64	; 0x40
 8004f12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	637b      	str	r3, [r7, #52]	; 0x34
 8004f18:	2300      	movs	r3, #0
 8004f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f24:	4b59      	ldr	r3, [pc, #356]	; (800508c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f003 030c 	and.w	r3, r3, #12
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d00d      	beq.n	8004f4c <HAL_RCC_GetSysClockFreq+0x40>
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	f200 80a1 	bhi.w	8005078 <HAL_RCC_GetSysClockFreq+0x16c>
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <HAL_RCC_GetSysClockFreq+0x34>
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	d003      	beq.n	8004f46 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f3e:	e09b      	b.n	8005078 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f40:	4b53      	ldr	r3, [pc, #332]	; (8005090 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f42:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004f44:	e09b      	b.n	800507e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f46:	4b53      	ldr	r3, [pc, #332]	; (8005094 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f4a:	e098      	b.n	800507e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f4c:	4b4f      	ldr	r3, [pc, #316]	; (800508c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f54:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f56:	4b4d      	ldr	r3, [pc, #308]	; (800508c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d028      	beq.n	8004fb4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f62:	4b4a      	ldr	r3, [pc, #296]	; (800508c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	099b      	lsrs	r3, r3, #6
 8004f68:	2200      	movs	r2, #0
 8004f6a:	623b      	str	r3, [r7, #32]
 8004f6c:	627a      	str	r2, [r7, #36]	; 0x24
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
 8004f70:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f74:	2100      	movs	r1, #0
 8004f76:	4b47      	ldr	r3, [pc, #284]	; (8005094 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f78:	fb03 f201 	mul.w	r2, r3, r1
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	fb00 f303 	mul.w	r3, r0, r3
 8004f82:	4413      	add	r3, r2
 8004f84:	4a43      	ldr	r2, [pc, #268]	; (8005094 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f86:	fba0 1202 	umull	r1, r2, r0, r2
 8004f8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f8c:	460a      	mov	r2, r1
 8004f8e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f92:	4413      	add	r3, r2
 8004f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f98:	2200      	movs	r2, #0
 8004f9a:	61bb      	str	r3, [r7, #24]
 8004f9c:	61fa      	str	r2, [r7, #28]
 8004f9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fa2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004fa6:	f7fb f917 	bl	80001d8 <__aeabi_uldivmod>
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	4613      	mov	r3, r2
 8004fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fb2:	e053      	b.n	800505c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fb4:	4b35      	ldr	r3, [pc, #212]	; (800508c <HAL_RCC_GetSysClockFreq+0x180>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	099b      	lsrs	r3, r3, #6
 8004fba:	2200      	movs	r2, #0
 8004fbc:	613b      	str	r3, [r7, #16]
 8004fbe:	617a      	str	r2, [r7, #20]
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004fc6:	f04f 0b00 	mov.w	fp, #0
 8004fca:	4652      	mov	r2, sl
 8004fcc:	465b      	mov	r3, fp
 8004fce:	f04f 0000 	mov.w	r0, #0
 8004fd2:	f04f 0100 	mov.w	r1, #0
 8004fd6:	0159      	lsls	r1, r3, #5
 8004fd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fdc:	0150      	lsls	r0, r2, #5
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	ebb2 080a 	subs.w	r8, r2, sl
 8004fe6:	eb63 090b 	sbc.w	r9, r3, fp
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	f04f 0300 	mov.w	r3, #0
 8004ff2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004ff6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004ffa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004ffe:	ebb2 0408 	subs.w	r4, r2, r8
 8005002:	eb63 0509 	sbc.w	r5, r3, r9
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	f04f 0300 	mov.w	r3, #0
 800500e:	00eb      	lsls	r3, r5, #3
 8005010:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005014:	00e2      	lsls	r2, r4, #3
 8005016:	4614      	mov	r4, r2
 8005018:	461d      	mov	r5, r3
 800501a:	eb14 030a 	adds.w	r3, r4, sl
 800501e:	603b      	str	r3, [r7, #0]
 8005020:	eb45 030b 	adc.w	r3, r5, fp
 8005024:	607b      	str	r3, [r7, #4]
 8005026:	f04f 0200 	mov.w	r2, #0
 800502a:	f04f 0300 	mov.w	r3, #0
 800502e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005032:	4629      	mov	r1, r5
 8005034:	028b      	lsls	r3, r1, #10
 8005036:	4621      	mov	r1, r4
 8005038:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800503c:	4621      	mov	r1, r4
 800503e:	028a      	lsls	r2, r1, #10
 8005040:	4610      	mov	r0, r2
 8005042:	4619      	mov	r1, r3
 8005044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005046:	2200      	movs	r2, #0
 8005048:	60bb      	str	r3, [r7, #8]
 800504a:	60fa      	str	r2, [r7, #12]
 800504c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005050:	f7fb f8c2 	bl	80001d8 <__aeabi_uldivmod>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	4613      	mov	r3, r2
 800505a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800505c:	4b0b      	ldr	r3, [pc, #44]	; (800508c <HAL_RCC_GetSysClockFreq+0x180>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	0c1b      	lsrs	r3, r3, #16
 8005062:	f003 0303 	and.w	r3, r3, #3
 8005066:	3301      	adds	r3, #1
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800506c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005070:	fbb2 f3f3 	udiv	r3, r2, r3
 8005074:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005076:	e002      	b.n	800507e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005078:	4b05      	ldr	r3, [pc, #20]	; (8005090 <HAL_RCC_GetSysClockFreq+0x184>)
 800507a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800507c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800507e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005080:	4618      	mov	r0, r3
 8005082:	3740      	adds	r7, #64	; 0x40
 8005084:	46bd      	mov	sp, r7
 8005086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800508a:	bf00      	nop
 800508c:	40023800 	.word	0x40023800
 8005090:	00f42400 	.word	0x00f42400
 8005094:	017d7840 	.word	0x017d7840

08005098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800509c:	4b03      	ldr	r3, [pc, #12]	; (80050ac <HAL_RCC_GetHCLKFreq+0x14>)
 800509e:	681b      	ldr	r3, [r3, #0]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	20000000 	.word	0x20000000

080050b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050b4:	f7ff fff0 	bl	8005098 <HAL_RCC_GetHCLKFreq>
 80050b8:	4602      	mov	r2, r0
 80050ba:	4b05      	ldr	r3, [pc, #20]	; (80050d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	0a9b      	lsrs	r3, r3, #10
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	4903      	ldr	r1, [pc, #12]	; (80050d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050c6:	5ccb      	ldrb	r3, [r1, r3]
 80050c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	40023800 	.word	0x40023800
 80050d4:	0802b4fc 	.word	0x0802b4fc

080050d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050dc:	f7ff ffdc 	bl	8005098 <HAL_RCC_GetHCLKFreq>
 80050e0:	4602      	mov	r2, r0
 80050e2:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	0b5b      	lsrs	r3, r3, #13
 80050e8:	f003 0307 	and.w	r3, r3, #7
 80050ec:	4903      	ldr	r1, [pc, #12]	; (80050fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80050ee:	5ccb      	ldrb	r3, [r1, r3]
 80050f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	40023800 	.word	0x40023800
 80050fc:	0802b4fc 	.word	0x0802b4fc

08005100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e041      	b.n	8005196 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7fb fc64 	bl	80009f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3304      	adds	r3, #4
 800513c:	4619      	mov	r1, r3
 800513e:	4610      	mov	r0, r2
 8005140:	f000 f950 	bl	80053e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d001      	beq.n	80051b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e03c      	b.n	8005232 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a1e      	ldr	r2, [pc, #120]	; (8005240 <HAL_TIM_Base_Start+0xa0>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d018      	beq.n	80051fc <HAL_TIM_Base_Start+0x5c>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d2:	d013      	beq.n	80051fc <HAL_TIM_Base_Start+0x5c>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a1a      	ldr	r2, [pc, #104]	; (8005244 <HAL_TIM_Base_Start+0xa4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d00e      	beq.n	80051fc <HAL_TIM_Base_Start+0x5c>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a19      	ldr	r2, [pc, #100]	; (8005248 <HAL_TIM_Base_Start+0xa8>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d009      	beq.n	80051fc <HAL_TIM_Base_Start+0x5c>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a17      	ldr	r2, [pc, #92]	; (800524c <HAL_TIM_Base_Start+0xac>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d004      	beq.n	80051fc <HAL_TIM_Base_Start+0x5c>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a16      	ldr	r2, [pc, #88]	; (8005250 <HAL_TIM_Base_Start+0xb0>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d111      	bne.n	8005220 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 0307 	and.w	r3, r3, #7
 8005206:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2b06      	cmp	r3, #6
 800520c:	d010      	beq.n	8005230 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f042 0201 	orr.w	r2, r2, #1
 800521c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800521e:	e007      	b.n	8005230 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0201 	orr.w	r2, r2, #1
 800522e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	40010000 	.word	0x40010000
 8005244:	40000400 	.word	0x40000400
 8005248:	40000800 	.word	0x40000800
 800524c:	40000c00 	.word	0x40000c00
 8005250:	40014000 	.word	0x40014000

08005254 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005268:	2b01      	cmp	r3, #1
 800526a:	d101      	bne.n	8005270 <HAL_TIM_ConfigClockSource+0x1c>
 800526c:	2302      	movs	r3, #2
 800526e:	e0b4      	b.n	80053da <HAL_TIM_ConfigClockSource+0x186>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800528e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005296:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052a8:	d03e      	beq.n	8005328 <HAL_TIM_ConfigClockSource+0xd4>
 80052aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ae:	f200 8087 	bhi.w	80053c0 <HAL_TIM_ConfigClockSource+0x16c>
 80052b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052b6:	f000 8086 	beq.w	80053c6 <HAL_TIM_ConfigClockSource+0x172>
 80052ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052be:	d87f      	bhi.n	80053c0 <HAL_TIM_ConfigClockSource+0x16c>
 80052c0:	2b70      	cmp	r3, #112	; 0x70
 80052c2:	d01a      	beq.n	80052fa <HAL_TIM_ConfigClockSource+0xa6>
 80052c4:	2b70      	cmp	r3, #112	; 0x70
 80052c6:	d87b      	bhi.n	80053c0 <HAL_TIM_ConfigClockSource+0x16c>
 80052c8:	2b60      	cmp	r3, #96	; 0x60
 80052ca:	d050      	beq.n	800536e <HAL_TIM_ConfigClockSource+0x11a>
 80052cc:	2b60      	cmp	r3, #96	; 0x60
 80052ce:	d877      	bhi.n	80053c0 <HAL_TIM_ConfigClockSource+0x16c>
 80052d0:	2b50      	cmp	r3, #80	; 0x50
 80052d2:	d03c      	beq.n	800534e <HAL_TIM_ConfigClockSource+0xfa>
 80052d4:	2b50      	cmp	r3, #80	; 0x50
 80052d6:	d873      	bhi.n	80053c0 <HAL_TIM_ConfigClockSource+0x16c>
 80052d8:	2b40      	cmp	r3, #64	; 0x40
 80052da:	d058      	beq.n	800538e <HAL_TIM_ConfigClockSource+0x13a>
 80052dc:	2b40      	cmp	r3, #64	; 0x40
 80052de:	d86f      	bhi.n	80053c0 <HAL_TIM_ConfigClockSource+0x16c>
 80052e0:	2b30      	cmp	r3, #48	; 0x30
 80052e2:	d064      	beq.n	80053ae <HAL_TIM_ConfigClockSource+0x15a>
 80052e4:	2b30      	cmp	r3, #48	; 0x30
 80052e6:	d86b      	bhi.n	80053c0 <HAL_TIM_ConfigClockSource+0x16c>
 80052e8:	2b20      	cmp	r3, #32
 80052ea:	d060      	beq.n	80053ae <HAL_TIM_ConfigClockSource+0x15a>
 80052ec:	2b20      	cmp	r3, #32
 80052ee:	d867      	bhi.n	80053c0 <HAL_TIM_ConfigClockSource+0x16c>
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d05c      	beq.n	80053ae <HAL_TIM_ConfigClockSource+0x15a>
 80052f4:	2b10      	cmp	r3, #16
 80052f6:	d05a      	beq.n	80053ae <HAL_TIM_ConfigClockSource+0x15a>
 80052f8:	e062      	b.n	80053c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6818      	ldr	r0, [r3, #0]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6899      	ldr	r1, [r3, #8]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f000 f965 	bl	80055d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800531c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	609a      	str	r2, [r3, #8]
      break;
 8005326:	e04f      	b.n	80053c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6818      	ldr	r0, [r3, #0]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	6899      	ldr	r1, [r3, #8]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f000 f94e 	bl	80055d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689a      	ldr	r2, [r3, #8]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800534a:	609a      	str	r2, [r3, #8]
      break;
 800534c:	e03c      	b.n	80053c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	6859      	ldr	r1, [r3, #4]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	461a      	mov	r2, r3
 800535c:	f000 f8c2 	bl	80054e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2150      	movs	r1, #80	; 0x50
 8005366:	4618      	mov	r0, r3
 8005368:	f000 f91b 	bl	80055a2 <TIM_ITRx_SetConfig>
      break;
 800536c:	e02c      	b.n	80053c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6818      	ldr	r0, [r3, #0]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	6859      	ldr	r1, [r3, #4]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	461a      	mov	r2, r3
 800537c:	f000 f8e1 	bl	8005542 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2160      	movs	r1, #96	; 0x60
 8005386:	4618      	mov	r0, r3
 8005388:	f000 f90b 	bl	80055a2 <TIM_ITRx_SetConfig>
      break;
 800538c:	e01c      	b.n	80053c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6818      	ldr	r0, [r3, #0]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	6859      	ldr	r1, [r3, #4]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	461a      	mov	r2, r3
 800539c:	f000 f8a2 	bl	80054e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2140      	movs	r1, #64	; 0x40
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 f8fb 	bl	80055a2 <TIM_ITRx_SetConfig>
      break;
 80053ac:	e00c      	b.n	80053c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4619      	mov	r1, r3
 80053b8:	4610      	mov	r0, r2
 80053ba:	f000 f8f2 	bl	80055a2 <TIM_ITRx_SetConfig>
      break;
 80053be:	e003      	b.n	80053c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	73fb      	strb	r3, [r7, #15]
      break;
 80053c4:	e000      	b.n	80053c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80053c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
	...

080053e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a34      	ldr	r2, [pc, #208]	; (80054c8 <TIM_Base_SetConfig+0xe4>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00f      	beq.n	800541c <TIM_Base_SetConfig+0x38>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005402:	d00b      	beq.n	800541c <TIM_Base_SetConfig+0x38>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a31      	ldr	r2, [pc, #196]	; (80054cc <TIM_Base_SetConfig+0xe8>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d007      	beq.n	800541c <TIM_Base_SetConfig+0x38>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a30      	ldr	r2, [pc, #192]	; (80054d0 <TIM_Base_SetConfig+0xec>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d003      	beq.n	800541c <TIM_Base_SetConfig+0x38>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a2f      	ldr	r2, [pc, #188]	; (80054d4 <TIM_Base_SetConfig+0xf0>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d108      	bne.n	800542e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005422:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a25      	ldr	r2, [pc, #148]	; (80054c8 <TIM_Base_SetConfig+0xe4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d01b      	beq.n	800546e <TIM_Base_SetConfig+0x8a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800543c:	d017      	beq.n	800546e <TIM_Base_SetConfig+0x8a>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a22      	ldr	r2, [pc, #136]	; (80054cc <TIM_Base_SetConfig+0xe8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d013      	beq.n	800546e <TIM_Base_SetConfig+0x8a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a21      	ldr	r2, [pc, #132]	; (80054d0 <TIM_Base_SetConfig+0xec>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d00f      	beq.n	800546e <TIM_Base_SetConfig+0x8a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a20      	ldr	r2, [pc, #128]	; (80054d4 <TIM_Base_SetConfig+0xf0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00b      	beq.n	800546e <TIM_Base_SetConfig+0x8a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a1f      	ldr	r2, [pc, #124]	; (80054d8 <TIM_Base_SetConfig+0xf4>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d007      	beq.n	800546e <TIM_Base_SetConfig+0x8a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a1e      	ldr	r2, [pc, #120]	; (80054dc <TIM_Base_SetConfig+0xf8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d003      	beq.n	800546e <TIM_Base_SetConfig+0x8a>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a1d      	ldr	r2, [pc, #116]	; (80054e0 <TIM_Base_SetConfig+0xfc>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d108      	bne.n	8005480 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a08      	ldr	r2, [pc, #32]	; (80054c8 <TIM_Base_SetConfig+0xe4>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d103      	bne.n	80054b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	691a      	ldr	r2, [r3, #16]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	615a      	str	r2, [r3, #20]
}
 80054ba:	bf00      	nop
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	40010000 	.word	0x40010000
 80054cc:	40000400 	.word	0x40000400
 80054d0:	40000800 	.word	0x40000800
 80054d4:	40000c00 	.word	0x40000c00
 80054d8:	40014000 	.word	0x40014000
 80054dc:	40014400 	.word	0x40014400
 80054e0:	40014800 	.word	0x40014800

080054e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	f023 0201 	bic.w	r2, r3, #1
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800550e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	011b      	lsls	r3, r3, #4
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	4313      	orrs	r3, r2
 8005518:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f023 030a 	bic.w	r3, r3, #10
 8005520:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	4313      	orrs	r3, r2
 8005528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	621a      	str	r2, [r3, #32]
}
 8005536:	bf00      	nop
 8005538:	371c      	adds	r7, #28
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005542:	b480      	push	{r7}
 8005544:	b087      	sub	sp, #28
 8005546:	af00      	add	r7, sp, #0
 8005548:	60f8      	str	r0, [r7, #12]
 800554a:	60b9      	str	r1, [r7, #8]
 800554c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	f023 0210 	bic.w	r2, r3, #16
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800556c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	031b      	lsls	r3, r3, #12
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	4313      	orrs	r3, r2
 8005576:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800557e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	011b      	lsls	r3, r3, #4
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	4313      	orrs	r3, r2
 8005588:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	621a      	str	r2, [r3, #32]
}
 8005596:	bf00      	nop
 8005598:	371c      	adds	r7, #28
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b085      	sub	sp, #20
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4313      	orrs	r3, r2
 80055c0:	f043 0307 	orr.w	r3, r3, #7
 80055c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	609a      	str	r2, [r3, #8]
}
 80055cc:	bf00      	nop
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055d8:	b480      	push	{r7}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
 80055e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	021a      	lsls	r2, r3, #8
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	431a      	orrs	r2, r3
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4313      	orrs	r3, r2
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	4313      	orrs	r3, r2
 8005604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	609a      	str	r2, [r3, #8]
}
 800560c:	bf00      	nop
 800560e:	371c      	adds	r7, #28
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005628:	2b01      	cmp	r3, #1
 800562a:	d101      	bne.n	8005630 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800562c:	2302      	movs	r3, #2
 800562e:	e050      	b.n	80056d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2202      	movs	r2, #2
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005656:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	4313      	orrs	r3, r2
 8005660:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a1c      	ldr	r2, [pc, #112]	; (80056e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d018      	beq.n	80056a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800567c:	d013      	beq.n	80056a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a18      	ldr	r2, [pc, #96]	; (80056e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d00e      	beq.n	80056a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a16      	ldr	r2, [pc, #88]	; (80056e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d009      	beq.n	80056a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a15      	ldr	r2, [pc, #84]	; (80056ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d004      	beq.n	80056a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a13      	ldr	r2, [pc, #76]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d10c      	bne.n	80056c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	40010000 	.word	0x40010000
 80056e4:	40000400 	.word	0x40000400
 80056e8:	40000800 	.word	0x40000800
 80056ec:	40000c00 	.word	0x40000c00
 80056f0:	40014000 	.word	0x40014000

080056f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e03f      	b.n	8005786 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d106      	bne.n	8005720 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7fb f98c 	bl	8000a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2224      	movs	r2, #36	; 0x24
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68da      	ldr	r2, [r3, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005736:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f829 	bl	8005790 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	691a      	ldr	r2, [r3, #16]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800574c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	695a      	ldr	r2, [r3, #20]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800575c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68da      	ldr	r2, [r3, #12]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800576c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2220      	movs	r2, #32
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2220      	movs	r2, #32
 8005780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005794:	b0c0      	sub	sp, #256	; 0x100
 8005796:	af00      	add	r7, sp, #0
 8005798:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800579c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80057a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ac:	68d9      	ldr	r1, [r3, #12]
 80057ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	ea40 0301 	orr.w	r3, r0, r1
 80057b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	431a      	orrs	r2, r3
 80057c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	431a      	orrs	r2, r3
 80057d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80057dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80057e8:	f021 010c 	bic.w	r1, r1, #12
 80057ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057f6:	430b      	orrs	r3, r1
 80057f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800580a:	6999      	ldr	r1, [r3, #24]
 800580c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	ea40 0301 	orr.w	r3, r0, r1
 8005816:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	4b8f      	ldr	r3, [pc, #572]	; (8005a5c <UART_SetConfig+0x2cc>)
 8005820:	429a      	cmp	r2, r3
 8005822:	d005      	beq.n	8005830 <UART_SetConfig+0xa0>
 8005824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	4b8d      	ldr	r3, [pc, #564]	; (8005a60 <UART_SetConfig+0x2d0>)
 800582c:	429a      	cmp	r2, r3
 800582e:	d104      	bne.n	800583a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005830:	f7ff fc52 	bl	80050d8 <HAL_RCC_GetPCLK2Freq>
 8005834:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005838:	e003      	b.n	8005842 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800583a:	f7ff fc39 	bl	80050b0 <HAL_RCC_GetPCLK1Freq>
 800583e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800584c:	f040 810c 	bne.w	8005a68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005850:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005854:	2200      	movs	r2, #0
 8005856:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800585a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800585e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005862:	4622      	mov	r2, r4
 8005864:	462b      	mov	r3, r5
 8005866:	1891      	adds	r1, r2, r2
 8005868:	65b9      	str	r1, [r7, #88]	; 0x58
 800586a:	415b      	adcs	r3, r3
 800586c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800586e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005872:	4621      	mov	r1, r4
 8005874:	eb12 0801 	adds.w	r8, r2, r1
 8005878:	4629      	mov	r1, r5
 800587a:	eb43 0901 	adc.w	r9, r3, r1
 800587e:	f04f 0200 	mov.w	r2, #0
 8005882:	f04f 0300 	mov.w	r3, #0
 8005886:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800588a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800588e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005892:	4690      	mov	r8, r2
 8005894:	4699      	mov	r9, r3
 8005896:	4623      	mov	r3, r4
 8005898:	eb18 0303 	adds.w	r3, r8, r3
 800589c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058a0:	462b      	mov	r3, r5
 80058a2:	eb49 0303 	adc.w	r3, r9, r3
 80058a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80058ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80058be:	460b      	mov	r3, r1
 80058c0:	18db      	adds	r3, r3, r3
 80058c2:	653b      	str	r3, [r7, #80]	; 0x50
 80058c4:	4613      	mov	r3, r2
 80058c6:	eb42 0303 	adc.w	r3, r2, r3
 80058ca:	657b      	str	r3, [r7, #84]	; 0x54
 80058cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80058d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80058d4:	f7fa fc80 	bl	80001d8 <__aeabi_uldivmod>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4b61      	ldr	r3, [pc, #388]	; (8005a64 <UART_SetConfig+0x2d4>)
 80058de:	fba3 2302 	umull	r2, r3, r3, r2
 80058e2:	095b      	lsrs	r3, r3, #5
 80058e4:	011c      	lsls	r4, r3, #4
 80058e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058ea:	2200      	movs	r2, #0
 80058ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80058f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80058f8:	4642      	mov	r2, r8
 80058fa:	464b      	mov	r3, r9
 80058fc:	1891      	adds	r1, r2, r2
 80058fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8005900:	415b      	adcs	r3, r3
 8005902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005904:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005908:	4641      	mov	r1, r8
 800590a:	eb12 0a01 	adds.w	sl, r2, r1
 800590e:	4649      	mov	r1, r9
 8005910:	eb43 0b01 	adc.w	fp, r3, r1
 8005914:	f04f 0200 	mov.w	r2, #0
 8005918:	f04f 0300 	mov.w	r3, #0
 800591c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005920:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005924:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005928:	4692      	mov	sl, r2
 800592a:	469b      	mov	fp, r3
 800592c:	4643      	mov	r3, r8
 800592e:	eb1a 0303 	adds.w	r3, sl, r3
 8005932:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005936:	464b      	mov	r3, r9
 8005938:	eb4b 0303 	adc.w	r3, fp, r3
 800593c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800594c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005950:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005954:	460b      	mov	r3, r1
 8005956:	18db      	adds	r3, r3, r3
 8005958:	643b      	str	r3, [r7, #64]	; 0x40
 800595a:	4613      	mov	r3, r2
 800595c:	eb42 0303 	adc.w	r3, r2, r3
 8005960:	647b      	str	r3, [r7, #68]	; 0x44
 8005962:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005966:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800596a:	f7fa fc35 	bl	80001d8 <__aeabi_uldivmod>
 800596e:	4602      	mov	r2, r0
 8005970:	460b      	mov	r3, r1
 8005972:	4611      	mov	r1, r2
 8005974:	4b3b      	ldr	r3, [pc, #236]	; (8005a64 <UART_SetConfig+0x2d4>)
 8005976:	fba3 2301 	umull	r2, r3, r3, r1
 800597a:	095b      	lsrs	r3, r3, #5
 800597c:	2264      	movs	r2, #100	; 0x64
 800597e:	fb02 f303 	mul.w	r3, r2, r3
 8005982:	1acb      	subs	r3, r1, r3
 8005984:	00db      	lsls	r3, r3, #3
 8005986:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800598a:	4b36      	ldr	r3, [pc, #216]	; (8005a64 <UART_SetConfig+0x2d4>)
 800598c:	fba3 2302 	umull	r2, r3, r3, r2
 8005990:	095b      	lsrs	r3, r3, #5
 8005992:	005b      	lsls	r3, r3, #1
 8005994:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005998:	441c      	add	r4, r3
 800599a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800599e:	2200      	movs	r2, #0
 80059a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80059a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80059ac:	4642      	mov	r2, r8
 80059ae:	464b      	mov	r3, r9
 80059b0:	1891      	adds	r1, r2, r2
 80059b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80059b4:	415b      	adcs	r3, r3
 80059b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059bc:	4641      	mov	r1, r8
 80059be:	1851      	adds	r1, r2, r1
 80059c0:	6339      	str	r1, [r7, #48]	; 0x30
 80059c2:	4649      	mov	r1, r9
 80059c4:	414b      	adcs	r3, r1
 80059c6:	637b      	str	r3, [r7, #52]	; 0x34
 80059c8:	f04f 0200 	mov.w	r2, #0
 80059cc:	f04f 0300 	mov.w	r3, #0
 80059d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80059d4:	4659      	mov	r1, fp
 80059d6:	00cb      	lsls	r3, r1, #3
 80059d8:	4651      	mov	r1, sl
 80059da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059de:	4651      	mov	r1, sl
 80059e0:	00ca      	lsls	r2, r1, #3
 80059e2:	4610      	mov	r0, r2
 80059e4:	4619      	mov	r1, r3
 80059e6:	4603      	mov	r3, r0
 80059e8:	4642      	mov	r2, r8
 80059ea:	189b      	adds	r3, r3, r2
 80059ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059f0:	464b      	mov	r3, r9
 80059f2:	460a      	mov	r2, r1
 80059f4:	eb42 0303 	adc.w	r3, r2, r3
 80059f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a10:	460b      	mov	r3, r1
 8005a12:	18db      	adds	r3, r3, r3
 8005a14:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a16:	4613      	mov	r3, r2
 8005a18:	eb42 0303 	adc.w	r3, r2, r3
 8005a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a26:	f7fa fbd7 	bl	80001d8 <__aeabi_uldivmod>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	4b0d      	ldr	r3, [pc, #52]	; (8005a64 <UART_SetConfig+0x2d4>)
 8005a30:	fba3 1302 	umull	r1, r3, r3, r2
 8005a34:	095b      	lsrs	r3, r3, #5
 8005a36:	2164      	movs	r1, #100	; 0x64
 8005a38:	fb01 f303 	mul.w	r3, r1, r3
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	3332      	adds	r3, #50	; 0x32
 8005a42:	4a08      	ldr	r2, [pc, #32]	; (8005a64 <UART_SetConfig+0x2d4>)
 8005a44:	fba2 2303 	umull	r2, r3, r2, r3
 8005a48:	095b      	lsrs	r3, r3, #5
 8005a4a:	f003 0207 	and.w	r2, r3, #7
 8005a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4422      	add	r2, r4
 8005a56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a58:	e106      	b.n	8005c68 <UART_SetConfig+0x4d8>
 8005a5a:	bf00      	nop
 8005a5c:	40011000 	.word	0x40011000
 8005a60:	40011400 	.word	0x40011400
 8005a64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005a76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005a7a:	4642      	mov	r2, r8
 8005a7c:	464b      	mov	r3, r9
 8005a7e:	1891      	adds	r1, r2, r2
 8005a80:	6239      	str	r1, [r7, #32]
 8005a82:	415b      	adcs	r3, r3
 8005a84:	627b      	str	r3, [r7, #36]	; 0x24
 8005a86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a8a:	4641      	mov	r1, r8
 8005a8c:	1854      	adds	r4, r2, r1
 8005a8e:	4649      	mov	r1, r9
 8005a90:	eb43 0501 	adc.w	r5, r3, r1
 8005a94:	f04f 0200 	mov.w	r2, #0
 8005a98:	f04f 0300 	mov.w	r3, #0
 8005a9c:	00eb      	lsls	r3, r5, #3
 8005a9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005aa2:	00e2      	lsls	r2, r4, #3
 8005aa4:	4614      	mov	r4, r2
 8005aa6:	461d      	mov	r5, r3
 8005aa8:	4643      	mov	r3, r8
 8005aaa:	18e3      	adds	r3, r4, r3
 8005aac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ab0:	464b      	mov	r3, r9
 8005ab2:	eb45 0303 	adc.w	r3, r5, r3
 8005ab6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ac6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005aca:	f04f 0200 	mov.w	r2, #0
 8005ace:	f04f 0300 	mov.w	r3, #0
 8005ad2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005ad6:	4629      	mov	r1, r5
 8005ad8:	008b      	lsls	r3, r1, #2
 8005ada:	4621      	mov	r1, r4
 8005adc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ae0:	4621      	mov	r1, r4
 8005ae2:	008a      	lsls	r2, r1, #2
 8005ae4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005ae8:	f7fa fb76 	bl	80001d8 <__aeabi_uldivmod>
 8005aec:	4602      	mov	r2, r0
 8005aee:	460b      	mov	r3, r1
 8005af0:	4b60      	ldr	r3, [pc, #384]	; (8005c74 <UART_SetConfig+0x4e4>)
 8005af2:	fba3 2302 	umull	r2, r3, r3, r2
 8005af6:	095b      	lsrs	r3, r3, #5
 8005af8:	011c      	lsls	r4, r3, #4
 8005afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005afe:	2200      	movs	r2, #0
 8005b00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b0c:	4642      	mov	r2, r8
 8005b0e:	464b      	mov	r3, r9
 8005b10:	1891      	adds	r1, r2, r2
 8005b12:	61b9      	str	r1, [r7, #24]
 8005b14:	415b      	adcs	r3, r3
 8005b16:	61fb      	str	r3, [r7, #28]
 8005b18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b1c:	4641      	mov	r1, r8
 8005b1e:	1851      	adds	r1, r2, r1
 8005b20:	6139      	str	r1, [r7, #16]
 8005b22:	4649      	mov	r1, r9
 8005b24:	414b      	adcs	r3, r1
 8005b26:	617b      	str	r3, [r7, #20]
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	f04f 0300 	mov.w	r3, #0
 8005b30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b34:	4659      	mov	r1, fp
 8005b36:	00cb      	lsls	r3, r1, #3
 8005b38:	4651      	mov	r1, sl
 8005b3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b3e:	4651      	mov	r1, sl
 8005b40:	00ca      	lsls	r2, r1, #3
 8005b42:	4610      	mov	r0, r2
 8005b44:	4619      	mov	r1, r3
 8005b46:	4603      	mov	r3, r0
 8005b48:	4642      	mov	r2, r8
 8005b4a:	189b      	adds	r3, r3, r2
 8005b4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b50:	464b      	mov	r3, r9
 8005b52:	460a      	mov	r2, r1
 8005b54:	eb42 0303 	adc.w	r3, r2, r3
 8005b58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b66:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005b68:	f04f 0200 	mov.w	r2, #0
 8005b6c:	f04f 0300 	mov.w	r3, #0
 8005b70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005b74:	4649      	mov	r1, r9
 8005b76:	008b      	lsls	r3, r1, #2
 8005b78:	4641      	mov	r1, r8
 8005b7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b7e:	4641      	mov	r1, r8
 8005b80:	008a      	lsls	r2, r1, #2
 8005b82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005b86:	f7fa fb27 	bl	80001d8 <__aeabi_uldivmod>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	4611      	mov	r1, r2
 8005b90:	4b38      	ldr	r3, [pc, #224]	; (8005c74 <UART_SetConfig+0x4e4>)
 8005b92:	fba3 2301 	umull	r2, r3, r3, r1
 8005b96:	095b      	lsrs	r3, r3, #5
 8005b98:	2264      	movs	r2, #100	; 0x64
 8005b9a:	fb02 f303 	mul.w	r3, r2, r3
 8005b9e:	1acb      	subs	r3, r1, r3
 8005ba0:	011b      	lsls	r3, r3, #4
 8005ba2:	3332      	adds	r3, #50	; 0x32
 8005ba4:	4a33      	ldr	r2, [pc, #204]	; (8005c74 <UART_SetConfig+0x4e4>)
 8005ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8005baa:	095b      	lsrs	r3, r3, #5
 8005bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bb0:	441c      	add	r4, r3
 8005bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	673b      	str	r3, [r7, #112]	; 0x70
 8005bba:	677a      	str	r2, [r7, #116]	; 0x74
 8005bbc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005bc0:	4642      	mov	r2, r8
 8005bc2:	464b      	mov	r3, r9
 8005bc4:	1891      	adds	r1, r2, r2
 8005bc6:	60b9      	str	r1, [r7, #8]
 8005bc8:	415b      	adcs	r3, r3
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bd0:	4641      	mov	r1, r8
 8005bd2:	1851      	adds	r1, r2, r1
 8005bd4:	6039      	str	r1, [r7, #0]
 8005bd6:	4649      	mov	r1, r9
 8005bd8:	414b      	adcs	r3, r1
 8005bda:	607b      	str	r3, [r7, #4]
 8005bdc:	f04f 0200 	mov.w	r2, #0
 8005be0:	f04f 0300 	mov.w	r3, #0
 8005be4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005be8:	4659      	mov	r1, fp
 8005bea:	00cb      	lsls	r3, r1, #3
 8005bec:	4651      	mov	r1, sl
 8005bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bf2:	4651      	mov	r1, sl
 8005bf4:	00ca      	lsls	r2, r1, #3
 8005bf6:	4610      	mov	r0, r2
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	4642      	mov	r2, r8
 8005bfe:	189b      	adds	r3, r3, r2
 8005c00:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c02:	464b      	mov	r3, r9
 8005c04:	460a      	mov	r2, r1
 8005c06:	eb42 0303 	adc.w	r3, r2, r3
 8005c0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	663b      	str	r3, [r7, #96]	; 0x60
 8005c16:	667a      	str	r2, [r7, #100]	; 0x64
 8005c18:	f04f 0200 	mov.w	r2, #0
 8005c1c:	f04f 0300 	mov.w	r3, #0
 8005c20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c24:	4649      	mov	r1, r9
 8005c26:	008b      	lsls	r3, r1, #2
 8005c28:	4641      	mov	r1, r8
 8005c2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c2e:	4641      	mov	r1, r8
 8005c30:	008a      	lsls	r2, r1, #2
 8005c32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005c36:	f7fa facf 	bl	80001d8 <__aeabi_uldivmod>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	4b0d      	ldr	r3, [pc, #52]	; (8005c74 <UART_SetConfig+0x4e4>)
 8005c40:	fba3 1302 	umull	r1, r3, r3, r2
 8005c44:	095b      	lsrs	r3, r3, #5
 8005c46:	2164      	movs	r1, #100	; 0x64
 8005c48:	fb01 f303 	mul.w	r3, r1, r3
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	011b      	lsls	r3, r3, #4
 8005c50:	3332      	adds	r3, #50	; 0x32
 8005c52:	4a08      	ldr	r2, [pc, #32]	; (8005c74 <UART_SetConfig+0x4e4>)
 8005c54:	fba2 2303 	umull	r2, r3, r2, r3
 8005c58:	095b      	lsrs	r3, r3, #5
 8005c5a:	f003 020f 	and.w	r2, r3, #15
 8005c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4422      	add	r2, r4
 8005c66:	609a      	str	r2, [r3, #8]
}
 8005c68:	bf00      	nop
 8005c6a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c74:	51eb851f 	.word	0x51eb851f

08005c78 <memset>:
 8005c78:	4402      	add	r2, r0
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d100      	bne.n	8005c82 <memset+0xa>
 8005c80:	4770      	bx	lr
 8005c82:	f803 1b01 	strb.w	r1, [r3], #1
 8005c86:	e7f9      	b.n	8005c7c <memset+0x4>

08005c88 <__libc_init_array>:
 8005c88:	b570      	push	{r4, r5, r6, lr}
 8005c8a:	4d0d      	ldr	r5, [pc, #52]	; (8005cc0 <__libc_init_array+0x38>)
 8005c8c:	4c0d      	ldr	r4, [pc, #52]	; (8005cc4 <__libc_init_array+0x3c>)
 8005c8e:	1b64      	subs	r4, r4, r5
 8005c90:	10a4      	asrs	r4, r4, #2
 8005c92:	2600      	movs	r6, #0
 8005c94:	42a6      	cmp	r6, r4
 8005c96:	d109      	bne.n	8005cac <__libc_init_array+0x24>
 8005c98:	4d0b      	ldr	r5, [pc, #44]	; (8005cc8 <__libc_init_array+0x40>)
 8005c9a:	4c0c      	ldr	r4, [pc, #48]	; (8005ccc <__libc_init_array+0x44>)
 8005c9c:	f000 f818 	bl	8005cd0 <_init>
 8005ca0:	1b64      	subs	r4, r4, r5
 8005ca2:	10a4      	asrs	r4, r4, #2
 8005ca4:	2600      	movs	r6, #0
 8005ca6:	42a6      	cmp	r6, r4
 8005ca8:	d105      	bne.n	8005cb6 <__libc_init_array+0x2e>
 8005caa:	bd70      	pop	{r4, r5, r6, pc}
 8005cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cb0:	4798      	blx	r3
 8005cb2:	3601      	adds	r6, #1
 8005cb4:	e7ee      	b.n	8005c94 <__libc_init_array+0xc>
 8005cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cba:	4798      	blx	r3
 8005cbc:	3601      	adds	r6, #1
 8005cbe:	e7f2      	b.n	8005ca6 <__libc_init_array+0x1e>
 8005cc0:	0802ba4c 	.word	0x0802ba4c
 8005cc4:	0802ba4c 	.word	0x0802ba4c
 8005cc8:	0802ba4c 	.word	0x0802ba4c
 8005ccc:	0802ba50 	.word	0x0802ba50

08005cd0 <_init>:
 8005cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd2:	bf00      	nop
 8005cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cd6:	bc08      	pop	{r3}
 8005cd8:	469e      	mov	lr, r3
 8005cda:	4770      	bx	lr

08005cdc <_fini>:
 8005cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cde:	bf00      	nop
 8005ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ce2:	bc08      	pop	{r3}
 8005ce4:	469e      	mov	lr, r3
 8005ce6:	4770      	bx	lr
