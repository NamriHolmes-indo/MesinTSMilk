
MesinTSMilk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dd8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00028abc  08005f70  08005f70  00015f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802ea2c  0802ea2c  00040018  2**0
                  CONTENTS
  4 .ARM          00000008  0802ea2c  0802ea2c  0003ea2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802ea34  0802ea34  00040018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802ea34  0802ea34  0003ea34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802ea38  0802ea38  0003ea38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0802ea3c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000018  0802ea54  00040018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  0802ea54  000400fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040048  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d8ab  00000000  00000000  0004008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001eea  00000000  00000000  0004d936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e30  00000000  00000000  0004f820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002271  00000000  00000000  00050650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8bb  00000000  00000000  000528c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000995c8  00000000  00000000  0006217c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000ae1  00000000  00000000  000fb744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b8c  00000000  00000000  000fc228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000ffdb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005f58 	.word	0x08005f58

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	08005f58 	.word	0x08005f58

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <Button_Init>:
#define RL4 GPIO_PIN_15
#define RL_Port GPIOB

uint32_t ID;

void Button_Init(void) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e8:	2300      	movs	r3, #0
 80004ea:	603b      	str	r3, [r7, #0]
 80004ec:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <Button_Init+0x50>)
 80004ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f0:	4a0c      	ldr	r2, [pc, #48]	; (8000524 <Button_Init+0x50>)
 80004f2:	f043 0302 	orr.w	r3, r3, #2
 80004f6:	6313      	str	r3, [r2, #48]	; 0x30
 80004f8:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <Button_Init+0x50>)
 80004fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fc:	f003 0302 	and.w	r3, r3, #2
 8000500:	603b      	str	r3, [r7, #0]
 8000502:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin = TombolKiri_Pin | TombolKanan_Pin;
 8000504:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000508:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800050a:	2300      	movs	r3, #0
 800050c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800050e:	2301      	movs	r3, #1
 8000510:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(Tombol_Port, &GPIO_InitStruct);
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	4619      	mov	r1, r3
 8000516:	4804      	ldr	r0, [pc, #16]	; (8000528 <Button_Init+0x54>)
 8000518:	f004 fc1e 	bl	8004d58 <HAL_GPIO_Init>
}
 800051c:	bf00      	nop
 800051e:	3718      	adds	r7, #24
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40023800 	.word	0x40023800
 8000528:	40020000 	.word	0x40020000

0800052c <ReadTombolKiri>:

uint8_t ReadTombolKiri(void) {
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(Tombol_Port, TombolKiri_Pin) == GPIO_PIN_RESET;
 8000530:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000534:	4805      	ldr	r0, [pc, #20]	; (800054c <ReadTombolKiri+0x20>)
 8000536:	f004 fd93 	bl	8005060 <HAL_GPIO_ReadPin>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	bf0c      	ite	eq
 8000540:	2301      	moveq	r3, #1
 8000542:	2300      	movne	r3, #0
 8000544:	b2db      	uxtb	r3, r3
}
 8000546:	4618      	mov	r0, r3
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40020000 	.word	0x40020000

08000550 <ReadTombolKanan>:

uint8_t ReadTombolKanan(void) {
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(Tombol_Port, TombolKanan_Pin) == GPIO_PIN_RESET;
 8000554:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000558:	4805      	ldr	r0, [pc, #20]	; (8000570 <ReadTombolKanan+0x20>)
 800055a:	f004 fd81 	bl	8005060 <HAL_GPIO_ReadPin>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	bf0c      	ite	eq
 8000564:	2301      	moveq	r3, #1
 8000566:	2300      	movne	r3, #0
 8000568:	b2db      	uxtb	r3, r3
}
 800056a:	4618      	mov	r0, r3
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40020000 	.word	0x40020000

08000574 <main>:

int stateHalaman = 0;

int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
  HAL_Init();
 800057a:	f003 ffe3 	bl	8004544 <HAL_Init>
  SystemClock_Config();
 800057e:	f000 fa7f 	bl	8000a80 <SystemClock_Config>

  MX_GPIO_Init();
 8000582:	f000 fb9b 	bl	8000cbc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000586:	f000 fae3 	bl	8000b50 <MX_ADC1_Init>
  MX_CRC_Init();
 800058a:	f000 fb33 	bl	8000bf4 <MX_CRC_Init>
  MX_TIM1_Init();
 800058e:	f000 fb45 	bl	8000c1c <MX_TIM1_Init>
  HAL_InitTick(0);
 8000592:	2000      	movs	r0, #0
 8000594:	f003 fff8 	bl	8004588 <HAL_InitTick>
  Button_Init();
 8000598:	f7ff ff9c 	bl	80004d4 <Button_Init>

  uint8_t tombolKiriStatus, tombolKananStatus;
  uint8_t tombolKiriSebelumnyaDitekan = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	71fb      	strb	r3, [r7, #7]
  uint8_t tombolKananSebelumnyaDitekan = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	71bb      	strb	r3, [r7, #6]

  HAL_TIM_Base_Start(&htim1);
 80005a4:	4837      	ldr	r0, [pc, #220]	; (8000684 <main+0x110>)
 80005a6:	f005 fa01 	bl	80059ac <HAL_TIM_Base_Start>
  ID = readID();
 80005aa:	f001 ff3b 	bl	8002424 <readID>
 80005ae:	4603      	mov	r3, r0
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b35      	ldr	r3, [pc, #212]	; (8000688 <main+0x114>)
 80005b4:	601a      	str	r2, [r3, #0]

  HAL_Delay(100);
 80005b6:	2064      	movs	r0, #100	; 0x64
 80005b8:	f004 f836 	bl	8004628 <HAL_Delay>
  tft_init (ID);
 80005bc:	4b32      	ldr	r3, [pc, #200]	; (8000688 <main+0x114>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 fb6e 	bl	8001ca4 <tft_init>
  setRotation(1);
 80005c8:	2001      	movs	r0, #1
 80005ca:	f002 fd63 	bl	8003094 <setRotation>
  fillScreen(WHITE);
 80005ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80005d2:	f003 fae7 	bl	8003ba4 <fillScreen>
  SplashScreen();
 80005d6:	f000 f85b 	bl	8000690 <SplashScreen>

  while (1)
  {
      tombolKiriStatus = ReadTombolKiri();
 80005da:	f7ff ffa7 	bl	800052c <ReadTombolKiri>
 80005de:	4603      	mov	r3, r0
 80005e0:	717b      	strb	r3, [r7, #5]
      tombolKananStatus = ReadTombolKanan();
 80005e2:	f7ff ffb5 	bl	8000550 <ReadTombolKanan>
 80005e6:	4603      	mov	r3, r0
 80005e8:	713b      	strb	r3, [r7, #4]
      tombolKananStatus = ReadTombolKanan();
 80005ea:	f7ff ffb1 	bl	8000550 <ReadTombolKanan>
 80005ee:	4603      	mov	r3, r0
 80005f0:	713b      	strb	r3, [r7, #4]

      if (tombolKananStatus && !tombolKananSebelumnyaDitekan) {
 80005f2:	793b      	ldrb	r3, [r7, #4]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d016      	beq.n	8000626 <main+0xb2>
 80005f8:	79bb      	ldrb	r3, [r7, #6]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d113      	bne.n	8000626 <main+0xb2>
          fillScreen(BLACK);
 80005fe:	2000      	movs	r0, #0
 8000600:	f003 fad0 	bl	8003ba4 <fillScreen>
          stateHalaman = stateHalaman+1;
 8000604:	4b21      	ldr	r3, [pc, #132]	; (800068c <main+0x118>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	3301      	adds	r3, #1
 800060a:	4a20      	ldr	r2, [pc, #128]	; (800068c <main+0x118>)
 800060c:	6013      	str	r3, [r2, #0]

          if(stateHalaman>2){
 800060e:	4b1f      	ldr	r3, [pc, #124]	; (800068c <main+0x118>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b02      	cmp	r3, #2
 8000614:	dd02      	ble.n	800061c <main+0xa8>
        	  stateHalaman = 0;
 8000616:	4b1d      	ldr	r3, [pc, #116]	; (800068c <main+0x118>)
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
          }
          tombolKananSebelumnyaDitekan = 1;
 800061c:	2301      	movs	r3, #1
 800061e:	71bb      	strb	r3, [r7, #6]
          tombolKiriSebelumnyaDitekan = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	71fb      	strb	r3, [r7, #7]
 8000624:	e004      	b.n	8000630 <main+0xbc>
      }
      else if (tombolKananStatus) {
 8000626:	793b      	ldrb	r3, [r7, #4]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <main+0xbc>
          tombolKananSebelumnyaDitekan = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	71bb      	strb	r3, [r7, #6]
      }

      if (tombolKiriStatus && !tombolKiriSebelumnyaDitekan) {
 8000630:	797b      	ldrb	r3, [r7, #5]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d00c      	beq.n	8000650 <main+0xdc>
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d109      	bne.n	8000650 <main+0xdc>
          fillScreen(BLACK);
 800063c:	2000      	movs	r0, #0
 800063e:	f003 fab1 	bl	8003ba4 <fillScreen>
          SplashScreen();
 8000642:	f000 f825 	bl	8000690 <SplashScreen>
          tombolKiriSebelumnyaDitekan = 1;
 8000646:	2301      	movs	r3, #1
 8000648:	71fb      	strb	r3, [r7, #7]
          tombolKananSebelumnyaDitekan = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	71bb      	strb	r3, [r7, #6]
 800064e:	e004      	b.n	800065a <main+0xe6>
      }
      else if (tombolKiriStatus) {
 8000650:	797b      	ldrb	r3, [r7, #5]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <main+0xe6>
          tombolKiriSebelumnyaDitekan = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	71fb      	strb	r3, [r7, #7]
      }

      if(stateHalaman == 0){
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <main+0x118>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d102      	bne.n	8000668 <main+0xf4>
    	  menuUtama();
 8000662:	f000 f831 	bl	80006c8 <menuUtama>
 8000666:	e7b8      	b.n	80005da <main+0x66>
      }else if(stateHalaman == 1){
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <main+0x118>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d102      	bne.n	8000676 <main+0x102>
    	  statusDevice();
 8000670:	f000 f8c2 	bl	80007f8 <statusDevice>
 8000674:	e7b1      	b.n	80005da <main+0x66>
      }else if(stateHalaman == 2){
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <main+0x118>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b02      	cmp	r3, #2
 800067c:	d1ad      	bne.n	80005da <main+0x66>
    	  info();
 800067e:	f000 f945 	bl	800090c <info>
      tombolKiriStatus = ReadTombolKiri();
 8000682:	e7aa      	b.n	80005da <main+0x66>
 8000684:	20000088 	.word	0x20000088
 8000688:	200000d0 	.word	0x200000d0
 800068c:	200000d4 	.word	0x200000d4

08000690 <SplashScreen>:
      }

  }
}

void SplashScreen(){
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af02      	add	r7, sp, #8
	drawRGBBitmap(0, 0, image_data_logo2, 320, 240);
 8000696:	23f0      	movs	r3, #240	; 0xf0
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800069e:	4a09      	ldr	r2, [pc, #36]	; (80006c4 <SplashScreen+0x34>)
 80006a0:	2100      	movs	r1, #0
 80006a2:	2000      	movs	r0, #0
 80006a4:	f003 fed6 	bl	8004454 <drawRGBBitmap>
	fanPemanasOn();
 80006a8:	f000 f9a2 	bl	80009f0 <fanPemanasOn>
	fanMicOn();
 80006ac:	f000 f9d0 	bl	8000a50 <fanMicOn>
	HAL_Delay(5000);
 80006b0:	f241 3088 	movw	r0, #5000	; 0x1388
 80006b4:	f003 ffb8 	bl	8004628 <HAL_Delay>
	fillScreen(BLACK);
 80006b8:	2000      	movs	r0, #0
 80006ba:	f003 fa73 	bl	8003ba4 <fillScreen>
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	08008cdc 	.word	0x08008cdc

080006c8 <menuUtama>:

void menuUtama(){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af02      	add	r7, sp, #8
	printnewtstr(10, 25, RED, &mono18x7bold, 1, "Mesin TSMilk");
 80006ce:	4b3b      	ldr	r3, [pc, #236]	; (80007bc <menuUtama+0xf4>)
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	2301      	movs	r3, #1
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	4b3a      	ldr	r3, [pc, #232]	; (80007c0 <menuUtama+0xf8>)
 80006d8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80006dc:	2119      	movs	r1, #25
 80006de:	200a      	movs	r0, #10
 80006e0:	f003 fe58 	bl	8004394 <printnewtstr>
	printnewtstr(10, 55, BLUE, &mono12x7bold, 1, "Petunjuk Pemakaian:");
 80006e4:	4b37      	ldr	r3, [pc, #220]	; (80007c4 <menuUtama+0xfc>)
 80006e6:	9301      	str	r3, [sp, #4]
 80006e8:	2301      	movs	r3, #1
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	4b36      	ldr	r3, [pc, #216]	; (80007c8 <menuUtama+0x100>)
 80006ee:	221f      	movs	r2, #31
 80006f0:	2137      	movs	r1, #55	; 0x37
 80006f2:	200a      	movs	r0, #10
 80006f4:	f003 fe4e 	bl	8004394 <printnewtstr>
	printnewtstr(10, 75, BLUE, &mono9x7bold, 1, "1.Baca Bismillah");
 80006f8:	4b34      	ldr	r3, [pc, #208]	; (80007cc <menuUtama+0x104>)
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	2301      	movs	r3, #1
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	4b33      	ldr	r3, [pc, #204]	; (80007d0 <menuUtama+0x108>)
 8000702:	221f      	movs	r2, #31
 8000704:	214b      	movs	r1, #75	; 0x4b
 8000706:	200a      	movs	r0, #10
 8000708:	f003 fe44 	bl	8004394 <printnewtstr>
	printnewtstr(10, 95, BLUE, &mono9x7bold, 1, "2.Tombol kanan = Next");
 800070c:	4b31      	ldr	r3, [pc, #196]	; (80007d4 <menuUtama+0x10c>)
 800070e:	9301      	str	r3, [sp, #4]
 8000710:	2301      	movs	r3, #1
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	4b2e      	ldr	r3, [pc, #184]	; (80007d0 <menuUtama+0x108>)
 8000716:	221f      	movs	r2, #31
 8000718:	215f      	movs	r1, #95	; 0x5f
 800071a:	200a      	movs	r0, #10
 800071c:	f003 fe3a 	bl	8004394 <printnewtstr>
	printnewtstr(10, 115, BLUE, &mono9x7bold, 1, "3.Tombol kiri = OK/Stop");
 8000720:	4b2d      	ldr	r3, [pc, #180]	; (80007d8 <menuUtama+0x110>)
 8000722:	9301      	str	r3, [sp, #4]
 8000724:	2301      	movs	r3, #1
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	4b29      	ldr	r3, [pc, #164]	; (80007d0 <menuUtama+0x108>)
 800072a:	221f      	movs	r2, #31
 800072c:	2173      	movs	r1, #115	; 0x73
 800072e:	200a      	movs	r0, #10
 8000730:	f003 fe30 	bl	8004394 <printnewtstr>
	printnewtstr(10, 135, BLUE, &mono9x7bold, 1, "4.Cek Status Mesin");
 8000734:	4b29      	ldr	r3, [pc, #164]	; (80007dc <menuUtama+0x114>)
 8000736:	9301      	str	r3, [sp, #4]
 8000738:	2301      	movs	r3, #1
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <menuUtama+0x108>)
 800073e:	221f      	movs	r2, #31
 8000740:	2187      	movs	r1, #135	; 0x87
 8000742:	200a      	movs	r0, #10
 8000744:	f003 fe26 	bl	8004394 <printnewtstr>
	printnewtstr(10, 155, BLUE, &mono9x7bold, 1, "5.Mulai memasak susu");
 8000748:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <menuUtama+0x118>)
 800074a:	9301      	str	r3, [sp, #4]
 800074c:	2301      	movs	r3, #1
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <menuUtama+0x108>)
 8000752:	221f      	movs	r2, #31
 8000754:	219b      	movs	r1, #155	; 0x9b
 8000756:	200a      	movs	r0, #10
 8000758:	f003 fe1c 	bl	8004394 <printnewtstr>
	printnewtstr(10, 205, GREEN, &mono9x7, 1, "Versi 1.0.0");
 800075c:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <menuUtama+0x11c>)
 800075e:	9301      	str	r3, [sp, #4]
 8000760:	2301      	movs	r3, #1
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <menuUtama+0x120>)
 8000766:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800076a:	21cd      	movs	r1, #205	; 0xcd
 800076c:	200a      	movs	r0, #10
 800076e:	f003 fe11 	bl	8004394 <printnewtstr>
	printnewtstr(10, 220, WHITE, &mono9x7, 1, "Support By:");
 8000772:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <menuUtama+0x124>)
 8000774:	9301      	str	r3, [sp, #4]
 8000776:	2301      	movs	r3, #1
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <menuUtama+0x120>)
 800077c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000780:	21dc      	movs	r1, #220	; 0xdc
 8000782:	200a      	movs	r0, #10
 8000784:	f003 fe06 	bl	8004394 <printnewtstr>
	printnewtstr(10, 235, WHITE, &mono9x7, 1, "Ngonsul-IT");
 8000788:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <menuUtama+0x128>)
 800078a:	9301      	str	r3, [sp, #4]
 800078c:	2301      	movs	r3, #1
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <menuUtama+0x120>)
 8000792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000796:	21eb      	movs	r1, #235	; 0xeb
 8000798:	200a      	movs	r0, #10
 800079a:	f003 fdfb 	bl	8004394 <printnewtstr>
	printnewtstr(170, 235, BLUE, &mono9x7bold, 1, "Status>>");
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <menuUtama+0x12c>)
 80007a0:	9301      	str	r3, [sp, #4]
 80007a2:	2301      	movs	r3, #1
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <menuUtama+0x108>)
 80007a8:	221f      	movs	r2, #31
 80007aa:	21eb      	movs	r1, #235	; 0xeb
 80007ac:	20aa      	movs	r0, #170	; 0xaa
 80007ae:	f003 fdf1 	bl	8004394 <printnewtstr>
	fanMicOff();
 80007b2:	f000 f959 	bl	8000a68 <fanMicOff>
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	08005f70 	.word	0x08005f70
 80007c0:	08008cd0 	.word	0x08008cd0
 80007c4:	08005f80 	.word	0x08005f80
 80007c8:	08007a24 	.word	0x08007a24
 80007cc:	08005f94 	.word	0x08005f94
 80007d0:	08006f9c 	.word	0x08006f9c
 80007d4:	08005fa8 	.word	0x08005fa8
 80007d8:	08005fc0 	.word	0x08005fc0
 80007dc:	08005fd8 	.word	0x08005fd8
 80007e0:	08005fec 	.word	0x08005fec
 80007e4:	08006004 	.word	0x08006004
 80007e8:	080067f0 	.word	0x080067f0
 80007ec:	08006010 	.word	0x08006010
 80007f0:	0800601c 	.word	0x0800601c
 80007f4:	08006028 	.word	0x08006028

080007f8 <statusDevice>:

void statusDevice(){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af02      	add	r7, sp, #8
	printnewtstr(10, 25, RED, &mono18x7bold, 1, "Mesin TSMilk");
 80007fe:	4b36      	ldr	r3, [pc, #216]	; (80008d8 <statusDevice+0xe0>)
 8000800:	9301      	str	r3, [sp, #4]
 8000802:	2301      	movs	r3, #1
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	4b35      	ldr	r3, [pc, #212]	; (80008dc <statusDevice+0xe4>)
 8000808:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800080c:	2119      	movs	r1, #25
 800080e:	200a      	movs	r0, #10
 8000810:	f003 fdc0 	bl	8004394 <printnewtstr>
	printnewtstr(10, 55, BLUE, &mono12x7bold, 1, "Status Mesin:");
 8000814:	4b32      	ldr	r3, [pc, #200]	; (80008e0 <statusDevice+0xe8>)
 8000816:	9301      	str	r3, [sp, #4]
 8000818:	2301      	movs	r3, #1
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	4b31      	ldr	r3, [pc, #196]	; (80008e4 <statusDevice+0xec>)
 800081e:	221f      	movs	r2, #31
 8000820:	2137      	movs	r1, #55	; 0x37
 8000822:	200a      	movs	r0, #10
 8000824:	f003 fdb6 	bl	8004394 <printnewtstr>

	uint8_t suhu = 95;
 8000828:	235f      	movs	r3, #95	; 0x5f
 800082a:	71fb      	strb	r3, [r7, #7]
	if(suhu <= 75){
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	2b4b      	cmp	r3, #75	; 0x4b
 8000830:	d80b      	bhi.n	800084a <statusDevice+0x52>
		printnewtstr(10, 95, RED, &mono12x7bold, 1, "Belum Siap");
 8000832:	4b2d      	ldr	r3, [pc, #180]	; (80008e8 <statusDevice+0xf0>)
 8000834:	9301      	str	r3, [sp, #4]
 8000836:	2301      	movs	r3, #1
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	4b2a      	ldr	r3, [pc, #168]	; (80008e4 <statusDevice+0xec>)
 800083c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000840:	215f      	movs	r1, #95	; 0x5f
 8000842:	200a      	movs	r0, #10
 8000844:	f003 fda6 	bl	8004394 <printnewtstr>
 8000848:	e014      	b.n	8000874 <statusDevice+0x7c>
	}else{
		printnewtstr(10, 95, GREEN, &mono12x7bold, 1, "Siap");
 800084a:	4b28      	ldr	r3, [pc, #160]	; (80008ec <statusDevice+0xf4>)
 800084c:	9301      	str	r3, [sp, #4]
 800084e:	2301      	movs	r3, #1
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	4b24      	ldr	r3, [pc, #144]	; (80008e4 <statusDevice+0xec>)
 8000854:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000858:	215f      	movs	r1, #95	; 0x5f
 800085a:	200a      	movs	r0, #10
 800085c:	f003 fd9a 	bl	8004394 <printnewtstr>
		printnewtstr(10, 135, BLUE, &mono9x7bold, 1, "OK Untuk Start");
 8000860:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <statusDevice+0xf8>)
 8000862:	9301      	str	r3, [sp, #4]
 8000864:	2301      	movs	r3, #1
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <statusDevice+0xfc>)
 800086a:	221f      	movs	r2, #31
 800086c:	2187      	movs	r1, #135	; 0x87
 800086e:	200a      	movs	r0, #10
 8000870:	f003 fd90 	bl	8004394 <printnewtstr>
	}

	printnewtstr(10, 205, GREEN, &mono9x7, 1, "Versi 1.0.0");
 8000874:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <statusDevice+0x100>)
 8000876:	9301      	str	r3, [sp, #4]
 8000878:	2301      	movs	r3, #1
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <statusDevice+0x104>)
 800087e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000882:	21cd      	movs	r1, #205	; 0xcd
 8000884:	200a      	movs	r0, #10
 8000886:	f003 fd85 	bl	8004394 <printnewtstr>
	printnewtstr(10, 220, WHITE, &mono9x7, 1, "Support By:");
 800088a:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <statusDevice+0x108>)
 800088c:	9301      	str	r3, [sp, #4]
 800088e:	2301      	movs	r3, #1
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <statusDevice+0x104>)
 8000894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000898:	21dc      	movs	r1, #220	; 0xdc
 800089a:	200a      	movs	r0, #10
 800089c:	f003 fd7a 	bl	8004394 <printnewtstr>
	printnewtstr(10, 235, WHITE, &mono9x7, 1, "Ngonsul-IT");
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <statusDevice+0x10c>)
 80008a2:	9301      	str	r3, [sp, #4]
 80008a4:	2301      	movs	r3, #1
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <statusDevice+0x104>)
 80008aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ae:	21eb      	movs	r1, #235	; 0xeb
 80008b0:	200a      	movs	r0, #10
 80008b2:	f003 fd6f 	bl	8004394 <printnewtstr>
	printnewtstr(170, 235, BLUE, &mono9x7bold, 1, "Info>>");
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <statusDevice+0x110>)
 80008b8:	9301      	str	r3, [sp, #4]
 80008ba:	2301      	movs	r3, #1
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <statusDevice+0xfc>)
 80008c0:	221f      	movs	r2, #31
 80008c2:	21eb      	movs	r1, #235	; 0xeb
 80008c4:	20aa      	movs	r0, #170	; 0xaa
 80008c6:	f003 fd65 	bl	8004394 <printnewtstr>
	fanPemanasOff();
 80008ca:	f000 f89d 	bl	8000a08 <fanPemanasOff>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	08005f70 	.word	0x08005f70
 80008dc:	08008cd0 	.word	0x08008cd0
 80008e0:	08006034 	.word	0x08006034
 80008e4:	08007a24 	.word	0x08007a24
 80008e8:	08006044 	.word	0x08006044
 80008ec:	08006050 	.word	0x08006050
 80008f0:	08006058 	.word	0x08006058
 80008f4:	08006f9c 	.word	0x08006f9c
 80008f8:	08006004 	.word	0x08006004
 80008fc:	080067f0 	.word	0x080067f0
 8000900:	08006010 	.word	0x08006010
 8000904:	0800601c 	.word	0x0800601c
 8000908:	08006068 	.word	0x08006068

0800090c <info>:

void info(){
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af02      	add	r7, sp, #8
	PumAOn();
 8000912:	f000 f885 	bl	8000a20 <PumAOn>
	printnewtstr(10, 25, RED, &mono18x7bold, 1, "Mesin TSMilk");
 8000916:	4b2b      	ldr	r3, [pc, #172]	; (80009c4 <info+0xb8>)
 8000918:	9301      	str	r3, [sp, #4]
 800091a:	2301      	movs	r3, #1
 800091c:	9300      	str	r3, [sp, #0]
 800091e:	4b2a      	ldr	r3, [pc, #168]	; (80009c8 <info+0xbc>)
 8000920:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000924:	2119      	movs	r1, #25
 8000926:	200a      	movs	r0, #10
 8000928:	f003 fd34 	bl	8004394 <printnewtstr>
	printnewtstr(10, 55, BLUE, &mono12x7bold, 1, "Versi Mesin: 1.0.0");
 800092c:	4b27      	ldr	r3, [pc, #156]	; (80009cc <info+0xc0>)
 800092e:	9301      	str	r3, [sp, #4]
 8000930:	2301      	movs	r3, #1
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <info+0xc4>)
 8000936:	221f      	movs	r2, #31
 8000938:	2137      	movs	r1, #55	; 0x37
 800093a:	200a      	movs	r0, #10
 800093c:	f003 fd2a 	bl	8004394 <printnewtstr>
	printnewtstr(10, 85, BLUE, &mono12x7bold, 1, "Afiliasi:");
 8000940:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <info+0xc8>)
 8000942:	9301      	str	r3, [sp, #4]
 8000944:	2301      	movs	r3, #1
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <info+0xc4>)
 800094a:	221f      	movs	r2, #31
 800094c:	2155      	movs	r1, #85	; 0x55
 800094e:	200a      	movs	r0, #10
 8000950:	f003 fd20 	bl	8004394 <printnewtstr>
	printnewtstr(10, 105, BLUE, &mono9x7bold, 1, "1.Innovillage");
 8000954:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <info+0xcc>)
 8000956:	9301      	str	r3, [sp, #4]
 8000958:	2301      	movs	r3, #1
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <info+0xd0>)
 800095e:	221f      	movs	r2, #31
 8000960:	2169      	movs	r1, #105	; 0x69
 8000962:	200a      	movs	r0, #10
 8000964:	f003 fd16 	bl	8004394 <printnewtstr>
	printnewtstr(10, 125, BLUE, &mono9x7bold, 1, "2.Telkom University");
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <info+0xd4>)
 800096a:	9301      	str	r3, [sp, #4]
 800096c:	2301      	movs	r3, #1
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <info+0xd0>)
 8000972:	221f      	movs	r2, #31
 8000974:	217d      	movs	r1, #125	; 0x7d
 8000976:	200a      	movs	r0, #10
 8000978:	f003 fd0c 	bl	8004394 <printnewtstr>
	printnewtstr(10, 145, BLUE, &mono9x7bold, 1, "3.Ngonsul-IT");
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <info+0xd8>)
 800097e:	9301      	str	r3, [sp, #4]
 8000980:	2301      	movs	r3, #1
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	4b15      	ldr	r3, [pc, #84]	; (80009dc <info+0xd0>)
 8000986:	221f      	movs	r2, #31
 8000988:	2191      	movs	r1, #145	; 0x91
 800098a:	200a      	movs	r0, #10
 800098c:	f003 fd02 	bl	8004394 <printnewtstr>
	printnewtstr(10, 175, BLUE, &mono9x7bold, 1, "Temukan Website di:");
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <info+0xdc>)
 8000992:	9301      	str	r3, [sp, #4]
 8000994:	2301      	movs	r3, #1
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	4b10      	ldr	r3, [pc, #64]	; (80009dc <info+0xd0>)
 800099a:	221f      	movs	r2, #31
 800099c:	21af      	movs	r1, #175	; 0xaf
 800099e:	200a      	movs	r0, #10
 80009a0:	f003 fcf8 	bl	8004394 <printnewtstr>
	printnewtstr(10, 200, WHITE, &mono9x7bold, 1, "www.ngonsul.com");
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <info+0xe0>)
 80009a6:	9301      	str	r3, [sp, #4]
 80009a8:	2301      	movs	r3, #1
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <info+0xd0>)
 80009ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009b2:	21c8      	movs	r1, #200	; 0xc8
 80009b4:	200a      	movs	r0, #10
 80009b6:	f003 fced 	bl	8004394 <printnewtstr>
	PumBOn();
 80009ba:	f000 f83d 	bl	8000a38 <PumBOn>
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	08005f70 	.word	0x08005f70
 80009c8:	08008cd0 	.word	0x08008cd0
 80009cc:	08006070 	.word	0x08006070
 80009d0:	08007a24 	.word	0x08007a24
 80009d4:	08006084 	.word	0x08006084
 80009d8:	08006090 	.word	0x08006090
 80009dc:	08006f9c 	.word	0x08006f9c
 80009e0:	080060a0 	.word	0x080060a0
 80009e4:	080060b4 	.word	0x080060b4
 80009e8:	080060c4 	.word	0x080060c4
 80009ec:	080060d8 	.word	0x080060d8

080009f0 <fanPemanasOn>:

void fanPemanasOn(){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RL_Port, RL1, 1);
 80009f4:	2201      	movs	r2, #1
 80009f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009fa:	4802      	ldr	r0, [pc, #8]	; (8000a04 <fanPemanasOn+0x14>)
 80009fc:	f004 fb48 	bl	8005090 <HAL_GPIO_WritePin>
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40020400 	.word	0x40020400

08000a08 <fanPemanasOff>:
void fanPemanasOff(){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RL_Port, RL1, 0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a12:	4802      	ldr	r0, [pc, #8]	; (8000a1c <fanPemanasOff+0x14>)
 8000a14:	f004 fb3c 	bl	8005090 <HAL_GPIO_WritePin>
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40020400 	.word	0x40020400

08000a20 <PumAOn>:
void PumAOn(){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RL_Port, RL2, 1);
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a2a:	4802      	ldr	r0, [pc, #8]	; (8000a34 <PumAOn+0x14>)
 8000a2c:	f004 fb30 	bl	8005090 <HAL_GPIO_WritePin>
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40020400 	.word	0x40020400

08000a38 <PumBOn>:
void PumAOff(){
	HAL_GPIO_WritePin(RL_Port, RL2, 0);
}
void PumBOn(){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RL_Port, RL3, 1);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a42:	4802      	ldr	r0, [pc, #8]	; (8000a4c <PumBOn+0x14>)
 8000a44:	f004 fb24 	bl	8005090 <HAL_GPIO_WritePin>
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40020400 	.word	0x40020400

08000a50 <fanMicOn>:
void PumBOff(){
	HAL_GPIO_WritePin(RL_Port, RL3, 0);
}
void fanMicOn(){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RL_Port, RL4, 1);
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a5a:	4802      	ldr	r0, [pc, #8]	; (8000a64 <fanMicOn+0x14>)
 8000a5c:	f004 fb18 	bl	8005090 <HAL_GPIO_WritePin>
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40020400 	.word	0x40020400

08000a68 <fanMicOff>:
void fanMicOff(){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RL_Port, RL4, 0);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a72:	4802      	ldr	r0, [pc, #8]	; (8000a7c <fanMicOff+0x14>)
 8000a74:	f004 fb0c 	bl	8005090 <HAL_GPIO_WritePin>
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40020400 	.word	0x40020400

08000a80 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b094      	sub	sp, #80	; 0x50
 8000a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a86:	f107 0320 	add.w	r3, r7, #32
 8000a8a:	2230      	movs	r2, #48	; 0x30
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f005 fa36 	bl	8005f00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <SystemClock_Config+0xc8>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	4a26      	ldr	r2, [pc, #152]	; (8000b48 <SystemClock_Config+0xc8>)
 8000aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab4:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <SystemClock_Config+0xc8>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <SystemClock_Config+0xcc>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a20      	ldr	r2, [pc, #128]	; (8000b4c <SystemClock_Config+0xcc>)
 8000aca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ace:	6013      	str	r3, [r2, #0]
 8000ad0:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <SystemClock_Config+0xcc>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000adc:	2302      	movs	r3, #2
 8000ade:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae4:	2310      	movs	r3, #16
 8000ae6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aec:	2300      	movs	r3, #0
 8000aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000af0:	2308      	movs	r3, #8
 8000af2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000af4:	2364      	movs	r3, #100	; 0x64
 8000af6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000af8:	2302      	movs	r3, #2
 8000afa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000afc:	2304      	movs	r3, #4
 8000afe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b00:	f107 0320 	add.w	r3, r7, #32
 8000b04:	4618      	mov	r0, r3
 8000b06:	f004 fadd 	bl	80050c4 <HAL_RCC_OscConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b10:	f000 f94a 	bl	8000da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b14:	230f      	movs	r3, #15
 8000b16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b2a:	f107 030c 	add.w	r3, r7, #12
 8000b2e:	2103      	movs	r1, #3
 8000b30:	4618      	mov	r0, r3
 8000b32:	f004 fd3f 	bl	80055b4 <HAL_RCC_ClockConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b3c:	f000 f934 	bl	8000da8 <Error_Handler>
  }
}
 8000b40:	bf00      	nop
 8000b42:	3750      	adds	r7, #80	; 0x50
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40007000 	.word	0x40007000

08000b50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b56:	463b      	mov	r3, r7
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b62:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <MX_ADC1_Init+0x98>)
 8000b64:	4a21      	ldr	r2, [pc, #132]	; (8000bec <MX_ADC1_Init+0x9c>)
 8000b66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b68:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <MX_ADC1_Init+0x98>)
 8000b6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b6e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b70:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <MX_ADC1_Init+0x98>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b76:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <MX_ADC1_Init+0x98>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <MX_ADC1_Init+0x98>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b82:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <MX_ADC1_Init+0x98>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_ADC1_Init+0x98>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_ADC1_Init+0x98>)
 8000b92:	4a17      	ldr	r2, [pc, #92]	; (8000bf0 <MX_ADC1_Init+0xa0>)
 8000b94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_ADC1_Init+0x98>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_ADC1_Init+0x98>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_ADC1_Init+0x98>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_ADC1_Init+0x98>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bb0:	480d      	ldr	r0, [pc, #52]	; (8000be8 <MX_ADC1_Init+0x98>)
 8000bb2:	f003 fd5d 	bl	8004670 <HAL_ADC_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000bbc:	f000 f8f4 	bl	8000da8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000bc0:	2307      	movs	r3, #7
 8000bc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bcc:	463b      	mov	r3, r7
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_ADC1_Init+0x98>)
 8000bd2:	f003 fd91 	bl	80046f8 <HAL_ADC_ConfigChannel>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000bdc:	f000 f8e4 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000038 	.word	0x20000038
 8000bec:	40012000 	.word	0x40012000
 8000bf0:	0f000001 	.word	0x0f000001

08000bf4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_CRC_Init+0x20>)
 8000bfa:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <MX_CRC_Init+0x24>)
 8000bfc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_CRC_Init+0x20>)
 8000c00:	f004 f88d 	bl	8004d1e <HAL_CRC_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000c0a:	f000 f8cd 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000080 	.word	0x20000080
 8000c18:	40023000 	.word	0x40023000

08000c1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c22:	f107 0308 	add.w	r3, r7, #8
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c30:	463b      	mov	r3, r7
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c38:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <MX_TIM1_Init+0x98>)
 8000c3a:	4a1f      	ldr	r2, [pc, #124]	; (8000cb8 <MX_TIM1_Init+0x9c>)
 8000c3c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <MX_TIM1_Init+0x98>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <MX_TIM1_Init+0x98>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <MX_TIM1_Init+0x98>)
 8000c4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c50:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <MX_TIM1_Init+0x98>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <MX_TIM1_Init+0x98>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <MX_TIM1_Init+0x98>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c64:	4813      	ldr	r0, [pc, #76]	; (8000cb4 <MX_TIM1_Init+0x98>)
 8000c66:	f004 fe51 	bl	800590c <HAL_TIM_Base_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000c70:	f000 f89a 	bl	8000da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	4619      	mov	r1, r3
 8000c80:	480c      	ldr	r0, [pc, #48]	; (8000cb4 <MX_TIM1_Init+0x98>)
 8000c82:	f004 feed 	bl	8005a60 <HAL_TIM_ConfigClockSource>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000c8c:	f000 f88c 	bl	8000da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c90:	2300      	movs	r3, #0
 8000c92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c98:	463b      	mov	r3, r7
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_TIM1_Init+0x98>)
 8000c9e:	f005 f8c1 	bl	8005e24 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ca8:	f000 f87e 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000088 	.word	0x20000088
 8000cb8:	40010000 	.word	0x40010000

08000cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	f107 030c 	add.w	r3, r7, #12
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	4b31      	ldr	r3, [pc, #196]	; (8000d9c <MX_GPIO_Init+0xe0>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a30      	ldr	r2, [pc, #192]	; (8000d9c <MX_GPIO_Init+0xe0>)
 8000cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b2e      	ldr	r3, [pc, #184]	; (8000d9c <MX_GPIO_Init+0xe0>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	4b2a      	ldr	r3, [pc, #168]	; (8000d9c <MX_GPIO_Init+0xe0>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a29      	ldr	r2, [pc, #164]	; (8000d9c <MX_GPIO_Init+0xe0>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b27      	ldr	r3, [pc, #156]	; (8000d9c <MX_GPIO_Init+0xe0>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	603b      	str	r3, [r7, #0]
 8000d0e:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <MX_GPIO_Init+0xe0>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a22      	ldr	r2, [pc, #136]	; (8000d9c <MX_GPIO_Init+0xe0>)
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <MX_GPIO_Init+0xe0>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|LCD_CS_Pin|LCD_RS_Pin|LCD_WR_Pin
 8000d26:	2200      	movs	r2, #0
 8000d28:	f248 412f 	movw	r1, #33839	; 0x842f
 8000d2c:	481c      	ldr	r0, [pc, #112]	; (8000da0 <MX_GPIO_Init+0xe4>)
 8000d2e:	f004 f9af 	bl	8005090 <HAL_GPIO_WritePin>
                          |LCD_D7_Pin|PWM_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D0_Pin|LCD_D1_Pin|RL1_Pin|RL2_Pin
 8000d32:	2200      	movs	r2, #0
 8000d34:	f24f 017b 	movw	r1, #61563	; 0xf07b
 8000d38:	481a      	ldr	r0, [pc, #104]	; (8000da4 <MX_GPIO_Init+0xe8>)
 8000d3a:	f004 f9a9 	bl	8005090 <HAL_GPIO_WritePin>
                          |RL3_Pin|RL4_Pin|LCD_D3_Pin|LCD_D4_Pin
                          |LCD_D5_Pin|LCD_D6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_RST_Pin LCD_CS_Pin LCD_RS_Pin LCD_WR_Pin
                           LCD_D7_Pin PWM_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_CS_Pin|LCD_RS_Pin|LCD_WR_Pin
 8000d3e:	f248 432f 	movw	r3, #33839	; 0x842f
 8000d42:	60fb      	str	r3, [r7, #12]
                          |LCD_D7_Pin|PWM_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d44:	2301      	movs	r3, #1
 8000d46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	4619      	mov	r1, r3
 8000d56:	4812      	ldr	r0, [pc, #72]	; (8000da0 <MX_GPIO_Init+0xe4>)
 8000d58:	f003 fffe 	bl	8004d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin TombolKanan_Pin TombolKiri_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|TombolKanan_Pin|TombolKiri_Pin;
 8000d5c:	f44f 7344 	mov.w	r3, #784	; 0x310
 8000d60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 030c 	add.w	r3, r7, #12
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480b      	ldr	r0, [pc, #44]	; (8000da0 <MX_GPIO_Init+0xe4>)
 8000d72:	f003 fff1 	bl	8004d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D0_Pin LCD_D1_Pin RL1_Pin RL2_Pin
                           RL3_Pin RL4_Pin LCD_D3_Pin LCD_D4_Pin
                           LCD_D5_Pin LCD_D6_Pin */
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|RL1_Pin|RL2_Pin
 8000d76:	f24f 037b 	movw	r3, #61563	; 0xf07b
 8000d7a:	60fb      	str	r3, [r7, #12]
                          |RL3_Pin|RL4_Pin|LCD_D3_Pin|LCD_D4_Pin
                          |LCD_D5_Pin|LCD_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4805      	ldr	r0, [pc, #20]	; (8000da4 <MX_GPIO_Init+0xe8>)
 8000d90:	f003 ffe2 	bl	8004d58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d94:	bf00      	nop
 8000d96:	3720      	adds	r7, #32
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020000 	.word	0x40020000
 8000da4:	40020400 	.word	0x40020400

08000da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dac:	b672      	cpsid	i
}
 8000dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <Error_Handler+0x8>
	...

08000db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <HAL_MspInit+0x4c>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	4a0f      	ldr	r2, [pc, #60]	; (8000e00 <HAL_MspInit+0x4c>)
 8000dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dca:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <HAL_MspInit+0x4c>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <HAL_MspInit+0x4c>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	4a08      	ldr	r2, [pc, #32]	; (8000e00 <HAL_MspInit+0x4c>)
 8000de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de4:	6413      	str	r3, [r2, #64]	; 0x40
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_MspInit+0x4c>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800

08000e04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a17      	ldr	r2, [pc, #92]	; (8000e80 <HAL_ADC_MspInit+0x7c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d127      	bne.n	8000e76 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <HAL_ADC_MspInit+0x80>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	4a15      	ldr	r2, [pc, #84]	; (8000e84 <HAL_ADC_MspInit+0x80>)
 8000e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e34:	6453      	str	r3, [r2, #68]	; 0x44
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <HAL_ADC_MspInit+0x80>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <HAL_ADC_MspInit+0x80>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <HAL_ADC_MspInit+0x80>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <HAL_ADC_MspInit+0x80>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = PT100_RTD_Pin;
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e62:	2303      	movs	r3, #3
 8000e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PT100_RTD_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4805      	ldr	r0, [pc, #20]	; (8000e88 <HAL_ADC_MspInit+0x84>)
 8000e72:	f003 ff71 	bl	8004d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	; 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40012000 	.word	0x40012000
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020000 	.word	0x40020000

08000e8c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <HAL_CRC_MspInit+0x3c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d10d      	bne.n	8000eba <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <HAL_CRC_MspInit+0x40>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a09      	ldr	r2, [pc, #36]	; (8000ecc <HAL_CRC_MspInit+0x40>)
 8000ea8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <HAL_CRC_MspInit+0x40>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000eba:	bf00      	nop
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40023000 	.word	0x40023000
 8000ecc:	40023800 	.word	0x40023800

08000ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <HAL_TIM_Base_MspInit+0x3c>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d10d      	bne.n	8000efe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_TIM_Base_MspInit+0x40>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	4a09      	ldr	r2, [pc, #36]	; (8000f10 <HAL_TIM_Base_MspInit+0x40>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef2:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <HAL_TIM_Base_MspInit+0x40>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000efe:	bf00      	nop
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	40010000 	.word	0x40010000
 8000f10:	40023800 	.word	0x40023800

08000f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <NMI_Handler+0x4>

08000f1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <HardFault_Handler+0x4>

08000f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <MemManage_Handler+0x4>

08000f26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <BusFault_Handler+0x4>

08000f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <UsageFault_Handler+0x4>

08000f32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f60:	f003 fb42 	bl	80045e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <SystemInit+0x20>)
 8000f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <SystemInit+0x20>)
 8000f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <delay>:


/****************** delay in microseconds ***********************/
extern TIM_HandleTypeDef htim1;
void delay (uint32_t time)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <delay+0x2c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8000f9c:	bf00      	nop
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <delay+0x2c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d8f9      	bhi.n	8000f9e <delay+0x12>
}
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	20000088 	.word	0x20000088

08000fbc <PIN_LOW>:

/********************************************** NO CHNAGES AFTER THIS ************************************************/


void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000fc8:	887b      	ldrh	r3, [r7, #2]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	4619      	mov	r1, r3
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f004 f85e 	bl	8005090 <HAL_GPIO_WritePin>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <PIN_HIGH>:

void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000fe8:	887b      	ldrh	r3, [r7, #2]
 8000fea:	2201      	movs	r2, #1
 8000fec:	4619      	mov	r1, r3
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f004 f84e 	bl	8005090 <HAL_GPIO_WritePin>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <PIN_INPUT>:

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8001008:	887b      	ldrh	r3, [r7, #2]
 800100a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001010:	2301      	movs	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	4619      	mov	r1, r3
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f003 fe9c 	bl	8004d58 <HAL_GPIO_Init>
}
 8001020:	bf00      	nop
 8001022:	3720      	adds	r7, #32
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	807b      	strh	r3, [r7, #2]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8001034:	887b      	ldrh	r3, [r7, #2]
 8001036:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001038:	2301      	movs	r3, #1
 800103a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001040:	2302      	movs	r3, #2
 8001042:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	4619      	mov	r1, r3
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f003 fe84 	bl	8004d58 <HAL_GPIO_Init>
}
 8001050:	bf00      	nop
 8001052:	3720      	adds	r7, #32
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <width+0x14>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000004 	.word	0x20000004

08001070 <height>:

uint16_t height(void)
{ return _height; }
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <height+0x14>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000006 	.word	0x20000006

08001088 <color565_to_555>:
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h);

void setReadDir (void);
void setWriteDir (void);
static uint8_t done_reset, is8347, is555, is9797;
static uint16_t color565_to_555(uint16_t color) {
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
 8001092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001096:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800109a:	b21a      	sxth	r2, r3
 800109c:	88fb      	ldrh	r3, [r7, #6]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	4313      	orrs	r3, r2
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	b29b      	uxth	r3, r3
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <color555_to_565>:
static uint16_t color555_to_565(uint16_t color) {
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x0400) >> 5) | ((color & 0x3F) >> 1); //extend Green LSB
 80010d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010da:	b21a      	sxth	r2, r3
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	115b      	asrs	r3, r3, #5
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	f003 0320 	and.w	r3, r3, #32
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	105b      	asrs	r3, r3, #1
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	f003 031f 	and.w	r3, r3, #31
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b21b      	sxth	r3, r3
 80010fc:	b29b      	uxth	r3, r3
}
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <color565_to_r>:
static uint8_t color565_to_r(uint16_t color) {
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 8001114:	88fb      	ldrh	r3, [r7, #6]
 8001116:	121b      	asrs	r3, r3, #8
 8001118:	b2db      	uxtb	r3, r3
 800111a:	f023 0307 	bic.w	r3, r3, #7
 800111e:	b2db      	uxtb	r3, r3
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <color565_to_g>:
static uint8_t color565_to_g(uint16_t color) {
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	10db      	asrs	r3, r3, #3
 800113a:	b2db      	uxtb	r3, r3
 800113c:	f023 0303 	bic.w	r3, r3, #3
 8001140:	b2db      	uxtb	r3, r3
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <color565_to_b>:
static uint8_t color565_to_b(uint16_t color) {
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	b2db      	uxtb	r3, r3
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <color565>:

uint16_t color565(uint8_t r, uint8_t g, uint8_t b) { return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3); }
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	71fb      	strb	r3, [r7, #7]
 8001174:	460b      	mov	r3, r1
 8001176:	71bb      	strb	r3, [r7, #6]
 8001178:	4613      	mov	r3, r2
 800117a:	717b      	strb	r3, [r7, #5]
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	b21b      	sxth	r3, r3
 8001182:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001186:	f023 0307 	bic.w	r3, r3, #7
 800118a:	b21a      	sxth	r2, r3
 800118c:	79bb      	ldrb	r3, [r7, #6]
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	b21b      	sxth	r3, r3
 8001192:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001196:	b21b      	sxth	r3, r3
 8001198:	4313      	orrs	r3, r2
 800119a:	b21a      	sxth	r2, r3
 800119c:	797b      	ldrb	r3, [r7, #5]
 800119e:	08db      	lsrs	r3, r3, #3
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <readPixel>:
uint16_t readPixel(int16_t x, int16_t y) { uint16_t color; readGRAM(x, y, &color, 1, 1); return color; }
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b086      	sub	sp, #24
 80011ba:	af02      	add	r7, sp, #8
 80011bc:	4603      	mov	r3, r0
 80011be:	460a      	mov	r2, r1
 80011c0:	80fb      	strh	r3, [r7, #6]
 80011c2:	4613      	mov	r3, r2
 80011c4:	80bb      	strh	r3, [r7, #4]
 80011c6:	f107 020e 	add.w	r2, r7, #14
 80011ca:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80011ce:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80011d2:	2301      	movs	r3, #1
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2301      	movs	r3, #1
 80011d8:	f001 fa64 	bl	80026a4 <readGRAM>
 80011dc:	89fb      	ldrh	r3, [r7, #14]
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	460a      	mov	r2, r1
 80011f0:	80fb      	strh	r3, [r7, #6]
 80011f2:	4613      	mov	r3, r2
 80011f4:	80bb      	strh	r3, [r7, #4]
 80011f6:	88ba      	ldrh	r2, [r7, #4]
 80011f8:	88fb      	ldrh	r3, [r7, #6]
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 f903 	bl	8001408 <writecmddata>
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <pushCommand>:

static void init_table(const void *table, int16_t size);

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block);

void pushCommand(uint16_t cmd, uint8_t * block, int8_t N) { WriteCmdParamN(cmd, N, block); }
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	4603      	mov	r3, r0
 8001212:	6039      	str	r1, [r7, #0]
 8001214:	80fb      	strh	r3, [r7, #6]
 8001216:	4613      	mov	r3, r2
 8001218:	717b      	strb	r3, [r7, #5]
 800121a:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800121e:	88fb      	ldrh	r3, [r7, #6]
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f9aa 	bl	800157c <WriteCmdParamN>
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <startWrite>:

uint16_t _lcd_ID, _lcd_rev, _lcd_madctl, _lcd_drivOut, _MC, _MP, _MW, _SC, _EC, _SP, _EP;

//extern GFXfont *gfxFont;

void startWrite() {}
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <endWrite>:
void endWrite() {}
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <setReadDir>:

void setReadDir (void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 8001250:	2101      	movs	r1, #1
 8001252:	4811      	ldr	r0, [pc, #68]	; (8001298 <setReadDir+0x4c>)
 8001254:	f7ff fed2 	bl	8000ffc <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 8001258:	2102      	movs	r1, #2
 800125a:	480f      	ldr	r0, [pc, #60]	; (8001298 <setReadDir+0x4c>)
 800125c:	f7ff fece 	bl	8000ffc <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 8001260:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001264:	480d      	ldr	r0, [pc, #52]	; (800129c <setReadDir+0x50>)
 8001266:	f7ff fec9 	bl	8000ffc <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 800126a:	2108      	movs	r1, #8
 800126c:	480a      	ldr	r0, [pc, #40]	; (8001298 <setReadDir+0x4c>)
 800126e:	f7ff fec5 	bl	8000ffc <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 8001272:	2110      	movs	r1, #16
 8001274:	4808      	ldr	r0, [pc, #32]	; (8001298 <setReadDir+0x4c>)
 8001276:	f7ff fec1 	bl	8000ffc <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 800127a:	2120      	movs	r1, #32
 800127c:	4806      	ldr	r0, [pc, #24]	; (8001298 <setReadDir+0x4c>)
 800127e:	f7ff febd 	bl	8000ffc <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 8001282:	2140      	movs	r1, #64	; 0x40
 8001284:	4804      	ldr	r0, [pc, #16]	; (8001298 <setReadDir+0x4c>)
 8001286:	f7ff feb9 	bl	8000ffc <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 800128a:	2120      	movs	r1, #32
 800128c:	4803      	ldr	r0, [pc, #12]	; (800129c <setReadDir+0x50>)
 800128e:	f7ff feb5 	bl	8000ffc <PIN_INPUT>
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40020400 	.word	0x40020400
 800129c:	40020000 	.word	0x40020000

080012a0 <setWriteDir>:

void setWriteDir (void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 80012a4:	2101      	movs	r1, #1
 80012a6:	4811      	ldr	r0, [pc, #68]	; (80012ec <setWriteDir+0x4c>)
 80012a8:	f7ff febe 	bl	8001028 <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 80012ac:	2102      	movs	r1, #2
 80012ae:	480f      	ldr	r0, [pc, #60]	; (80012ec <setWriteDir+0x4c>)
 80012b0:	f7ff feba 	bl	8001028 <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 80012b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012b8:	480d      	ldr	r0, [pc, #52]	; (80012f0 <setWriteDir+0x50>)
 80012ba:	f7ff feb5 	bl	8001028 <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 80012be:	2108      	movs	r1, #8
 80012c0:	480a      	ldr	r0, [pc, #40]	; (80012ec <setWriteDir+0x4c>)
 80012c2:	f7ff feb1 	bl	8001028 <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 80012c6:	2110      	movs	r1, #16
 80012c8:	4808      	ldr	r0, [pc, #32]	; (80012ec <setWriteDir+0x4c>)
 80012ca:	f7ff fead 	bl	8001028 <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 80012ce:	2120      	movs	r1, #32
 80012d0:	4806      	ldr	r0, [pc, #24]	; (80012ec <setWriteDir+0x4c>)
 80012d2:	f7ff fea9 	bl	8001028 <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 80012d6:	2140      	movs	r1, #64	; 0x40
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <setWriteDir+0x4c>)
 80012da:	f7ff fea5 	bl	8001028 <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 80012de:	2120      	movs	r1, #32
 80012e0:	4803      	ldr	r0, [pc, #12]	; (80012f0 <setWriteDir+0x50>)
 80012e2:	f7ff fea1 	bl	8001028 <PIN_OUTPUT>
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40020400 	.word	0x40020400
 80012f0:	40020000 	.word	0x40020000

080012f4 <write24>:
    }
    CS_IDLE;
}

static void write24(uint16_t color)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	80fb      	strh	r3, [r7, #6]
    uint8_t r = color565_to_r(color);
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff02 	bl	800110a <color565_to_r>
 8001306:	4603      	mov	r3, r0
 8001308:	73fb      	strb	r3, [r7, #15]
    uint8_t g = color565_to_g(color);
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff0d 	bl	800112c <color565_to_g>
 8001312:	4603      	mov	r3, r0
 8001314:	73bb      	strb	r3, [r7, #14]
    uint8_t b = color565_to_b(color);
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff18 	bl	800114e <color565_to_b>
 800131e:	4603      	mov	r3, r0
 8001320:	737b      	strb	r3, [r7, #13]
    write8(r);
 8001322:	4b36      	ldr	r3, [pc, #216]	; (80013fc <write24+0x108>)
 8001324:	4a36      	ldr	r2, [pc, #216]	; (8001400 <write24+0x10c>)
 8001326:	619a      	str	r2, [r3, #24]
 8001328:	4b36      	ldr	r3, [pc, #216]	; (8001404 <write24+0x110>)
 800132a:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 800132e:	619a      	str	r2, [r3, #24]
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	035b      	lsls	r3, r3, #13
 8001334:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	109b      	asrs	r3, r3, #2
 800133c:	f003 0320 	and.w	r3, r3, #32
 8001340:	431a      	orrs	r2, r3
 8001342:	4b2e      	ldr	r3, [pc, #184]	; (80013fc <write24+0x108>)
 8001344:	619a      	str	r2, [r3, #24]
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	4a2e      	ldr	r2, [pc, #184]	; (8001404 <write24+0x110>)
 800134a:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 800134e:	6193      	str	r3, [r2, #24]
 8001350:	2102      	movs	r1, #2
 8001352:	482a      	ldr	r0, [pc, #168]	; (80013fc <write24+0x108>)
 8001354:	f7ff fe32 	bl	8000fbc <PIN_LOW>
 8001358:	2102      	movs	r1, #2
 800135a:	4828      	ldr	r0, [pc, #160]	; (80013fc <write24+0x108>)
 800135c:	f7ff fe3e 	bl	8000fdc <PIN_HIGH>
 8001360:	2102      	movs	r1, #2
 8001362:	4826      	ldr	r0, [pc, #152]	; (80013fc <write24+0x108>)
 8001364:	f7ff fe3a 	bl	8000fdc <PIN_HIGH>
    write8(g);
 8001368:	4b24      	ldr	r3, [pc, #144]	; (80013fc <write24+0x108>)
 800136a:	4a25      	ldr	r2, [pc, #148]	; (8001400 <write24+0x10c>)
 800136c:	619a      	str	r2, [r3, #24]
 800136e:	4b25      	ldr	r3, [pc, #148]	; (8001404 <write24+0x110>)
 8001370:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8001374:	619a      	str	r2, [r3, #24]
 8001376:	7bbb      	ldrb	r3, [r7, #14]
 8001378:	035b      	lsls	r3, r3, #13
 800137a:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 800137e:	7bbb      	ldrb	r3, [r7, #14]
 8001380:	109b      	asrs	r3, r3, #2
 8001382:	f003 0320 	and.w	r3, r3, #32
 8001386:	431a      	orrs	r2, r3
 8001388:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <write24+0x108>)
 800138a:	619a      	str	r2, [r3, #24]
 800138c:	7bbb      	ldrb	r3, [r7, #14]
 800138e:	4a1d      	ldr	r2, [pc, #116]	; (8001404 <write24+0x110>)
 8001390:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8001394:	6193      	str	r3, [r2, #24]
 8001396:	2102      	movs	r1, #2
 8001398:	4818      	ldr	r0, [pc, #96]	; (80013fc <write24+0x108>)
 800139a:	f7ff fe0f 	bl	8000fbc <PIN_LOW>
 800139e:	2102      	movs	r1, #2
 80013a0:	4816      	ldr	r0, [pc, #88]	; (80013fc <write24+0x108>)
 80013a2:	f7ff fe1b 	bl	8000fdc <PIN_HIGH>
 80013a6:	2102      	movs	r1, #2
 80013a8:	4814      	ldr	r0, [pc, #80]	; (80013fc <write24+0x108>)
 80013aa:	f7ff fe17 	bl	8000fdc <PIN_HIGH>
    write8(b);
 80013ae:	4b13      	ldr	r3, [pc, #76]	; (80013fc <write24+0x108>)
 80013b0:	4a13      	ldr	r2, [pc, #76]	; (8001400 <write24+0x10c>)
 80013b2:	619a      	str	r2, [r3, #24]
 80013b4:	4b13      	ldr	r3, [pc, #76]	; (8001404 <write24+0x110>)
 80013b6:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 80013ba:	619a      	str	r2, [r3, #24]
 80013bc:	7b7b      	ldrb	r3, [r7, #13]
 80013be:	035b      	lsls	r3, r3, #13
 80013c0:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 80013c4:	7b7b      	ldrb	r3, [r7, #13]
 80013c6:	109b      	asrs	r3, r3, #2
 80013c8:	f003 0320 	and.w	r3, r3, #32
 80013cc:	431a      	orrs	r2, r3
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <write24+0x108>)
 80013d0:	619a      	str	r2, [r3, #24]
 80013d2:	7b7b      	ldrb	r3, [r7, #13]
 80013d4:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <write24+0x110>)
 80013d6:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 80013da:	6193      	str	r3, [r2, #24]
 80013dc:	2102      	movs	r1, #2
 80013de:	4807      	ldr	r0, [pc, #28]	; (80013fc <write24+0x108>)
 80013e0:	f7ff fdec 	bl	8000fbc <PIN_LOW>
 80013e4:	2102      	movs	r1, #2
 80013e6:	4805      	ldr	r0, [pc, #20]	; (80013fc <write24+0x108>)
 80013e8:	f7ff fdf8 	bl	8000fdc <PIN_HIGH>
 80013ec:	2102      	movs	r1, #2
 80013ee:	4803      	ldr	r0, [pc, #12]	; (80013fc <write24+0x108>)
 80013f0:	f7ff fdf4 	bl	8000fdc <PIN_HIGH>
}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40020000 	.word	0x40020000
 8001400:	80200000 	.word	0x80200000
 8001404:	40020400 	.word	0x40020400

08001408 <writecmddata>:

static void writecmddata(uint16_t cmd, uint16_t dat)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	460a      	mov	r2, r1
 8001412:	80fb      	strh	r3, [r7, #6]
 8001414:	4613      	mov	r3, r2
 8001416:	80bb      	strh	r3, [r7, #4]
    CS_ACTIVE;
 8001418:	2108      	movs	r1, #8
 800141a:	4855      	ldr	r0, [pc, #340]	; (8001570 <writecmddata+0x168>)
 800141c:	f7ff fdce 	bl	8000fbc <PIN_LOW>
    WriteCmd(cmd);
 8001420:	2104      	movs	r1, #4
 8001422:	4853      	ldr	r0, [pc, #332]	; (8001570 <writecmddata+0x168>)
 8001424:	f7ff fdca 	bl	8000fbc <PIN_LOW>
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	0a1b      	lsrs	r3, r3, #8
 800142c:	b29b      	uxth	r3, r3
 800142e:	73fb      	strb	r3, [r7, #15]
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	73bb      	strb	r3, [r7, #14]
 8001434:	4b4e      	ldr	r3, [pc, #312]	; (8001570 <writecmddata+0x168>)
 8001436:	4a4f      	ldr	r2, [pc, #316]	; (8001574 <writecmddata+0x16c>)
 8001438:	619a      	str	r2, [r3, #24]
 800143a:	4b4f      	ldr	r3, [pc, #316]	; (8001578 <writecmddata+0x170>)
 800143c:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8001440:	619a      	str	r2, [r3, #24]
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	035b      	lsls	r3, r3, #13
 8001446:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	109b      	asrs	r3, r3, #2
 800144e:	f003 0320 	and.w	r3, r3, #32
 8001452:	431a      	orrs	r2, r3
 8001454:	4b46      	ldr	r3, [pc, #280]	; (8001570 <writecmddata+0x168>)
 8001456:	619a      	str	r2, [r3, #24]
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	4a47      	ldr	r2, [pc, #284]	; (8001578 <writecmddata+0x170>)
 800145c:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8001460:	6193      	str	r3, [r2, #24]
 8001462:	2102      	movs	r1, #2
 8001464:	4842      	ldr	r0, [pc, #264]	; (8001570 <writecmddata+0x168>)
 8001466:	f7ff fda9 	bl	8000fbc <PIN_LOW>
 800146a:	2102      	movs	r1, #2
 800146c:	4840      	ldr	r0, [pc, #256]	; (8001570 <writecmddata+0x168>)
 800146e:	f7ff fdb5 	bl	8000fdc <PIN_HIGH>
 8001472:	2102      	movs	r1, #2
 8001474:	483e      	ldr	r0, [pc, #248]	; (8001570 <writecmddata+0x168>)
 8001476:	f7ff fdb1 	bl	8000fdc <PIN_HIGH>
 800147a:	4b3d      	ldr	r3, [pc, #244]	; (8001570 <writecmddata+0x168>)
 800147c:	4a3d      	ldr	r2, [pc, #244]	; (8001574 <writecmddata+0x16c>)
 800147e:	619a      	str	r2, [r3, #24]
 8001480:	4b3d      	ldr	r3, [pc, #244]	; (8001578 <writecmddata+0x170>)
 8001482:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8001486:	619a      	str	r2, [r3, #24]
 8001488:	7bbb      	ldrb	r3, [r7, #14]
 800148a:	035b      	lsls	r3, r3, #13
 800148c:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8001490:	7bbb      	ldrb	r3, [r7, #14]
 8001492:	109b      	asrs	r3, r3, #2
 8001494:	f003 0320 	and.w	r3, r3, #32
 8001498:	431a      	orrs	r2, r3
 800149a:	4b35      	ldr	r3, [pc, #212]	; (8001570 <writecmddata+0x168>)
 800149c:	619a      	str	r2, [r3, #24]
 800149e:	7bbb      	ldrb	r3, [r7, #14]
 80014a0:	4a35      	ldr	r2, [pc, #212]	; (8001578 <writecmddata+0x170>)
 80014a2:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 80014a6:	6193      	str	r3, [r2, #24]
 80014a8:	2102      	movs	r1, #2
 80014aa:	4831      	ldr	r0, [pc, #196]	; (8001570 <writecmddata+0x168>)
 80014ac:	f7ff fd86 	bl	8000fbc <PIN_LOW>
 80014b0:	2102      	movs	r1, #2
 80014b2:	482f      	ldr	r0, [pc, #188]	; (8001570 <writecmddata+0x168>)
 80014b4:	f7ff fd92 	bl	8000fdc <PIN_HIGH>
 80014b8:	2102      	movs	r1, #2
 80014ba:	482d      	ldr	r0, [pc, #180]	; (8001570 <writecmddata+0x168>)
 80014bc:	f7ff fd8e 	bl	8000fdc <PIN_HIGH>
 80014c0:	2104      	movs	r1, #4
 80014c2:	482b      	ldr	r0, [pc, #172]	; (8001570 <writecmddata+0x168>)
 80014c4:	f7ff fd8a 	bl	8000fdc <PIN_HIGH>
    WriteData(dat);
 80014c8:	88bb      	ldrh	r3, [r7, #4]
 80014ca:	0a1b      	lsrs	r3, r3, #8
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	737b      	strb	r3, [r7, #13]
 80014d0:	88bb      	ldrh	r3, [r7, #4]
 80014d2:	733b      	strb	r3, [r7, #12]
 80014d4:	4b26      	ldr	r3, [pc, #152]	; (8001570 <writecmddata+0x168>)
 80014d6:	4a27      	ldr	r2, [pc, #156]	; (8001574 <writecmddata+0x16c>)
 80014d8:	619a      	str	r2, [r3, #24]
 80014da:	4b27      	ldr	r3, [pc, #156]	; (8001578 <writecmddata+0x170>)
 80014dc:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 80014e0:	619a      	str	r2, [r3, #24]
 80014e2:	7b7b      	ldrb	r3, [r7, #13]
 80014e4:	035b      	lsls	r3, r3, #13
 80014e6:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 80014ea:	7b7b      	ldrb	r3, [r7, #13]
 80014ec:	109b      	asrs	r3, r3, #2
 80014ee:	f003 0320 	and.w	r3, r3, #32
 80014f2:	431a      	orrs	r2, r3
 80014f4:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <writecmddata+0x168>)
 80014f6:	619a      	str	r2, [r3, #24]
 80014f8:	7b7b      	ldrb	r3, [r7, #13]
 80014fa:	4a1f      	ldr	r2, [pc, #124]	; (8001578 <writecmddata+0x170>)
 80014fc:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8001500:	6193      	str	r3, [r2, #24]
 8001502:	2102      	movs	r1, #2
 8001504:	481a      	ldr	r0, [pc, #104]	; (8001570 <writecmddata+0x168>)
 8001506:	f7ff fd59 	bl	8000fbc <PIN_LOW>
 800150a:	2102      	movs	r1, #2
 800150c:	4818      	ldr	r0, [pc, #96]	; (8001570 <writecmddata+0x168>)
 800150e:	f7ff fd65 	bl	8000fdc <PIN_HIGH>
 8001512:	2102      	movs	r1, #2
 8001514:	4816      	ldr	r0, [pc, #88]	; (8001570 <writecmddata+0x168>)
 8001516:	f7ff fd61 	bl	8000fdc <PIN_HIGH>
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <writecmddata+0x168>)
 800151c:	4a15      	ldr	r2, [pc, #84]	; (8001574 <writecmddata+0x16c>)
 800151e:	619a      	str	r2, [r3, #24]
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <writecmddata+0x170>)
 8001522:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8001526:	619a      	str	r2, [r3, #24]
 8001528:	7b3b      	ldrb	r3, [r7, #12]
 800152a:	035b      	lsls	r3, r3, #13
 800152c:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8001530:	7b3b      	ldrb	r3, [r7, #12]
 8001532:	109b      	asrs	r3, r3, #2
 8001534:	f003 0320 	and.w	r3, r3, #32
 8001538:	431a      	orrs	r2, r3
 800153a:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <writecmddata+0x168>)
 800153c:	619a      	str	r2, [r3, #24]
 800153e:	7b3b      	ldrb	r3, [r7, #12]
 8001540:	4a0d      	ldr	r2, [pc, #52]	; (8001578 <writecmddata+0x170>)
 8001542:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8001546:	6193      	str	r3, [r2, #24]
 8001548:	2102      	movs	r1, #2
 800154a:	4809      	ldr	r0, [pc, #36]	; (8001570 <writecmddata+0x168>)
 800154c:	f7ff fd36 	bl	8000fbc <PIN_LOW>
 8001550:	2102      	movs	r1, #2
 8001552:	4807      	ldr	r0, [pc, #28]	; (8001570 <writecmddata+0x168>)
 8001554:	f7ff fd42 	bl	8000fdc <PIN_HIGH>
 8001558:	2102      	movs	r1, #2
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <writecmddata+0x168>)
 800155c:	f7ff fd3e 	bl	8000fdc <PIN_HIGH>
    CS_IDLE;
 8001560:	2108      	movs	r1, #8
 8001562:	4803      	ldr	r0, [pc, #12]	; (8001570 <writecmddata+0x168>)
 8001564:	f7ff fd3a 	bl	8000fdc <PIN_HIGH>
}
 8001568:	bf00      	nop
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40020000 	.word	0x40020000
 8001574:	80200000 	.word	0x80200000
 8001578:	40020400 	.word	0x40020400

0800157c <WriteCmdParamN>:

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	603a      	str	r2, [r7, #0]
 8001586:	80fb      	strh	r3, [r7, #6]
 8001588:	460b      	mov	r3, r1
 800158a:	717b      	strb	r3, [r7, #5]
    CS_ACTIVE;
 800158c:	2108      	movs	r1, #8
 800158e:	4878      	ldr	r0, [pc, #480]	; (8001770 <WriteCmdParamN+0x1f4>)
 8001590:	f7ff fd14 	bl	8000fbc <PIN_LOW>
    WriteCmd(cmd);
 8001594:	2104      	movs	r1, #4
 8001596:	4876      	ldr	r0, [pc, #472]	; (8001770 <WriteCmdParamN+0x1f4>)
 8001598:	f7ff fd10 	bl	8000fbc <PIN_LOW>
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	0a1b      	lsrs	r3, r3, #8
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	73fb      	strb	r3, [r7, #15]
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	73bb      	strb	r3, [r7, #14]
 80015a8:	4b71      	ldr	r3, [pc, #452]	; (8001770 <WriteCmdParamN+0x1f4>)
 80015aa:	4a72      	ldr	r2, [pc, #456]	; (8001774 <WriteCmdParamN+0x1f8>)
 80015ac:	619a      	str	r2, [r3, #24]
 80015ae:	4b72      	ldr	r3, [pc, #456]	; (8001778 <WriteCmdParamN+0x1fc>)
 80015b0:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 80015b4:	619a      	str	r2, [r3, #24]
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	035b      	lsls	r3, r3, #13
 80015ba:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	109b      	asrs	r3, r3, #2
 80015c2:	f003 0320 	and.w	r3, r3, #32
 80015c6:	431a      	orrs	r2, r3
 80015c8:	4b69      	ldr	r3, [pc, #420]	; (8001770 <WriteCmdParamN+0x1f4>)
 80015ca:	619a      	str	r2, [r3, #24]
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	4a6a      	ldr	r2, [pc, #424]	; (8001778 <WriteCmdParamN+0x1fc>)
 80015d0:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 80015d4:	6193      	str	r3, [r2, #24]
 80015d6:	2102      	movs	r1, #2
 80015d8:	4865      	ldr	r0, [pc, #404]	; (8001770 <WriteCmdParamN+0x1f4>)
 80015da:	f7ff fcef 	bl	8000fbc <PIN_LOW>
 80015de:	2102      	movs	r1, #2
 80015e0:	4863      	ldr	r0, [pc, #396]	; (8001770 <WriteCmdParamN+0x1f4>)
 80015e2:	f7ff fcfb 	bl	8000fdc <PIN_HIGH>
 80015e6:	2102      	movs	r1, #2
 80015e8:	4861      	ldr	r0, [pc, #388]	; (8001770 <WriteCmdParamN+0x1f4>)
 80015ea:	f7ff fcf7 	bl	8000fdc <PIN_HIGH>
 80015ee:	4b60      	ldr	r3, [pc, #384]	; (8001770 <WriteCmdParamN+0x1f4>)
 80015f0:	4a60      	ldr	r2, [pc, #384]	; (8001774 <WriteCmdParamN+0x1f8>)
 80015f2:	619a      	str	r2, [r3, #24]
 80015f4:	4b60      	ldr	r3, [pc, #384]	; (8001778 <WriteCmdParamN+0x1fc>)
 80015f6:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 80015fa:	619a      	str	r2, [r3, #24]
 80015fc:	7bbb      	ldrb	r3, [r7, #14]
 80015fe:	035b      	lsls	r3, r3, #13
 8001600:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8001604:	7bbb      	ldrb	r3, [r7, #14]
 8001606:	109b      	asrs	r3, r3, #2
 8001608:	f003 0320 	and.w	r3, r3, #32
 800160c:	431a      	orrs	r2, r3
 800160e:	4b58      	ldr	r3, [pc, #352]	; (8001770 <WriteCmdParamN+0x1f4>)
 8001610:	619a      	str	r2, [r3, #24]
 8001612:	7bbb      	ldrb	r3, [r7, #14]
 8001614:	4a58      	ldr	r2, [pc, #352]	; (8001778 <WriteCmdParamN+0x1fc>)
 8001616:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 800161a:	6193      	str	r3, [r2, #24]
 800161c:	2102      	movs	r1, #2
 800161e:	4854      	ldr	r0, [pc, #336]	; (8001770 <WriteCmdParamN+0x1f4>)
 8001620:	f7ff fccc 	bl	8000fbc <PIN_LOW>
 8001624:	2102      	movs	r1, #2
 8001626:	4852      	ldr	r0, [pc, #328]	; (8001770 <WriteCmdParamN+0x1f4>)
 8001628:	f7ff fcd8 	bl	8000fdc <PIN_HIGH>
 800162c:	2102      	movs	r1, #2
 800162e:	4850      	ldr	r0, [pc, #320]	; (8001770 <WriteCmdParamN+0x1f4>)
 8001630:	f7ff fcd4 	bl	8000fdc <PIN_HIGH>
 8001634:	2104      	movs	r1, #4
 8001636:	484e      	ldr	r0, [pc, #312]	; (8001770 <WriteCmdParamN+0x1f4>)
 8001638:	f7ff fcd0 	bl	8000fdc <PIN_HIGH>
    while (N-- > 0) {
 800163c:	e086      	b.n	800174c <WriteCmdParamN+0x1d0>
        uint8_t u8 = *block++;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	603a      	str	r2, [r7, #0]
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	737b      	strb	r3, [r7, #13]
        write8(u8);
 8001648:	4b49      	ldr	r3, [pc, #292]	; (8001770 <WriteCmdParamN+0x1f4>)
 800164a:	4a4a      	ldr	r2, [pc, #296]	; (8001774 <WriteCmdParamN+0x1f8>)
 800164c:	619a      	str	r2, [r3, #24]
 800164e:	4b4a      	ldr	r3, [pc, #296]	; (8001778 <WriteCmdParamN+0x1fc>)
 8001650:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8001654:	619a      	str	r2, [r3, #24]
 8001656:	7b7b      	ldrb	r3, [r7, #13]
 8001658:	035b      	lsls	r3, r3, #13
 800165a:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 800165e:	7b7b      	ldrb	r3, [r7, #13]
 8001660:	109b      	asrs	r3, r3, #2
 8001662:	f003 0320 	and.w	r3, r3, #32
 8001666:	431a      	orrs	r2, r3
 8001668:	4b41      	ldr	r3, [pc, #260]	; (8001770 <WriteCmdParamN+0x1f4>)
 800166a:	619a      	str	r2, [r3, #24]
 800166c:	7b7b      	ldrb	r3, [r7, #13]
 800166e:	4a42      	ldr	r2, [pc, #264]	; (8001778 <WriteCmdParamN+0x1fc>)
 8001670:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8001674:	6193      	str	r3, [r2, #24]
 8001676:	2102      	movs	r1, #2
 8001678:	483d      	ldr	r0, [pc, #244]	; (8001770 <WriteCmdParamN+0x1f4>)
 800167a:	f7ff fc9f 	bl	8000fbc <PIN_LOW>
 800167e:	2102      	movs	r1, #2
 8001680:	483b      	ldr	r0, [pc, #236]	; (8001770 <WriteCmdParamN+0x1f4>)
 8001682:	f7ff fcab 	bl	8000fdc <PIN_HIGH>
 8001686:	2102      	movs	r1, #2
 8001688:	4839      	ldr	r0, [pc, #228]	; (8001770 <WriteCmdParamN+0x1f4>)
 800168a:	f7ff fca7 	bl	8000fdc <PIN_HIGH>
        if (N && is8347) {
 800168e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d05a      	beq.n	800174c <WriteCmdParamN+0x1d0>
 8001696:	4b39      	ldr	r3, [pc, #228]	; (800177c <WriteCmdParamN+0x200>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d056      	beq.n	800174c <WriteCmdParamN+0x1d0>
            cmd++;
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	3301      	adds	r3, #1
 80016a2:	80fb      	strh	r3, [r7, #6]
            WriteCmd(cmd);
 80016a4:	2104      	movs	r1, #4
 80016a6:	4832      	ldr	r0, [pc, #200]	; (8001770 <WriteCmdParamN+0x1f4>)
 80016a8:	f7ff fc88 	bl	8000fbc <PIN_LOW>
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	0a1b      	lsrs	r3, r3, #8
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	733b      	strb	r3, [r7, #12]
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	72fb      	strb	r3, [r7, #11]
 80016b8:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <WriteCmdParamN+0x1f4>)
 80016ba:	4a2e      	ldr	r2, [pc, #184]	; (8001774 <WriteCmdParamN+0x1f8>)
 80016bc:	619a      	str	r2, [r3, #24]
 80016be:	4b2e      	ldr	r3, [pc, #184]	; (8001778 <WriteCmdParamN+0x1fc>)
 80016c0:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 80016c4:	619a      	str	r2, [r3, #24]
 80016c6:	7b3b      	ldrb	r3, [r7, #12]
 80016c8:	035b      	lsls	r3, r3, #13
 80016ca:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 80016ce:	7b3b      	ldrb	r3, [r7, #12]
 80016d0:	109b      	asrs	r3, r3, #2
 80016d2:	f003 0320 	and.w	r3, r3, #32
 80016d6:	431a      	orrs	r2, r3
 80016d8:	4b25      	ldr	r3, [pc, #148]	; (8001770 <WriteCmdParamN+0x1f4>)
 80016da:	619a      	str	r2, [r3, #24]
 80016dc:	7b3b      	ldrb	r3, [r7, #12]
 80016de:	4a26      	ldr	r2, [pc, #152]	; (8001778 <WriteCmdParamN+0x1fc>)
 80016e0:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 80016e4:	6193      	str	r3, [r2, #24]
 80016e6:	2102      	movs	r1, #2
 80016e8:	4821      	ldr	r0, [pc, #132]	; (8001770 <WriteCmdParamN+0x1f4>)
 80016ea:	f7ff fc67 	bl	8000fbc <PIN_LOW>
 80016ee:	2102      	movs	r1, #2
 80016f0:	481f      	ldr	r0, [pc, #124]	; (8001770 <WriteCmdParamN+0x1f4>)
 80016f2:	f7ff fc73 	bl	8000fdc <PIN_HIGH>
 80016f6:	2102      	movs	r1, #2
 80016f8:	481d      	ldr	r0, [pc, #116]	; (8001770 <WriteCmdParamN+0x1f4>)
 80016fa:	f7ff fc6f 	bl	8000fdc <PIN_HIGH>
 80016fe:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <WriteCmdParamN+0x1f4>)
 8001700:	4a1c      	ldr	r2, [pc, #112]	; (8001774 <WriteCmdParamN+0x1f8>)
 8001702:	619a      	str	r2, [r3, #24]
 8001704:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <WriteCmdParamN+0x1fc>)
 8001706:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 800170a:	619a      	str	r2, [r3, #24]
 800170c:	7afb      	ldrb	r3, [r7, #11]
 800170e:	035b      	lsls	r3, r3, #13
 8001710:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8001714:	7afb      	ldrb	r3, [r7, #11]
 8001716:	109b      	asrs	r3, r3, #2
 8001718:	f003 0320 	and.w	r3, r3, #32
 800171c:	431a      	orrs	r2, r3
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <WriteCmdParamN+0x1f4>)
 8001720:	619a      	str	r2, [r3, #24]
 8001722:	7afb      	ldrb	r3, [r7, #11]
 8001724:	4a14      	ldr	r2, [pc, #80]	; (8001778 <WriteCmdParamN+0x1fc>)
 8001726:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	2102      	movs	r1, #2
 800172e:	4810      	ldr	r0, [pc, #64]	; (8001770 <WriteCmdParamN+0x1f4>)
 8001730:	f7ff fc44 	bl	8000fbc <PIN_LOW>
 8001734:	2102      	movs	r1, #2
 8001736:	480e      	ldr	r0, [pc, #56]	; (8001770 <WriteCmdParamN+0x1f4>)
 8001738:	f7ff fc50 	bl	8000fdc <PIN_HIGH>
 800173c:	2102      	movs	r1, #2
 800173e:	480c      	ldr	r0, [pc, #48]	; (8001770 <WriteCmdParamN+0x1f4>)
 8001740:	f7ff fc4c 	bl	8000fdc <PIN_HIGH>
 8001744:	2104      	movs	r1, #4
 8001746:	480a      	ldr	r0, [pc, #40]	; (8001770 <WriteCmdParamN+0x1f4>)
 8001748:	f7ff fc48 	bl	8000fdc <PIN_HIGH>
    while (N-- > 0) {
 800174c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001750:	b2da      	uxtb	r2, r3
 8001752:	3a01      	subs	r2, #1
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	717a      	strb	r2, [r7, #5]
 8001758:	2b00      	cmp	r3, #0
 800175a:	f73f af70 	bgt.w	800163e <WriteCmdParamN+0xc2>
        }
    }
    CS_IDLE;
 800175e:	2108      	movs	r1, #8
 8001760:	4803      	ldr	r0, [pc, #12]	; (8001770 <WriteCmdParamN+0x1f4>)
 8001762:	f7ff fc3b 	bl	8000fdc <PIN_HIGH>
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40020000 	.word	0x40020000
 8001774:	80200000 	.word	0x80200000
 8001778:	40020400 	.word	0x40020400
 800177c:	200000d9 	.word	0x200000d9

08001780 <WriteCmdParam4>:

static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	4604      	mov	r4, r0
 8001788:	4608      	mov	r0, r1
 800178a:	4611      	mov	r1, r2
 800178c:	461a      	mov	r2, r3
 800178e:	4623      	mov	r3, r4
 8001790:	71fb      	strb	r3, [r7, #7]
 8001792:	4603      	mov	r3, r0
 8001794:	71bb      	strb	r3, [r7, #6]
 8001796:	460b      	mov	r3, r1
 8001798:	717b      	strb	r3, [r7, #5]
 800179a:	4613      	mov	r3, r2
 800179c:	713b      	strb	r3, [r7, #4]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 800179e:	79bb      	ldrb	r3, [r7, #6]
 80017a0:	733b      	strb	r3, [r7, #12]
 80017a2:	797b      	ldrb	r3, [r7, #5]
 80017a4:	737b      	strb	r3, [r7, #13]
 80017a6:	793b      	ldrb	r3, [r7, #4]
 80017a8:	73bb      	strb	r3, [r7, #14]
 80017aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017ae:	73fb      	strb	r3, [r7, #15]
    WriteCmdParamN(cmd, 4, d);
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	f107 020c 	add.w	r2, r7, #12
 80017b8:	2104      	movs	r1, #4
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fede 	bl	800157c <WriteCmdParamN>
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd90      	pop	{r4, r7, pc}

080017c8 <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F
static void init_table(const void *table, int16_t size)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	; 0x28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	807b      	strh	r3, [r7, #2]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24

    while (size > 0)
 80017d8:	e046      	b.n	8001868 <init_table+0xa0>
    {
        uint8_t cmd = pgm_read_byte(p++);
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	1c5a      	adds	r2, r3, #1
 80017de:	627a      	str	r2, [r7, #36]	; 0x24
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        uint8_t len = pgm_read_byte(p++);
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	1c5a      	adds	r2, r3, #1
 80017ea:	627a      	str	r2, [r7, #36]	; 0x24
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (cmd == TFTLCD_DELAY8)
 80017f2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80017f6:	2b7f      	cmp	r3, #127	; 0x7f
 80017f8:	d108      	bne.n	800180c <init_table+0x44>
        {
            delay(len);
 80017fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fbc4 	bl	8000f8c <delay>
            len = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800180a:	e024      	b.n	8001856 <init_table+0x8e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 800180c:	2300      	movs	r3, #0
 800180e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001812:	e010      	b.n	8001836 <init_table+0x6e>
                dat[i] = pgm_read_byte(p++);
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	627a      	str	r2, [r7, #36]	; 0x24
 800181a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800181e:	7819      	ldrb	r1, [r3, #0]
 8001820:	f102 0328 	add.w	r3, r2, #40	; 0x28
 8001824:	443b      	add	r3, r7
 8001826:	460a      	mov	r2, r1
 8001828:	f803 2c20 	strb.w	r2, [r3, #-32]
            for (uint8_t i = 0; i < len; i++)
 800182c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001830:	3301      	adds	r3, #1
 8001832:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001836:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800183a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800183e:	429a      	cmp	r2, r3
 8001840:	d3e8      	bcc.n	8001814 <init_table+0x4c>
            WriteCmdParamN(cmd, len, dat);
 8001842:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001846:	b29b      	uxth	r3, r3
 8001848:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 800184c:	f107 0208 	add.w	r2, r7, #8
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fe93 	bl	800157c <WriteCmdParamN>
        }
        size -= len + 2;
 8001856:	887a      	ldrh	r2, [r7, #2]
 8001858:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800185c:	b29b      	uxth	r3, r3
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	b29b      	uxth	r3, r3
 8001862:	3b02      	subs	r3, #2
 8001864:	b29b      	uxth	r3, r3
 8001866:	807b      	strh	r3, [r7, #2]
    while (size > 0)
 8001868:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800186c:	2b00      	cmp	r3, #0
 800186e:	dcb4      	bgt.n	80017da <init_table+0x12>
    }
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	3728      	adds	r7, #40	; 0x28
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <init_table16>:


static void init_table16(const void *table, int16_t size)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b084      	sub	sp, #16
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	460b      	mov	r3, r1
 8001884:	807b      	strh	r3, [r7, #2]
    uint16_t *p = (uint16_t *) table;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	60fb      	str	r3, [r7, #12]
    while (size > 0) {
 800188a:	e01d      	b.n	80018c8 <init_table16+0x4e>
        uint16_t cmd = pgm_read_word(p++);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	1c9a      	adds	r2, r3, #2
 8001890:	60fa      	str	r2, [r7, #12]
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	817b      	strh	r3, [r7, #10]
        uint16_t d = pgm_read_word(p++);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1c9a      	adds	r2, r3, #2
 800189a:	60fa      	str	r2, [r7, #12]
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	813b      	strh	r3, [r7, #8]
        if (cmd == TFTLCD_DELAY)
 80018a0:	897b      	ldrh	r3, [r7, #10]
 80018a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d104      	bne.n	80018b4 <init_table16+0x3a>
            delay(d);
 80018aa:	893b      	ldrh	r3, [r7, #8]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fb6d 	bl	8000f8c <delay>
 80018b2:	e005      	b.n	80018c0 <init_table16+0x46>
        else {
			writecmddata(cmd, d);                      //static function
 80018b4:	893a      	ldrh	r2, [r7, #8]
 80018b6:	897b      	ldrh	r3, [r7, #10]
 80018b8:	4611      	mov	r1, r2
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fda4 	bl	8001408 <writecmddata>
        }
        size -= 2 * sizeof(int16_t);
 80018c0:	887b      	ldrh	r3, [r7, #2]
 80018c2:	3b04      	subs	r3, #4
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	807b      	strh	r3, [r7, #2]
    while (size > 0) {
 80018c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	dcdd      	bgt.n	800188c <init_table16+0x12>
    }
}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <reset>:



void reset(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
    done_reset = 1;
 80018e0:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <reset+0x84>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 80018e6:	f7ff fcdb 	bl	80012a0 <setWriteDir>
    CTL_INIT();
 80018ea:	2101      	movs	r1, #1
 80018ec:	481d      	ldr	r0, [pc, #116]	; (8001964 <reset+0x88>)
 80018ee:	f7ff fb9b 	bl	8001028 <PIN_OUTPUT>
 80018f2:	2102      	movs	r1, #2
 80018f4:	481b      	ldr	r0, [pc, #108]	; (8001964 <reset+0x88>)
 80018f6:	f7ff fb97 	bl	8001028 <PIN_OUTPUT>
 80018fa:	2104      	movs	r1, #4
 80018fc:	4819      	ldr	r0, [pc, #100]	; (8001964 <reset+0x88>)
 80018fe:	f7ff fb93 	bl	8001028 <PIN_OUTPUT>
 8001902:	2108      	movs	r1, #8
 8001904:	4817      	ldr	r0, [pc, #92]	; (8001964 <reset+0x88>)
 8001906:	f7ff fb8f 	bl	8001028 <PIN_OUTPUT>
 800190a:	2110      	movs	r1, #16
 800190c:	4815      	ldr	r0, [pc, #84]	; (8001964 <reset+0x88>)
 800190e:	f7ff fb8b 	bl	8001028 <PIN_OUTPUT>
    CS_IDLE;
 8001912:	2108      	movs	r1, #8
 8001914:	4813      	ldr	r0, [pc, #76]	; (8001964 <reset+0x88>)
 8001916:	f7ff fb61 	bl	8000fdc <PIN_HIGH>
    RD_IDLE;
 800191a:	2101      	movs	r1, #1
 800191c:	4811      	ldr	r0, [pc, #68]	; (8001964 <reset+0x88>)
 800191e:	f7ff fb5d 	bl	8000fdc <PIN_HIGH>
    WR_IDLE;
 8001922:	2102      	movs	r1, #2
 8001924:	480f      	ldr	r0, [pc, #60]	; (8001964 <reset+0x88>)
 8001926:	f7ff fb59 	bl	8000fdc <PIN_HIGH>
    RESET_IDLE;
 800192a:	2110      	movs	r1, #16
 800192c:	480d      	ldr	r0, [pc, #52]	; (8001964 <reset+0x88>)
 800192e:	f7ff fb55 	bl	8000fdc <PIN_HIGH>
    delay(50);
 8001932:	2032      	movs	r0, #50	; 0x32
 8001934:	f7ff fb2a 	bl	8000f8c <delay>
    RESET_ACTIVE;
 8001938:	2110      	movs	r1, #16
 800193a:	480a      	ldr	r0, [pc, #40]	; (8001964 <reset+0x88>)
 800193c:	f7ff fb3e 	bl	8000fbc <PIN_LOW>
    delay(100);
 8001940:	2064      	movs	r0, #100	; 0x64
 8001942:	f7ff fb23 	bl	8000f8c <delay>
    RESET_IDLE;
 8001946:	2110      	movs	r1, #16
 8001948:	4806      	ldr	r0, [pc, #24]	; (8001964 <reset+0x88>)
 800194a:	f7ff fb47 	bl	8000fdc <PIN_HIGH>
    delay(100);
 800194e:	2064      	movs	r0, #100	; 0x64
 8001950:	f7ff fb1c 	bl	8000f8c <delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 8001954:	2100      	movs	r1, #0
 8001956:	20b0      	movs	r0, #176	; 0xb0
 8001958:	f7ff fc45 	bl	80011e6 <WriteCmdData>
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	200000d8 	.word	0x200000d8
 8001964:	40020000 	.word	0x40020000

08001968 <read16bits>:

static uint16_t read16bits(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 800196e:	2101      	movs	r1, #1
 8001970:	4862      	ldr	r0, [pc, #392]	; (8001afc <read16bits+0x194>)
 8001972:	f7ff fb33 	bl	8000fdc <PIN_HIGH>
 8001976:	2101      	movs	r1, #1
 8001978:	4860      	ldr	r0, [pc, #384]	; (8001afc <read16bits+0x194>)
 800197a:	f7ff fb1f 	bl	8000fbc <PIN_LOW>
 800197e:	2101      	movs	r1, #1
 8001980:	485e      	ldr	r0, [pc, #376]	; (8001afc <read16bits+0x194>)
 8001982:	f7ff fb1b 	bl	8000fbc <PIN_LOW>
 8001986:	2101      	movs	r1, #1
 8001988:	485c      	ldr	r0, [pc, #368]	; (8001afc <read16bits+0x194>)
 800198a:	f7ff fb17 	bl	8000fbc <PIN_LOW>
 800198e:	2101      	movs	r1, #1
 8001990:	485a      	ldr	r0, [pc, #360]	; (8001afc <read16bits+0x194>)
 8001992:	f7ff fb13 	bl	8000fbc <PIN_LOW>
 8001996:	4b5a      	ldr	r3, [pc, #360]	; (8001b00 <read16bits+0x198>)
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	b29b      	uxth	r3, r3
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	4b57      	ldr	r3, [pc, #348]	; (8001b00 <read16bits+0x198>)
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	4313      	orrs	r3, r2
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	4b52      	ldr	r3, [pc, #328]	; (8001afc <read16bits+0x194>)
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	0b5b      	lsrs	r3, r3, #13
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	b29b      	uxth	r3, r3
 80019c0:	4313      	orrs	r3, r2
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	4b4e      	ldr	r3, [pc, #312]	; (8001b00 <read16bits+0x198>)
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	4313      	orrs	r3, r2
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	4b4a      	ldr	r3, [pc, #296]	; (8001b00 <read16bits+0x198>)
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	f003 0310 	and.w	r3, r3, #16
 80019de:	b29b      	uxth	r3, r3
 80019e0:	4313      	orrs	r3, r2
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	4b46      	ldr	r3, [pc, #280]	; (8001b00 <read16bits+0x198>)
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	f003 0320 	and.w	r3, r3, #32
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	4313      	orrs	r3, r2
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	4b42      	ldr	r3, [pc, #264]	; (8001b00 <read16bits+0x198>)
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	4313      	orrs	r3, r2
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	4b3d      	ldr	r3, [pc, #244]	; (8001afc <read16bits+0x194>)
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	4313      	orrs	r3, r2
 8001a16:	80fb      	strh	r3, [r7, #6]
 8001a18:	2101      	movs	r1, #1
 8001a1a:	4838      	ldr	r0, [pc, #224]	; (8001afc <read16bits+0x194>)
 8001a1c:	f7ff fade 	bl	8000fdc <PIN_HIGH>
 8001a20:	2101      	movs	r1, #1
 8001a22:	4836      	ldr	r0, [pc, #216]	; (8001afc <read16bits+0x194>)
 8001a24:	f7ff fada 	bl	8000fdc <PIN_HIGH>
    READ_8(lo);
 8001a28:	2101      	movs	r1, #1
 8001a2a:	4834      	ldr	r0, [pc, #208]	; (8001afc <read16bits+0x194>)
 8001a2c:	f7ff fad6 	bl	8000fdc <PIN_HIGH>
 8001a30:	2101      	movs	r1, #1
 8001a32:	4832      	ldr	r0, [pc, #200]	; (8001afc <read16bits+0x194>)
 8001a34:	f7ff fac2 	bl	8000fbc <PIN_LOW>
 8001a38:	2101      	movs	r1, #1
 8001a3a:	4830      	ldr	r0, [pc, #192]	; (8001afc <read16bits+0x194>)
 8001a3c:	f7ff fabe 	bl	8000fbc <PIN_LOW>
 8001a40:	2101      	movs	r1, #1
 8001a42:	482e      	ldr	r0, [pc, #184]	; (8001afc <read16bits+0x194>)
 8001a44:	f7ff faba 	bl	8000fbc <PIN_LOW>
 8001a48:	2101      	movs	r1, #1
 8001a4a:	482c      	ldr	r0, [pc, #176]	; (8001afc <read16bits+0x194>)
 8001a4c:	f7ff fab6 	bl	8000fbc <PIN_LOW>
 8001a50:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <read16bits+0x198>)
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	4b28      	ldr	r3, [pc, #160]	; (8001b00 <read16bits+0x198>)
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	4b23      	ldr	r3, [pc, #140]	; (8001afc <read16bits+0x194>)
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	0b5b      	lsrs	r3, r3, #13
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <read16bits+0x198>)
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <read16bits+0x198>)
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	f003 0310 	and.w	r3, r3, #16
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <read16bits+0x198>)
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	f003 0320 	and.w	r3, r3, #32
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <read16bits+0x198>)
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	4313      	orrs	r3, r2
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <read16bits+0x194>)
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	717b      	strb	r3, [r7, #5]
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	4809      	ldr	r0, [pc, #36]	; (8001afc <read16bits+0x194>)
 8001ad6:	f7ff fa81 	bl	8000fdc <PIN_HIGH>
 8001ada:	2101      	movs	r1, #1
 8001adc:	4807      	ldr	r0, [pc, #28]	; (8001afc <read16bits+0x194>)
 8001ade:	f7ff fa7d 	bl	8000fdc <PIN_HIGH>
    return (ret << 8) | lo;
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	b21a      	sxth	r2, r3
 8001ae8:	797b      	ldrb	r3, [r7, #5]
 8001aea:	b21b      	sxth	r3, r3
 8001aec:	4313      	orrs	r3, r2
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	b29b      	uxth	r3, r3
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40020000 	.word	0x40020000
 8001b00:	40020400 	.word	0x40020400

08001b04 <readReg>:

uint16_t readReg(uint16_t reg, int8_t index)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	460a      	mov	r2, r1
 8001b0e:	80fb      	strh	r3, [r7, #6]
 8001b10:	4613      	mov	r3, r2
 8001b12:	717b      	strb	r3, [r7, #5]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 8001b14:	4b3e      	ldr	r3, [pc, #248]	; (8001c10 <readReg+0x10c>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <readReg+0x1c>
        reset();
 8001b1c:	f7ff fede 	bl	80018dc <reset>
    CS_ACTIVE;
 8001b20:	2108      	movs	r1, #8
 8001b22:	483c      	ldr	r0, [pc, #240]	; (8001c14 <readReg+0x110>)
 8001b24:	f7ff fa4a 	bl	8000fbc <PIN_LOW>
    WriteCmd(reg);
 8001b28:	2104      	movs	r1, #4
 8001b2a:	483a      	ldr	r0, [pc, #232]	; (8001c14 <readReg+0x110>)
 8001b2c:	f7ff fa46 	bl	8000fbc <PIN_LOW>
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	0a1b      	lsrs	r3, r3, #8
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	73fb      	strb	r3, [r7, #15]
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	73bb      	strb	r3, [r7, #14]
 8001b3c:	4b35      	ldr	r3, [pc, #212]	; (8001c14 <readReg+0x110>)
 8001b3e:	4a36      	ldr	r2, [pc, #216]	; (8001c18 <readReg+0x114>)
 8001b40:	619a      	str	r2, [r3, #24]
 8001b42:	4b36      	ldr	r3, [pc, #216]	; (8001c1c <readReg+0x118>)
 8001b44:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8001b48:	619a      	str	r2, [r3, #24]
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	035b      	lsls	r3, r3, #13
 8001b4e:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	109b      	asrs	r3, r3, #2
 8001b56:	f003 0320 	and.w	r3, r3, #32
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <readReg+0x110>)
 8001b5e:	619a      	str	r2, [r3, #24]
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	4a2e      	ldr	r2, [pc, #184]	; (8001c1c <readReg+0x118>)
 8001b64:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8001b68:	6193      	str	r3, [r2, #24]
 8001b6a:	2102      	movs	r1, #2
 8001b6c:	4829      	ldr	r0, [pc, #164]	; (8001c14 <readReg+0x110>)
 8001b6e:	f7ff fa25 	bl	8000fbc <PIN_LOW>
 8001b72:	2102      	movs	r1, #2
 8001b74:	4827      	ldr	r0, [pc, #156]	; (8001c14 <readReg+0x110>)
 8001b76:	f7ff fa31 	bl	8000fdc <PIN_HIGH>
 8001b7a:	2102      	movs	r1, #2
 8001b7c:	4825      	ldr	r0, [pc, #148]	; (8001c14 <readReg+0x110>)
 8001b7e:	f7ff fa2d 	bl	8000fdc <PIN_HIGH>
 8001b82:	4b24      	ldr	r3, [pc, #144]	; (8001c14 <readReg+0x110>)
 8001b84:	4a24      	ldr	r2, [pc, #144]	; (8001c18 <readReg+0x114>)
 8001b86:	619a      	str	r2, [r3, #24]
 8001b88:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <readReg+0x118>)
 8001b8a:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8001b8e:	619a      	str	r2, [r3, #24]
 8001b90:	7bbb      	ldrb	r3, [r7, #14]
 8001b92:	035b      	lsls	r3, r3, #13
 8001b94:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8001b98:	7bbb      	ldrb	r3, [r7, #14]
 8001b9a:	109b      	asrs	r3, r3, #2
 8001b9c:	f003 0320 	and.w	r3, r3, #32
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <readReg+0x110>)
 8001ba4:	619a      	str	r2, [r3, #24]
 8001ba6:	7bbb      	ldrb	r3, [r7, #14]
 8001ba8:	4a1c      	ldr	r2, [pc, #112]	; (8001c1c <readReg+0x118>)
 8001baa:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8001bae:	6193      	str	r3, [r2, #24]
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	4818      	ldr	r0, [pc, #96]	; (8001c14 <readReg+0x110>)
 8001bb4:	f7ff fa02 	bl	8000fbc <PIN_LOW>
 8001bb8:	2102      	movs	r1, #2
 8001bba:	4816      	ldr	r0, [pc, #88]	; (8001c14 <readReg+0x110>)
 8001bbc:	f7ff fa0e 	bl	8000fdc <PIN_HIGH>
 8001bc0:	2102      	movs	r1, #2
 8001bc2:	4814      	ldr	r0, [pc, #80]	; (8001c14 <readReg+0x110>)
 8001bc4:	f7ff fa0a 	bl	8000fdc <PIN_HIGH>
 8001bc8:	2104      	movs	r1, #4
 8001bca:	4812      	ldr	r0, [pc, #72]	; (8001c14 <readReg+0x110>)
 8001bcc:	f7ff fa06 	bl	8000fdc <PIN_HIGH>
    setReadDir();
 8001bd0:	f7ff fb3c 	bl	800124c <setReadDir>
    delay(1);    //1us should be adequate
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	f7ff f9d9 	bl	8000f8c <delay>
    //    READ_16(ret);
    do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 8001bda:	f7ff fec5 	bl	8001968 <read16bits>
 8001bde:	4603      	mov	r3, r0
 8001be0:	81bb      	strh	r3, [r7, #12]
 8001be2:	797b      	ldrb	r3, [r7, #5]
 8001be4:	3b01      	subs	r3, #1
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	717b      	strb	r3, [r7, #5]
 8001bea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	daf3      	bge.n	8001bda <readReg+0xd6>
    RD_IDLE;
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	4807      	ldr	r0, [pc, #28]	; (8001c14 <readReg+0x110>)
 8001bf6:	f7ff f9f1 	bl	8000fdc <PIN_HIGH>
    CS_IDLE;
 8001bfa:	2108      	movs	r1, #8
 8001bfc:	4805      	ldr	r0, [pc, #20]	; (8001c14 <readReg+0x110>)
 8001bfe:	f7ff f9ed 	bl	8000fdc <PIN_HIGH>
    setWriteDir();
 8001c02:	f7ff fb4d 	bl	80012a0 <setWriteDir>
    return ret;
 8001c06:	89bb      	ldrh	r3, [r7, #12]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	200000d8 	.word	0x200000d8
 8001c14:	40020000 	.word	0x40020000
 8001c18:	80200000 	.word	0x80200000
 8001c1c:	40020400 	.word	0x40020400

08001c20 <readReg32>:

uint32_t readReg32(uint16_t reg)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8001c2a:	88fb      	ldrh	r3, [r7, #6]
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff ff68 	bl	8001b04 <readReg>
 8001c34:	4603      	mov	r3, r0
 8001c36:	81fb      	strh	r3, [r7, #14]
    uint16_t l = readReg(reg, 1);
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff61 	bl	8001b04 <readReg>
 8001c42:	4603      	mov	r3, r0
 8001c44:	81bb      	strh	r3, [r7, #12]
    return ((uint32_t) h << 16) | (l);
 8001c46:	89fb      	ldrh	r3, [r7, #14]
 8001c48:	041a      	lsls	r2, r3, #16
 8001c4a:	89bb      	ldrh	r3, [r7, #12]
 8001c4c:	4313      	orrs	r3, r2
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <readReg40>:

uint32_t readReg40(uint16_t reg)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b084      	sub	sp, #16
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff4d 	bl	8001b04 <readReg>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	81fb      	strh	r3, [r7, #14]
    uint16_t m = readReg(reg, 1);
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	2101      	movs	r1, #1
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ff46 	bl	8001b04 <readReg>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	81bb      	strh	r3, [r7, #12]
    uint16_t l = readReg(reg, 2);
 8001c7c:	88fb      	ldrh	r3, [r7, #6]
 8001c7e:	2102      	movs	r1, #2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff3f 	bl	8001b04 <readReg>
 8001c86:	4603      	mov	r3, r0
 8001c88:	817b      	strh	r3, [r7, #10]
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 8001c8a:	89fb      	ldrh	r3, [r7, #14]
 8001c8c:	061b      	lsls	r3, r3, #24
 8001c8e:	89ba      	ldrh	r2, [r7, #12]
 8001c90:	0212      	lsls	r2, r2, #8
 8001c92:	4313      	orrs	r3, r2
 8001c94:	897a      	ldrh	r2, [r7, #10]
 8001c96:	0a12      	lsrs	r2, r2, #8
 8001c98:	b292      	uxth	r2, r2
 8001c9a:	4313      	orrs	r3, r2
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <tft_init>:

void tft_init(uint16_t ID)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	80fb      	strh	r3, [r7, #6]
	int dummy=0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
    int16_t table_size;
    _lcd_xor = 0;
 8001cb6:	4bd3      	ldr	r3, [pc, #844]	; (8002004 <tft_init+0x360>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	801a      	strh	r2, [r3, #0]
    switch (_lcd_ID = ID) {
 8001cbc:	4ad2      	ldr	r2, [pc, #840]	; (8002008 <tft_init+0x364>)
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	8013      	strh	r3, [r2, #0]
 8001cc2:	4bd1      	ldr	r3, [pc, #836]	; (8002008 <tft_init+0x364>)
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	f24c 5205 	movw	r2, #50437	; 0xc505
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	f000 8321 	beq.w	8002312 <tft_init+0x66e>
 8001cd0:	f24c 5205 	movw	r2, #50437	; 0xc505
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	f300 8334 	bgt.w	8002342 <tft_init+0x69e>
 8001cda:	f24b 5209 	movw	r2, #46345	; 0xb509
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	f000 8320 	beq.w	8002324 <tft_init+0x680>
 8001ce4:	f24b 5209 	movw	r2, #46345	; 0xb509
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	f300 832a 	bgt.w	8002342 <tft_init+0x69e>
 8001cee:	f24b 5205 	movw	r2, #46341	; 0xb505
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	f000 830d 	beq.w	8002312 <tft_init+0x66e>
 8001cf8:	f24b 5205 	movw	r2, #46341	; 0xb505
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	f300 8320 	bgt.w	8002342 <tft_init+0x69e>
 8001d02:	f64a 4211 	movw	r2, #44049	; 0xac11
 8001d06:	4293      	cmp	r3, r2
 8001d08:	f000 8253 	beq.w	80021b2 <tft_init+0x50e>
 8001d0c:	f64a 4211 	movw	r2, #44049	; 0xac11
 8001d10:	4293      	cmp	r3, r2
 8001d12:	f300 8316 	bgt.w	8002342 <tft_init+0x69e>
 8001d16:	f249 4288 	movw	r2, #38024	; 0x9488
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	f300 8311 	bgt.w	8002342 <tft_init+0x69e>
 8001d20:	f249 4287 	movw	r2, #38023	; 0x9487
 8001d24:	4293      	cmp	r3, r2
 8001d26:	f280 82dd 	bge.w	80022e4 <tft_init+0x640>
 8001d2a:	f249 4286 	movw	r2, #38022	; 0x9486
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	f000 82be 	beq.w	80022b0 <tft_init+0x60c>
 8001d34:	f249 4286 	movw	r2, #38022	; 0x9486
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	f300 8302 	bgt.w	8002342 <tft_init+0x69e>
 8001d3e:	f249 4281 	movw	r2, #38017	; 0x9481
 8001d42:	4293      	cmp	r3, r2
 8001d44:	f000 8276 	beq.w	8002234 <tft_init+0x590>
 8001d48:	f249 4281 	movw	r2, #38017	; 0x9481
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	f300 82f8 	bgt.w	8002342 <tft_init+0x69e>
 8001d52:	f249 3242 	movw	r2, #37698	; 0x9342
 8001d56:	4293      	cmp	r3, r2
 8001d58:	f300 82f3 	bgt.w	8002342 <tft_init+0x69e>
 8001d5c:	f249 3202 	movw	r2, #37634	; 0x9302
 8001d60:	4293      	cmp	r3, r2
 8001d62:	f280 80af 	bge.w	8001ec4 <tft_init+0x220>
 8001d66:	f249 0290 	movw	r2, #37008	; 0x9090
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	f000 81a9 	beq.w	80020c2 <tft_init+0x41e>
 8001d70:	f249 0290 	movw	r2, #37008	; 0x9090
 8001d74:	4293      	cmp	r3, r2
 8001d76:	f300 82e4 	bgt.w	8002342 <tft_init+0x69e>
 8001d7a:	f248 3257 	movw	r2, #33623	; 0x8357
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	f000 819a 	beq.w	80020b8 <tft_init+0x414>
 8001d84:	f248 3257 	movw	r2, #33623	; 0x8357
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	f300 82da 	bgt.w	8002342 <tft_init+0x69e>
 8001d8e:	f248 0231 	movw	r2, #32817	; 0x8031
 8001d92:	4293      	cmp	r3, r2
 8001d94:	f000 8187 	beq.w	80020a6 <tft_init+0x402>
 8001d98:	f248 0231 	movw	r2, #32817	; 0x8031
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	f300 82d0 	bgt.w	8002342 <tft_init+0x69e>
 8001da2:	f247 7296 	movw	r2, #30614	; 0x7796
 8001da6:	4293      	cmp	r3, r2
 8001da8:	f000 8297 	beq.w	80022da <tft_init+0x636>
 8001dac:	f247 7296 	movw	r2, #30614	; 0x7796
 8001db0:	4293      	cmp	r3, r2
 8001db2:	f300 82c6 	bgt.w	8002342 <tft_init+0x69e>
 8001db6:	f247 7293 	movw	r2, #30611	; 0x7793
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	f000 82b2 	beq.w	8002324 <tft_init+0x680>
 8001dc0:	f247 7293 	movw	r2, #30611	; 0x7793
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	f300 82bc 	bgt.w	8002342 <tft_init+0x69e>
 8001dca:	f247 7289 	movw	r2, #30601	; 0x7789
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	f000 8160 	beq.w	8002094 <tft_init+0x3f0>
 8001dd4:	f247 7289 	movw	r2, #30601	; 0x7789
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	f300 82b2 	bgt.w	8002342 <tft_init+0x69e>
 8001dde:	f646 0214 	movw	r2, #26644	; 0x6814
 8001de2:	4293      	cmp	r3, r2
 8001de4:	f000 8141 	beq.w	800206a <tft_init+0x3c6>
 8001de8:	f646 0214 	movw	r2, #26644	; 0x6814
 8001dec:	4293      	cmp	r3, r2
 8001dee:	f300 82a8 	bgt.w	8002342 <tft_init+0x69e>
 8001df2:	f646 0209 	movw	r2, #26633	; 0x6809
 8001df6:	4293      	cmp	r3, r2
 8001df8:	f000 81a4 	beq.w	8002144 <tft_init+0x4a0>
 8001dfc:	f646 0209 	movw	r2, #26633	; 0x6809
 8001e00:	4293      	cmp	r3, r2
 8001e02:	f300 829e 	bgt.w	8002342 <tft_init+0x69e>
 8001e06:	f245 4208 	movw	r2, #21512	; 0x5408
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	f000 818a 	beq.w	8002124 <tft_init+0x480>
 8001e10:	f245 4208 	movw	r2, #21512	; 0x5408
 8001e14:	4293      	cmp	r3, r2
 8001e16:	f300 8294 	bgt.w	8002342 <tft_init+0x69e>
 8001e1a:	f245 3210 	movw	r2, #21264	; 0x5310
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	f000 810e 	beq.w	8002040 <tft_init+0x39c>
 8001e24:	f245 3210 	movw	r2, #21264	; 0x5310
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	f300 828a 	bgt.w	8002342 <tft_init+0x69e>
 8001e2e:	f242 0253 	movw	r2, #8275	; 0x2053
 8001e32:	4293      	cmp	r3, r2
 8001e34:	f000 81b8 	beq.w	80021a8 <tft_init+0x504>
 8001e38:	f242 0253 	movw	r2, #8275	; 0x2053
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	f300 8280 	bgt.w	8002342 <tft_init+0x69e>
 8001e42:	f241 6202 	movw	r2, #5634	; 0x1602
 8001e46:	4293      	cmp	r3, r2
 8001e48:	f000 81a5 	beq.w	8002196 <tft_init+0x4f2>
 8001e4c:	f241 6202 	movw	r2, #5634	; 0x1602
 8001e50:	4293      	cmp	r3, r2
 8001e52:	f300 8276 	bgt.w	8002342 <tft_init+0x69e>
 8001e56:	f241 5281 	movw	r2, #5505	; 0x1581
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	f000 81e5 	beq.w	800222a <tft_init+0x586>
 8001e60:	f241 5281 	movw	r2, #5505	; 0x1581
 8001e64:	4293      	cmp	r3, r2
 8001e66:	f300 826c 	bgt.w	8002342 <tft_init+0x69e>
 8001e6a:	f241 5226 	movw	r2, #5414	; 0x1526
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	f000 80dd 	beq.w	800202e <tft_init+0x38a>
 8001e74:	f241 5226 	movw	r2, #5414	; 0x1526
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	f300 8262 	bgt.w	8002342 <tft_init+0x69e>
 8001e7e:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8001e82:	f000 80cb 	beq.w	800201c <tft_init+0x378>
 8001e86:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8001e8a:	f300 825a 	bgt.w	8002342 <tft_init+0x69e>
 8001e8e:	f241 5211 	movw	r2, #5393	; 0x1511
 8001e92:	4293      	cmp	r3, r2
 8001e94:	f000 80a2 	beq.w	8001fdc <tft_init+0x338>
 8001e98:	f241 5211 	movw	r2, #5393	; 0x1511
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	f300 8250 	bgt.w	8002342 <tft_init+0x69e>
 8001ea2:	f241 5205 	movw	r2, #5381	; 0x1505
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	f000 8141 	beq.w	800212e <tft_init+0x48a>
 8001eac:	f241 5205 	movw	r2, #5381	; 0x1505
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	f300 8246 	bgt.w	8002342 <tft_init+0x69e>
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	f000 812f 	beq.w	800211a <tft_init+0x476>
 8001ebc:	2b99      	cmp	r3, #153	; 0x99
 8001ebe:	f000 8117 	beq.w	80020f0 <tft_init+0x44c>
 8001ec2:	e23e      	b.n	8002342 <tft_init+0x69e>
 8001ec4:	f5a3 4313 	sub.w	r3, r3, #37632	; 0x9300
 8001ec8:	3b02      	subs	r3, #2
 8001eca:	2b40      	cmp	r3, #64	; 0x40
 8001ecc:	f200 8239 	bhi.w	8002342 <tft_init+0x69e>
 8001ed0:	a201      	add	r2, pc, #4	; (adr r2, 8001ed8 <tft_init+0x234>)
 8001ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed6:	bf00      	nop
 8001ed8:	080021bd 	.word	0x080021bd
 8001edc:	08002343 	.word	0x08002343
 8001ee0:	08002343 	.word	0x08002343
 8001ee4:	08002343 	.word	0x08002343
 8001ee8:	08002343 	.word	0x08002343
 8001eec:	08002343 	.word	0x08002343
 8001ef0:	08002343 	.word	0x08002343
 8001ef4:	08002343 	.word	0x08002343
 8001ef8:	08002343 	.word	0x08002343
 8001efc:	08002343 	.word	0x08002343
 8001f00:	08002343 	.word	0x08002343
 8001f04:	08002343 	.word	0x08002343
 8001f08:	08002343 	.word	0x08002343
 8001f0c:	08002343 	.word	0x08002343
 8001f10:	08002343 	.word	0x08002343
 8001f14:	08002343 	.word	0x08002343
 8001f18:	08002343 	.word	0x08002343
 8001f1c:	08002343 	.word	0x08002343
 8001f20:	08002343 	.word	0x08002343
 8001f24:	08002343 	.word	0x08002343
 8001f28:	08002343 	.word	0x08002343
 8001f2c:	08002343 	.word	0x08002343
 8001f30:	08002343 	.word	0x08002343
 8001f34:	08002343 	.word	0x08002343
 8001f38:	08002343 	.word	0x08002343
 8001f3c:	08002343 	.word	0x08002343
 8001f40:	08002343 	.word	0x08002343
 8001f44:	08002343 	.word	0x08002343
 8001f48:	08002343 	.word	0x08002343
 8001f4c:	08002343 	.word	0x08002343
 8001f50:	0800212f 	.word	0x0800212f
 8001f54:	08002343 	.word	0x08002343
 8001f58:	08002343 	.word	0x08002343
 8001f5c:	08002343 	.word	0x08002343
 8001f60:	08002343 	.word	0x08002343
 8001f64:	0800214f 	.word	0x0800214f
 8001f68:	08002343 	.word	0x08002343
 8001f6c:	0800216f 	.word	0x0800216f
 8001f70:	0800214f 	.word	0x0800214f
 8001f74:	080021d1 	.word	0x080021d1
 8001f78:	08002343 	.word	0x08002343
 8001f7c:	08002343 	.word	0x08002343
 8001f80:	08002343 	.word	0x08002343
 8001f84:	08002343 	.word	0x08002343
 8001f88:	08002343 	.word	0x08002343
 8001f8c:	08002343 	.word	0x08002343
 8001f90:	08002343 	.word	0x08002343
 8001f94:	08002159 	.word	0x08002159
 8001f98:	08002343 	.word	0x08002343
 8001f9c:	08002343 	.word	0x08002343
 8001fa0:	08002343 	.word	0x08002343
 8001fa4:	08002159 	.word	0x08002159
 8001fa8:	08002343 	.word	0x08002343
 8001fac:	08002343 	.word	0x08002343
 8001fb0:	080021c7 	.word	0x080021c7
 8001fb4:	08002343 	.word	0x08002343
 8001fb8:	08002343 	.word	0x08002343
 8001fbc:	08002343 	.word	0x08002343
 8001fc0:	08002343 	.word	0x08002343
 8001fc4:	08002343 	.word	0x08002343
 8001fc8:	08002343 	.word	0x08002343
 8001fcc:	08002343 	.word	0x08002343
 8001fd0:	080021e7 	.word	0x080021e7
 8001fd4:	080021f1 	.word	0x080021f1
 8001fd8:	08002203 	.word	0x08002203
        init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
        break;
#endif

    case 0x1511:                // Unknown from Levy
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <tft_init+0x368>)
 8001fde:	2203      	movs	r2, #3
 8001fe0:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61511_regValues[]  = {
			0xB0, 1, 0x00,       //Command Access Protect
        };
        table8_ads = R61511_regValues, table_size = sizeof(R61511_regValues);
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <tft_init+0x36c>)
 8001fe4:	61fb      	str	r3, [r7, #28]
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001fea:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <tft_init+0x370>)
 8001fec:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001ff4:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <tft_init+0x374>)
 8001ff8:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002000:	801a      	strh	r2, [r3, #0]
        break;
 8002002:	e1a4      	b.n	800234e <tft_init+0x6aa>
 8002004:	200000e0 	.word	0x200000e0
 8002008:	200000e4 	.word	0x200000e4
 800200c:	200000e2 	.word	0x200000e2
 8002010:	0802e4ec 	.word	0x0802e4ec
 8002014:	08001071 	.word	0x08001071
 8002018:	08001059 	.word	0x08001059

    case 0x1520:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800201c:	4b91      	ldr	r3, [pc, #580]	; (8002264 <tft_init+0x5c0>)
 800201e:	f240 4213 	movw	r2, #1043	; 0x413
 8002022:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61520_regValues[]  = {
            0xB0, 1, 0x00,      //Command Access Protect
            0xC0, 1, 0x0A,      //DM=1, BGR=1
        };
        table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 8002024:	4b90      	ldr	r3, [pc, #576]	; (8002268 <tft_init+0x5c4>)
 8002026:	61fb      	str	r3, [r7, #28]
 8002028:	2306      	movs	r3, #6
 800202a:	837b      	strh	r3, [r7, #26]
        break;
 800202c:	e18f      	b.n	800234e <tft_init+0x6aa>

	case 0x1526:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800202e:	4b8d      	ldr	r3, [pc, #564]	; (8002264 <tft_init+0x5c0>)
 8002030:	f240 4213 	movw	r2, #1043	; 0x413
 8002034:	801a      	strh	r2, [r3, #0]
            0xB0, 1, 0x03,      //Command Access
            0xE2, 1, 0x3F,      //Command Write Access
            0xC0, 1, 0x22,      //REV=0, BGR=1, SS=0
            0xE2, 1, 0x00,      //Command Write Protect
        };
        table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 8002036:	4b8d      	ldr	r3, [pc, #564]	; (800226c <tft_init+0x5c8>)
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	230c      	movs	r3, #12
 800203c:	837b      	strh	r3, [r7, #26]
        break;
 800203e:	e186      	b.n	800234e <tft_init+0x6aa>
        init_table16(LGDP4535_regValues, sizeof(LGDP4535_regValues));
        break;
#endif

    case 0x5310:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | INVERT_RGB | READ_24BITS;
 8002040:	4b88      	ldr	r3, [pc, #544]	; (8002264 <tft_init+0x5c0>)
 8002042:	f640 6213 	movw	r2, #3603	; 0xe13
 8002046:	801a      	strh	r2, [r3, #0]
        static const uint8_t NT35310_regValues[]  = {        //
            TFTLCD_DELAY8, 10,    //just some dummy
        };
        table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 8002048:	4b89      	ldr	r3, [pc, #548]	; (8002270 <tft_init+0x5cc>)
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	2302      	movs	r3, #2
 800204e:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8002050:	4b88      	ldr	r3, [pc, #544]	; (8002274 <tft_init+0x5d0>)
 8002052:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800205a:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800205c:	4b86      	ldr	r3, [pc, #536]	; (8002278 <tft_init+0x5d4>)
 800205e:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002066:	801a      	strh	r2, [r3, #0]
        break;
 8002068:	e171      	b.n	800234e <tft_init+0x6aa>

#ifdef SUPPORT_68140
    case 0x6814:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 800206a:	4b7e      	ldr	r3, [pc, #504]	; (8002264 <tft_init+0x5c0>)
 800206c:	f240 4203 	movw	r2, #1027	; 0x403
 8002070:	801a      	strh	r2, [r3, #0]
		static const uint8_t RM68140_regValues_max[]  = {        //
            0x3A, 1, 0x55,      //Pixel format .kbv my Mega Shield
        };
        table8_ads = RM68140_regValues_max, table_size = sizeof(RM68140_regValues_max);
 8002072:	4b82      	ldr	r3, [pc, #520]	; (800227c <tft_init+0x5d8>)
 8002074:	61fb      	str	r3, [r7, #28]
 8002076:	2303      	movs	r3, #3
 8002078:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800207a:	4b7e      	ldr	r3, [pc, #504]	; (8002274 <tft_init+0x5d0>)
 800207c:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002084:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8002086:	4b7c      	ldr	r3, [pc, #496]	; (8002278 <tft_init+0x5d4>)
 8002088:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002090:	801a      	strh	r2, [r3, #0]
        break;
 8002092:	e15c      	b.n	800234e <tft_init+0x6aa>
        init_table16(ST7781_regValues, sizeof(ST7781_regValues));
        break;
#endif

    case 0x7789:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8002094:	4b73      	ldr	r3, [pc, #460]	; (8002264 <tft_init+0x5c0>)
 8002096:	f240 4213 	movw	r2, #1043	; 0x413
 800209a:	801a      	strh	r2, [r3, #0]
            (0x55), 1, 0x90,    //WRCACE  [00]
            (0xD0), 2, 0xA4, 0xA1,      //PWCTRL1: Power Control 1 [A4 A1]
            (0xE0), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x2A, 0x3C, 0x55, 0x4B, 0x08, 0x16, 0x14, 0x19, 0x20,     //PVGAMCTRL: Positive Voltage Gamma control
            (0xE1), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x29, 0x36, 0x54, 0x4B, 0x0D, 0x16, 0x14, 0x21, 0x20,     //NVGAMCTRL: Negative Voltage Gamma control
        };
        table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 800209c:	4b78      	ldr	r3, [pc, #480]	; (8002280 <tft_init+0x5dc>)
 800209e:	61fb      	str	r3, [r7, #28]
 80020a0:	2341      	movs	r3, #65	; 0x41
 80020a2:	837b      	strh	r3, [r7, #26]
        break;
 80020a4:	e153      	b.n	800234e <tft_init+0x6aa>

    case 0x8031:      //Unknown BangGood thanks PrinceCharles
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 80020a6:	4b6f      	ldr	r3, [pc, #444]	; (8002264 <tft_init+0x5c0>)
 80020a8:	f241 4213 	movw	r2, #5139	; 0x1413
 80020ac:	801a      	strh	r2, [r3, #0]
        static const uint8_t FK8031_regValues[]  = {
            // 0xF2:8.2 = SM, 0xF2:8.0 = REV. invertDisplay(), vertScroll() do not work
            0xF2,11, 0x16, 0x16, 0x03, 0x08, 0x08, 0x08, 0x08, 0x10, 0x04, 0x16, 0x16, // f.k. 0xF2:8.2 SM=1
            0xFD, 3, 0x11, 0x02, 0x35,     //f.k 0xFD:1.1 creates contiguous scan lins
        };
        table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 80020ae:	4b75      	ldr	r3, [pc, #468]	; (8002284 <tft_init+0x5e0>)
 80020b0:	61fb      	str	r3, [r7, #28]
 80020b2:	2312      	movs	r3, #18
 80020b4:	837b      	strh	r3, [r7, #26]
        break;
 80020b6:	e14a      	b.n	800234e <tft_init+0x6aa>
        //        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
        break;
#endif

    case 0x8357:                //BIG CHANGE: HX8357-B is now 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN;
 80020b8:	4b6a      	ldr	r3, [pc, #424]	; (8002264 <tft_init+0x5c0>)
 80020ba:	f241 4203 	movw	r2, #5123	; 0x1403
 80020be:	801a      	strh	r2, [r3, #0]
        goto common_8357;
 80020c0:	e003      	b.n	80020ca <tft_init+0x426>
    case 0x9090:                //BIG CHANGE: HX8357-D was 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 80020c2:	4b68      	ldr	r3, [pc, #416]	; (8002264 <tft_init+0x5c0>)
 80020c4:	f241 4213 	movw	r2, #5139	; 0x1413
 80020c8:	801a      	strh	r2, [r3, #0]
      common_8357:
	  	dummy=1;
 80020ca:	2301      	movs	r3, #1
 80020cc:	617b      	str	r3, [r7, #20]
        static const uint8_t HX8357C_regValues[]  = {
            TFTLCD_DELAY8, 1,  //dummy table
        };
        table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 80020ce:	4b6e      	ldr	r3, [pc, #440]	; (8002288 <tft_init+0x5e4>)
 80020d0:	61fb      	str	r3, [r7, #28]
 80020d2:	2302      	movs	r3, #2
 80020d4:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80020d6:	4b67      	ldr	r3, [pc, #412]	; (8002274 <tft_init+0x5d0>)
 80020d8:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80020e0:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80020e2:	4b65      	ldr	r3, [pc, #404]	; (8002278 <tft_init+0x5d4>)
 80020e4:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80020ec:	801a      	strh	r2, [r3, #0]
        break;
 80020ee:	e12e      	b.n	800234e <tft_init+0x6aa>

    case 0x0099:                //HX8357-D matches datasheet
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 80020f0:	4b5c      	ldr	r3, [pc, #368]	; (8002264 <tft_init+0x5c0>)
 80020f2:	f241 4213 	movw	r2, #5139	; 0x1413
 80020f6:	801a      	strh	r2, [r3, #0]
#ifdef SUPPORT_8357D_GAMMA
            // HX8357D_SETGAMMA [0B 0C 11 1D 25 37 43 4B 4E 47 41 39 35 31 2E 21 1C 1D 1D 26 31 44 4E 56 44 3F 39 33 31 2E 28 1D E0 01]
            (0xE0),34, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x00, 0x01,
#endif
        };
        table8_ads = HX8357_99_regValues, table_size = sizeof(HX8357_99_regValues);
 80020f8:	4b64      	ldr	r3, [pc, #400]	; (800228c <tft_init+0x5e8>)
 80020fa:	61fb      	str	r3, [r7, #28]
 80020fc:	231d      	movs	r3, #29
 80020fe:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8002100:	4b5c      	ldr	r3, [pc, #368]	; (8002274 <tft_init+0x5d0>)
 8002102:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800210a:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800210c:	4b5a      	ldr	r3, [pc, #360]	; (8002278 <tft_init+0x5d4>)
 800210e:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002116:	801a      	strh	r2, [r3, #0]
        break;
 8002118:	e119      	b.n	800234e <tft_init+0x6aa>
        *p16 = 176;
        break;
#endif

    case 0x0001:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS; //no RGB bug. thanks Ivo_Deshev
 800211a:	4b52      	ldr	r3, [pc, #328]	; (8002264 <tft_init+0x5c0>)
 800211c:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8002120:	801a      	strh	r2, [r3, #0]
        goto common_9320;
 8002122:	e008      	b.n	8002136 <tft_init+0x492>
    case 0x5408:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR; //Red 2.4" thanks jorgenv, Ardlab_Gent
 8002124:	4b4f      	ldr	r3, [pc, #316]	; (8002264 <tft_init+0x5c0>)
 8002126:	f241 0204 	movw	r2, #4100	; 0x1004
 800212a:	801a      	strh	r2, [r3, #0]
//        _lcd_capable = 0 | REV_SCREEN | READ_BGR | INVERT_GS; //Blue 2.8" might be different
        goto common_9320;
 800212c:	e003      	b.n	8002136 <tft_init+0x492>
    case 0x1505:                //R61505 thanks Ravi_kanchan2004. R61505V, R61505W different
    case 0x9320:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR;
 800212e:	4b4d      	ldr	r3, [pc, #308]	; (8002264 <tft_init+0x5c0>)
 8002130:	f241 0204 	movw	r2, #4100	; 0x1004
 8002134:	801a      	strh	r2, [r3, #0]
      common_9320:
	    dummy=1;
 8002136:	2301      	movs	r3, #1
 8002138:	617b      	str	r3, [r7, #20]
            0x0098, 0x0000,
            //-----Display on-----------------------
            0x0007, 0x0173,
            TFTLCD_DELAY, 50,
        };
        init_table16(ILI9320_regValues, sizeof(ILI9320_regValues));
 800213a:	21d8      	movs	r1, #216	; 0xd8
 800213c:	4854      	ldr	r0, [pc, #336]	; (8002290 <tft_init+0x5ec>)
 800213e:	f7ff fb9c 	bl	800187a <init_table16>
        break;
 8002142:	e104      	b.n	800234e <tft_init+0x6aa>
    case 0x6809:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS | AUTO_READINC;
 8002144:	4b47      	ldr	r3, [pc, #284]	; (8002264 <tft_init+0x5c0>)
 8002146:	f241 1202 	movw	r2, #4354	; 0x1102
 800214a:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 800214c:	e008      	b.n	8002160 <tft_init+0x4bc>
    case 0x9328:
    case 0x9325:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS;
 800214e:	4b45      	ldr	r3, [pc, #276]	; (8002264 <tft_init+0x5c0>)
 8002150:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8002154:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8002156:	e003      	b.n	8002160 <tft_init+0x4bc>
    case 0x9331:
    case 0x9335:
        _lcd_capable = 0 | REV_SCREEN;
 8002158:	4b42      	ldr	r3, [pc, #264]	; (8002264 <tft_init+0x5c0>)
 800215a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800215e:	801a      	strh	r2, [r3, #0]
      common_93x5:
	    dummy=1;
 8002160:	2301      	movs	r3, #1
 8002162:	617b      	str	r3, [r7, #20]
            //-------------- Panel Control -------------------//
            0x0090, 0x0010,
            0x0092, 0x0000,
            0x0007, 0x0133,     // 262K color and display ON
        };
        init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 8002164:	21cc      	movs	r1, #204	; 0xcc
 8002166:	484b      	ldr	r0, [pc, #300]	; (8002294 <tft_init+0x5f0>)
 8002168:	f7ff fb87 	bl	800187a <init_table16>
        break;
 800216c:	e0ef      	b.n	800234e <tft_init+0x6aa>
        *p16 = 240;
        break;
#endif

    case 0x9327:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 800216e:	4b3d      	ldr	r3, [pc, #244]	; (8002264 <tft_init+0x5c0>)
 8002170:	f240 4203 	movw	r2, #1027	; 0x403
 8002174:	801a      	strh	r2, [r3, #0]
            //            0xC8, 15, 0x00, 0x77, 0x77, 0x04, 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0xCA, 1, 0x00,      //DGC LUT ???
            0xEA, 1, 0x80,      //3-Gamma Function Enable
            //                     0xB0, 1, 0x03,      //Enable Protect
        };
        table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 8002176:	4b48      	ldr	r3, [pc, #288]	; (8002298 <tft_init+0x5f4>)
 8002178:	61fb      	str	r3, [r7, #28]
 800217a:	231e      	movs	r3, #30
 800217c:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800217e:	4b3d      	ldr	r3, [pc, #244]	; (8002274 <tft_init+0x5d0>)
 8002180:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002188:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800218a:	4b3b      	ldr	r3, [pc, #236]	; (8002278 <tft_init+0x5d4>)
 800218c:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	22f0      	movs	r2, #240	; 0xf0
 8002192:	801a      	strh	r2, [r3, #0]
        break;
 8002194:	e0db      	b.n	800234e <tft_init+0x6aa>
    case 0x1602:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not readGRAM
 8002196:	4b33      	ldr	r3, [pc, #204]	; (8002264 <tft_init+0x5c0>)
 8002198:	f240 4203 	movw	r2, #1027	; 0x403
 800219c:	801a      	strh	r2, [r3, #0]
        static const uint8_t XX1602_regValues[]  = {
            0xB8, 1, 0x01,      //GS [00]
            0xC0, 1, 0x0E,      //??Power [0A]
        };
        table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 800219e:	4b3f      	ldr	r3, [pc, #252]	; (800229c <tft_init+0x5f8>)
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	2306      	movs	r3, #6
 80021a4:	837b      	strh	r3, [r7, #26]
        break;
 80021a6:	e0d2      	b.n	800234e <tft_init+0x6aa>

    case 0x2053:    //weird from BangGood
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN | READ_BGR;
 80021a8:	4b2e      	ldr	r3, [pc, #184]	; (8002264 <tft_init+0x5c0>)
 80021aa:	f241 4217 	movw	r2, #5143	; 0x1417
 80021ae:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80021b0:	e012      	b.n	80021d8 <tft_init+0x534>
    case 0xAC11:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN; //thanks viliam
 80021b2:	4b2c      	ldr	r3, [pc, #176]	; (8002264 <tft_init+0x5c0>)
 80021b4:	f241 4213 	movw	r2, #5139	; 0x1413
 80021b8:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80021ba:	e00d      	b.n	80021d8 <tft_init+0x534>
    case 0x9302:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 80021bc:	4b29      	ldr	r3, [pc, #164]	; (8002264 <tft_init+0x5c0>)
 80021be:	f240 4203 	movw	r2, #1027	; 0x403
 80021c2:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80021c4:	e008      	b.n	80021d8 <tft_init+0x534>
    case 0x9338:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80021c6:	4b27      	ldr	r3, [pc, #156]	; (8002264 <tft_init+0x5c0>)
 80021c8:	f240 4213 	movw	r2, #1043	; 0x413
 80021cc:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80021ce:	e003      	b.n	80021d8 <tft_init+0x534>
    case 0x9329:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | REV_SCREEN;
 80021d0:	4b24      	ldr	r3, [pc, #144]	; (8002264 <tft_init+0x5c0>)
 80021d2:	f241 6203 	movw	r2, #5635	; 0x1603
 80021d6:	801a      	strh	r2, [r3, #0]
	  common_9329:
	    dummy=1;
 80021d8:	2301      	movs	r3, #1
 80021da:	617b      	str	r3, [r7, #20]
//            0xF6, 3, 0x01, 0x01, 0x00,  //Interface Control needs EXTC=1 MX_EOR=1, TM=0, RIM=0
//            0xB6, 3, 0x0A, 0x82, 0x27,  //Display Function [0A 82 27]
//            0xB7, 1, 0x06,      //Entry Mode Set [06]
            0x36, 1, 0x00,      //Memory Access [00] pointless but stops an empty array
        };
        table8_ads = ILI9329_regValues, table_size = sizeof(ILI9329_regValues);
 80021dc:	4b30      	ldr	r3, [pc, #192]	; (80022a0 <tft_init+0x5fc>)
 80021de:	61fb      	str	r3, [r7, #28]
 80021e0:	2303      	movs	r3, #3
 80021e2:	837b      	strh	r3, [r7, #26]
        break;
 80021e4:	e0b3      	b.n	800234e <tft_init+0x6aa>

    case 0x9340:                //ILI9340 thanks Ravi_kanchan2004.
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 80021e6:	4b1f      	ldr	r3, [pc, #124]	; (8002264 <tft_init+0x5c0>)
 80021e8:	f241 4213 	movw	r2, #5139	; 0x1413
 80021ec:	801a      	strh	r2, [r3, #0]
        goto common_9341;
 80021ee:	bf00      	nop
    case 0x9341:
      common_9341:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80021f0:	4b1c      	ldr	r3, [pc, #112]	; (8002264 <tft_init+0x5c0>)
 80021f2:	f240 4213 	movw	r2, #1043	; 0x413
 80021f6:	801a      	strh	r2, [r3, #0]
            0xC7, 1, 0xC0,      //VCOM 2 [C0]
            0x36, 1, 0x88,      //Memory Access [00]
            0xB1, 2, 0x00, 0x1B,        //Frame Control [00 1B]
            0xB7, 1, 0x07,      //Entry Mode [00]
        };
        table8_ads = ILI9341_regValues_2_4, table_size = sizeof(ILI9341_regValues_2_4);   //
 80021f8:	4b2a      	ldr	r3, [pc, #168]	; (80022a4 <tft_init+0x600>)
 80021fa:	61fb      	str	r3, [r7, #28]
 80021fc:	2365      	movs	r3, #101	; 0x65
 80021fe:	837b      	strh	r3, [r7, #26]
        break;
 8002200:	e0a5      	b.n	800234e <tft_init+0x6aa>
#if defined(SUPPORT_9342)
    case 0x9342:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | INVERT_GS | REV_SCREEN;
 8002202:	4b18      	ldr	r3, [pc, #96]	; (8002264 <tft_init+0x5c0>)
 8002204:	f241 5213 	movw	r2, #5395	; 0x1513
 8002208:	801a      	strh	r2, [r3, #0]
            (0xC7), 1, 0xA4,
            (0xB8), 1, 0x0B,
            (0xE0), 15, 0x0F, 0x24, 0x21, 0x0C, 0x0F, 0x06, 0x50, 0x75, 0x3F, 0x07, 0x12, 0x05, 0x11, 0x0B, 0x08,
            (0xE1), 15, 0x08, 0x1D, 0x20, 0x02, 0x0E, 0x04, 0x31, 0x24, 0x42, 0x03, 0x0B, 0x09, 0x30, 0x36, 0x0F,
        };
        table8_ads = ILI9342_regValues_CPT24, table_size = sizeof(ILI9342_regValues_CPT24);   //
 800220a:	4b27      	ldr	r3, [pc, #156]	; (80022a8 <tft_init+0x604>)
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	2338      	movs	r3, #56	; 0x38
 8002210:	837b      	strh	r3, [r7, #26]
        //        table8_ads = ILI9342_regValues_Tianma23, table_size = sizeof(ILI9342_regValues_Tianma23);   //
        //        table8_ads = ILI9342_regValues_HSD23, table_size = sizeof(ILI9342_regValues_HSD23);   //
        p16 = (int16_t *) & height;
 8002212:	4b18      	ldr	r3, [pc, #96]	; (8002274 <tft_init+0x5d0>)
 8002214:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	22f0      	movs	r2, #240	; 0xf0
 800221a:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800221c:	4b16      	ldr	r3, [pc, #88]	; (8002278 <tft_init+0x5d4>)
 800221e:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002226:	801a      	strh	r2, [r3, #0]
        break;
 8002228:	e091      	b.n	800234e <tft_init+0x6aa>
#endif
    case 0x1581:                        //no BGR in MADCTL.  set BGR in Panel Control
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS; //thanks zdravke
 800222a:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <tft_init+0x5c0>)
 800222c:	f240 4213 	movw	r2, #1043	; 0x413
 8002230:	801a      	strh	r2, [r3, #0]
		goto common_9481;
 8002232:	e003      	b.n	800223c <tft_init+0x598>
    case 0x9481:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 8002234:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <tft_init+0x5c0>)
 8002236:	f240 4207 	movw	r2, #1031	; 0x407
 800223a:	801a      	strh	r2, [r3, #0]
	  common_9481:
	    dummy=1;
 800223c:	2301      	movs	r3, #1
 800223e:	617b      	str	r3, [r7, #20]
            0x0C, 2, 0x00, 0x55, //RDCOLMOD
			0xB4, 1, 0x00,      //SETDISPLAY
//			0xB3, 4, 0x00, 0x01, 0x06, 0x01,  //SETGRAM simple example
			0xB3, 4, 0x00, 0x01, 0x06, 0x30,  //jpegs example
        };
        table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 8002240:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <tft_init+0x608>)
 8002242:	61fb      	str	r3, [r7, #28]
 8002244:	2345      	movs	r3, #69	; 0x45
 8002246:	837b      	strh	r3, [r7, #26]
//        table8_ads = ILI9481_CPT29_regValues, table_size = sizeof(ILI9481_CPT29_regValues);
//        table8_ads = ILI9481_PVI35_regValues, table_size = sizeof(ILI9481_PVI35_regValues);
//        table8_ads = ILI9481_AUO317_regValues, table_size = sizeof(ILI9481_AUO317_regValues);
//        table8_ads = ILI9481_CMO35_regValues, table_size = sizeof(ILI9481_CMO35_regValues);
//        table8_ads = ILI9481_RGB_regValues, table_size = sizeof(ILI9481_RGB_regValues);
        p16 = (int16_t *) & height;
 8002248:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <tft_init+0x5d0>)
 800224a:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002252:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8002254:	4b08      	ldr	r3, [pc, #32]	; (8002278 <tft_init+0x5d4>)
 8002256:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800225e:	801a      	strh	r2, [r3, #0]
        break;
 8002260:	e075      	b.n	800234e <tft_init+0x6aa>
 8002262:	bf00      	nop
 8002264:	200000e2 	.word	0x200000e2
 8002268:	0802e4f0 	.word	0x0802e4f0
 800226c:	0802e4f8 	.word	0x0802e4f8
 8002270:	0802e504 	.word	0x0802e504
 8002274:	08001071 	.word	0x08001071
 8002278:	08001059 	.word	0x08001059
 800227c:	0802e508 	.word	0x0802e508
 8002280:	0802e50c 	.word	0x0802e50c
 8002284:	0802e550 	.word	0x0802e550
 8002288:	0802e564 	.word	0x0802e564
 800228c:	0802e568 	.word	0x0802e568
 8002290:	0802e588 	.word	0x0802e588
 8002294:	0802e660 	.word	0x0802e660
 8002298:	0802e72c 	.word	0x0802e72c
 800229c:	0802e74c 	.word	0x0802e74c
 80022a0:	0802e754 	.word	0x0802e754
 80022a4:	0802e758 	.word	0x0802e758
 80022a8:	0802e7c0 	.word	0x0802e7c0
 80022ac:	0802e7f8 	.word	0x0802e7f8
    case 0x9486:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 80022b0:	4b50      	ldr	r3, [pc, #320]	; (80023f4 <tft_init+0x750>)
 80022b2:	f240 4203 	movw	r2, #1027	; 0x403
 80022b6:	801a      	strh	r2, [r3, #0]
            // 4.2 WTK 3.5 Inch Initial Code too white
			0xE0, 15, 0x0F, 0x10, 0x08, 0x05, 0x09, 0x05, 0x37, 0x98, 0x26, 0x07, 0x0F, 0x02, 0x09, 0x07, 0x00,
			0xE1, 15, 0x0F, 0x38, 0x36, 0x0D, 0x10, 0x08, 0x59, 0x76, 0x48, 0x0A, 0x16, 0x0A, 0x37, 0x2F, 0x00,
#endif
        };
        table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 80022b8:	4b4f      	ldr	r3, [pc, #316]	; (80023f8 <tft_init+0x754>)
 80022ba:	61fb      	str	r3, [r7, #28]
 80022bc:	233b      	movs	r3, #59	; 0x3b
 80022be:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80022c0:	4b4e      	ldr	r3, [pc, #312]	; (80023fc <tft_init+0x758>)
 80022c2:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80022ca:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80022cc:	4b4c      	ldr	r3, [pc, #304]	; (8002400 <tft_init+0x75c>)
 80022ce:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80022d6:	801a      	strh	r2, [r3, #0]
        break;
 80022d8:	e039      	b.n	800234e <tft_init+0x6aa>
    case 0x7796:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;   //thanks to safari1
 80022da:	4b46      	ldr	r3, [pc, #280]	; (80023f4 <tft_init+0x750>)
 80022dc:	f240 4203 	movw	r2, #1027	; 0x403
 80022e0:	801a      	strh	r2, [r3, #0]
        goto common_9488;
 80022e2:	e003      	b.n	80022ec <tft_init+0x648>
    case 0x9487:                //with thanks to Charlyf
    case 0x9488:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80022e4:	4b43      	ldr	r3, [pc, #268]	; (80023f4 <tft_init+0x750>)
 80022e6:	f240 4213 	movw	r2, #1043	; 0x413
 80022ea:	801a      	strh	r2, [r3, #0]
      common_9488:
	    dummy=1;
 80022ec:	2301      	movs	r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
            0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B] .kbv NL=480
            0xB7, 1, 0xC6,      //Entry Mode      [06]
            0x3A, 1, 0x55,      //Interlace Pixel Format [XX]
            0xF7, 4, 0xA9, 0x51, 0x2C, 0x82,    //Adjustment Control 3 [A9 51 2C 82]
        };
        table8_ads = ILI9488_regValues_max, table_size = sizeof(ILI9488_regValues_max);
 80022f0:	4b44      	ldr	r3, [pc, #272]	; (8002404 <tft_init+0x760>)
 80022f2:	61fb      	str	r3, [r7, #28]
 80022f4:	232b      	movs	r3, #43	; 0x2b
 80022f6:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80022f8:	4b40      	ldr	r3, [pc, #256]	; (80023fc <tft_init+0x758>)
 80022fa:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002302:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8002304:	4b3e      	ldr	r3, [pc, #248]	; (8002400 <tft_init+0x75c>)
 8002306:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800230e:	801a      	strh	r2, [r3, #0]
        break;
 8002310:	e01d      	b.n	800234e <tft_init+0x6aa>
    case 0xB505:                //R61505V
    case 0xC505:                //R61505W
        _lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 8002312:	4b38      	ldr	r3, [pc, #224]	; (80023f4 <tft_init+0x750>)
 8002314:	f241 0208 	movw	r2, #4104	; 0x1008
 8002318:	801a      	strh	r2, [r3, #0]
            0x0092, 0x0100,
            0x0093, 0x0701,
            TFTLCD_DELAY, 80,
            0x0007, 0x0100,     //BASEE=1--Display On
        };
        init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 800231a:	21b0      	movs	r1, #176	; 0xb0
 800231c:	483a      	ldr	r0, [pc, #232]	; (8002408 <tft_init+0x764>)
 800231e:	f7ff faac 	bl	800187a <init_table16>
        break;
 8002322:	e014      	b.n	800234e <tft_init+0x6aa>

#if defined(SUPPORT_B509_7793)
    case 0x7793:
    case 0xB509:
        _lcd_capable = REV_SCREEN;
 8002324:	4b33      	ldr	r3, [pc, #204]	; (80023f4 <tft_init+0x750>)
 8002326:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800232a:	801a      	strh	r2, [r3, #0]
            TFTLCD_DELAY, 50,

            0x0200, 0x0000,
            0x0201, 0x0000,
        };
        init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 800232c:	21c0      	movs	r1, #192	; 0xc0
 800232e:	4837      	ldr	r0, [pc, #220]	; (800240c <tft_init+0x768>)
 8002330:	f7ff faa3 	bl	800187a <init_table16>
        p16 = (int16_t *) & height;
 8002334:	4b31      	ldr	r3, [pc, #196]	; (80023fc <tft_init+0x758>)
 8002336:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800233e:	801a      	strh	r2, [r3, #0]
        break;
 8002340:	e005      	b.n	800234e <tft_init+0x6aa>
        p16 = (int16_t *) & width;
        *p16 = 854;
        break;
#endif
    default:
        p16 = (int16_t *) & width;
 8002342:	4b2f      	ldr	r3, [pc, #188]	; (8002400 <tft_init+0x75c>)
 8002344:	613b      	str	r3, [r7, #16]
        *p16 = 0;       //error value for width
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2200      	movs	r2, #0
 800234a:	801a      	strh	r2, [r3, #0]
        break;
 800234c:	bf00      	nop
    }
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 800234e:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <tft_init+0x750>)
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002356:	2b00      	cmp	r3, #0
 8002358:	bf14      	ite	ne
 800235a:	2301      	movne	r3, #1
 800235c:	2300      	moveq	r3, #0
 800235e:	b2db      	uxtb	r3, r3
 8002360:	b29a      	uxth	r2, r3
 8002362:	4b2b      	ldr	r3, [pc, #172]	; (8002410 <tft_init+0x76c>)
 8002364:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00d      	beq.n	8002388 <tft_init+0x6e4>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 800236c:	2109      	movs	r1, #9
 800236e:	4829      	ldr	r0, [pc, #164]	; (8002414 <tft_init+0x770>)
 8002370:	f7ff fa2a 	bl	80017c8 <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 8002374:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002378:	4619      	mov	r1, r3
 800237a:	69f8      	ldr	r0, [r7, #28]
 800237c:	f7ff fa24 	bl	80017c8 <init_table>
		init_table(&wake_on, sizeof(wake_on));
 8002380:	2106      	movs	r1, #6
 8002382:	4825      	ldr	r0, [pc, #148]	; (8002418 <tft_init+0x774>)
 8002384:	f7ff fa20 	bl	80017c8 <init_table>
    }
    setRotation(0);             //PORTRAIT
 8002388:	2000      	movs	r0, #0
 800238a:	f000 fe83 	bl	8003094 <setRotation>
    invertDisplay(false);
 800238e:	2000      	movs	r0, #0
 8002390:	f001 fc22 	bl	8003bd8 <invertDisplay>
#if defined(SUPPORT_9488_555)
    if (_lcd_ID == 0x9488) {
 8002394:	4b21      	ldr	r3, [pc, #132]	; (800241c <tft_init+0x778>)
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	f249 4288 	movw	r2, #38024	; 0x9488
 800239c:	4293      	cmp	r3, r2
 800239e:	d125      	bne.n	80023ec <tft_init+0x748>
		is555 = 0;
 80023a0:	4b1f      	ldr	r3, [pc, #124]	; (8002420 <tft_init+0x77c>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]
		drawPixel(0, 0, 0xFFE0);
 80023a6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80023aa:	2100      	movs	r1, #0
 80023ac:	2000      	movs	r0, #0
 80023ae:	f001 f8f9 	bl	80035a4 <drawPixel>
		if (readPixel(0, 0) == 0xFF1F) {
 80023b2:	2100      	movs	r1, #0
 80023b4:	2000      	movs	r0, #0
 80023b6:	f7fe fefe 	bl	80011b6 <readPixel>
 80023ba:	4603      	mov	r3, r0
 80023bc:	461a      	mov	r2, r3
 80023be:	f64f 731f 	movw	r3, #65311	; 0xff1f
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d112      	bne.n	80023ec <tft_init+0x748>
			uint8_t pixfmt = 0x06;
 80023c6:	2306      	movs	r3, #6
 80023c8:	73fb      	strb	r3, [r7, #15]
			pushCommand(0x3A, &pixfmt, 1);
 80023ca:	f107 030f 	add.w	r3, r7, #15
 80023ce:	2201      	movs	r2, #1
 80023d0:	4619      	mov	r1, r3
 80023d2:	203a      	movs	r0, #58	; 0x3a
 80023d4:	f7fe ff19 	bl	800120a <pushCommand>
			_lcd_capable &= ~READ_24BITS;
 80023d8:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <tft_init+0x750>)
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	f023 0310 	bic.w	r3, r3, #16
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <tft_init+0x750>)
 80023e4:	801a      	strh	r2, [r3, #0]
			is555 = 1;
 80023e6:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <tft_init+0x77c>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 80023ec:	bf00      	nop
 80023ee:	3720      	adds	r7, #32
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	200000e2 	.word	0x200000e2
 80023f8:	0802e840 	.word	0x0802e840
 80023fc:	08001071 	.word	0x08001071
 8002400:	08001059 	.word	0x08001059
 8002404:	0802e87c 	.word	0x0802e87c
 8002408:	0802e8a8 	.word	0x0802e8a8
 800240c:	0802e958 	.word	0x0802e958
 8002410:	200000e6 	.word	0x200000e6
 8002414:	0802ea18 	.word	0x0802ea18
 8002418:	0802ea24 	.word	0x0802ea24
 800241c:	200000e4 	.word	0x200000e4
 8002420:	200000da 	.word	0x200000da

08002424 <readID>:

uint16_t readID(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
    uint16_t ret, ret2;
    uint8_t msb;
    ret = readReg(0,0);           //forces a reset() if called before begin()
 800242a:	2100      	movs	r1, #0
 800242c:	2000      	movs	r0, #0
 800242e:	f7ff fb69 	bl	8001b04 <readReg>
 8002432:	4603      	mov	r3, r0
 8002434:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 8002436:	89fb      	ldrh	r3, [r7, #14]
 8002438:	f245 4208 	movw	r2, #21512	; 0x5408
 800243c:	4293      	cmp	r3, r2
 800243e:	d102      	bne.n	8002446 <readID+0x22>
        return 0x5408;
 8002440:	f245 4308 	movw	r3, #21512	; 0x5408
 8002444:	e128      	b.n	8002698 <readID+0x274>
    if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 8002446:	89fb      	ldrh	r3, [r7, #14]
 8002448:	f245 4220 	movw	r2, #21536	; 0x5420
 800244c:	4293      	cmp	r3, r2
 800244e:	d102      	bne.n	8002456 <readID+0x32>
        return 0x5420;
 8002450:	f245 4320 	movw	r3, #21536	; 0x5420
 8002454:	e120      	b.n	8002698 <readID+0x274>
    if (ret == 0x8989)          //SSD1289 is always 8989
 8002456:	89fb      	ldrh	r3, [r7, #14]
 8002458:	f648 1289 	movw	r2, #35209	; 0x8989
 800245c:	4293      	cmp	r3, r2
 800245e:	d102      	bne.n	8002466 <readID+0x42>
        return 0x1289;
 8002460:	f241 2389 	movw	r3, #4745	; 0x1289
 8002464:	e118      	b.n	8002698 <readID+0x274>
    ret = readReg(0x67,0);        //HX8347-A
 8002466:	2100      	movs	r1, #0
 8002468:	2067      	movs	r0, #103	; 0x67
 800246a:	f7ff fb4b 	bl	8001b04 <readReg>
 800246e:	4603      	mov	r3, r0
 8002470:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x4747)
 8002472:	89fb      	ldrh	r3, [r7, #14]
 8002474:	f244 7247 	movw	r2, #18247	; 0x4747
 8002478:	4293      	cmp	r3, r2
 800247a:	d102      	bne.n	8002482 <readID+0x5e>
        return 0x8347;
 800247c:	f248 3347 	movw	r3, #33607	; 0x8347
 8002480:	e10a      	b.n	8002698 <readID+0x274>
//#if defined(SUPPORT_1963) && USING_16BIT_BUS
    ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 8002482:	20a1      	movs	r0, #161	; 0xa1
 8002484:	f7ff fbcc 	bl	8001c20 <readReg32>
 8002488:	4603      	mov	r3, r0
 800248a:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x6101)
 800248c:	89fb      	ldrh	r3, [r7, #14]
 800248e:	f246 1201 	movw	r2, #24833	; 0x6101
 8002492:	4293      	cmp	r3, r2
 8002494:	d102      	bne.n	800249c <readID+0x78>
        return 0x1963;
 8002496:	f641 1363 	movw	r3, #6499	; 0x1963
 800249a:	e0fd      	b.n	8002698 <readID+0x274>
    if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 800249c:	89fb      	ldrh	r3, [r7, #14]
 800249e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d102      	bne.n	80024ac <readID+0x88>
        return 0x1526;          //subsequent begin() enables Command Access
 80024a6:	f241 5326 	movw	r3, #5414	; 0x1526
 80024aa:	e0f5      	b.n	8002698 <readID+0x274>
//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
//        return 0x1520;          //subsequent begin() enables Command Access
//#endif
	ret = readReg40(0xBF);
 80024ac:	20bf      	movs	r0, #191	; 0xbf
 80024ae:	f7ff fbd2 	bl	8001c56 <readReg40>
 80024b2:	4603      	mov	r3, r0
 80024b4:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 80024b6:	89fb      	ldrh	r3, [r7, #14]
 80024b8:	f248 3257 	movw	r2, #33623	; 0x8357
 80024bc:	4293      	cmp	r3, r2
 80024be:	d102      	bne.n	80024c6 <readID+0xa2>
        return 0x8357;
 80024c0:	f248 3357 	movw	r3, #33623	; 0x8357
 80024c4:	e0e8      	b.n	8002698 <readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 80024c6:	89fb      	ldrh	r3, [r7, #14]
 80024c8:	f249 4281 	movw	r2, #38017	; 0x9481
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d102      	bne.n	80024d6 <readID+0xb2>
        return 0x9481;
 80024d0:	f249 4381 	movw	r3, #38017	; 0x9481
 80024d4:	e0e0      	b.n	8002698 <readID+0x274>
    if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 80024d6:	89fb      	ldrh	r3, [r7, #14]
 80024d8:	f241 5211 	movw	r2, #5393	; 0x1511
 80024dc:	4293      	cmp	r3, r2
 80024de:	d102      	bne.n	80024e6 <readID+0xc2>
        return 0x1511;
 80024e0:	f241 5311 	movw	r3, #5393	; 0x1511
 80024e4:	e0d8      	b.n	8002698 <readID+0x274>
    if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 80024e6:	89fb      	ldrh	r3, [r7, #14]
 80024e8:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 80024ec:	d102      	bne.n	80024f4 <readID+0xd0>
        return 0x1520;
 80024ee:	f44f 53a9 	mov.w	r3, #5408	; 0x1520
 80024f2:	e0d1      	b.n	8002698 <readID+0x274>
    if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 80024f4:	89fb      	ldrh	r3, [r7, #14]
 80024f6:	f241 5226 	movw	r2, #5414	; 0x1526
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d102      	bne.n	8002504 <readID+0xe0>
        return 0x1526;
 80024fe:	f241 5326 	movw	r3, #5414	; 0x1526
 8002502:	e0c9      	b.n	8002698 <readID+0x274>
    if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 8002504:	89fb      	ldrh	r3, [r7, #14]
 8002506:	f241 5281 	movw	r2, #5505	; 0x1581
 800250a:	4293      	cmp	r3, r2
 800250c:	d102      	bne.n	8002514 <readID+0xf0>
        return 0x1581;
 800250e:	f241 5381 	movw	r3, #5505	; 0x1581
 8002512:	e0c1      	b.n	8002698 <readID+0x274>
    if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 8002514:	89fb      	ldrh	r3, [r7, #14]
 8002516:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800251a:	d102      	bne.n	8002522 <readID+0xfe>
        return 0x6814;
 800251c:	f646 0314 	movw	r3, #26644	; 0x6814
 8002520:	e0ba      	b.n	8002698 <readID+0x274>
    ret = readReg32(0xD4);
 8002522:	20d4      	movs	r0, #212	; 0xd4
 8002524:	f7ff fb7c 	bl	8001c20 <readReg32>
 8002528:	4603      	mov	r3, r0
 800252a:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 800252c:	89fb      	ldrh	r3, [r7, #14]
 800252e:	f245 3210 	movw	r2, #21264	; 0x5310
 8002532:	4293      	cmp	r3, r2
 8002534:	d102      	bne.n	800253c <readID+0x118>
        return 0x5310;
 8002536:	f245 3310 	movw	r3, #21264	; 0x5310
 800253a:	e0ad      	b.n	8002698 <readID+0x274>
    ret = readReg32(0xD7);
 800253c:	20d7      	movs	r0, #215	; 0xd7
 800253e:	f7ff fb6f 	bl	8001c20 <readReg32>
 8002542:	4603      	mov	r3, r0
 8002544:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 8002546:	89fb      	ldrh	r3, [r7, #14]
 8002548:	f248 0231 	movw	r2, #32817	; 0x8031
 800254c:	4293      	cmp	r3, r2
 800254e:	d102      	bne.n	8002556 <readID+0x132>
        return 0x8031;
 8002550:	f248 0331 	movw	r3, #32817	; 0x8031
 8002554:	e0a0      	b.n	8002698 <readID+0x274>
    ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 8002556:	20ef      	movs	r0, #239	; 0xef
 8002558:	f7ff fb7d 	bl	8001c56 <readReg40>
 800255c:	4603      	mov	r3, r0
 800255e:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9327)
 8002560:	89fb      	ldrh	r3, [r7, #14]
 8002562:	f249 3227 	movw	r2, #37671	; 0x9327
 8002566:	4293      	cmp	r3, r2
 8002568:	d102      	bne.n	8002570 <readID+0x14c>
        return 0x9327;
 800256a:	f249 3327 	movw	r3, #37671	; 0x9327
 800256e:	e093      	b.n	8002698 <readID+0x274>
    ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 8002570:	20fe      	movs	r0, #254	; 0xfe
 8002572:	f7ff fb55 	bl	8001c20 <readReg32>
 8002576:	4603      	mov	r3, r0
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x2053)
 800257c:	89fb      	ldrh	r3, [r7, #14]
 800257e:	f242 0253 	movw	r2, #8275	; 0x2053
 8002582:	4293      	cmp	r3, r2
 8002584:	d102      	bne.n	800258c <readID+0x168>
        return 0x2053;
 8002586:	f242 0353 	movw	r3, #8275	; 0x2053
 800258a:	e085      	b.n	8002698 <readID+0x274>
    uint32_t ret32 = readReg32(0x04);
 800258c:	2004      	movs	r0, #4
 800258e:	f7ff fb47 	bl	8001c20 <readReg32>
 8002592:	60b8      	str	r0, [r7, #8]
    msb = ret32 >> 16;
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	0c1b      	lsrs	r3, r3, #16
 8002598:	71fb      	strb	r3, [r7, #7]
    ret = ret32;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	81fb      	strh	r3, [r7, #14]
//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
    if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d122      	bne.n	80025ea <readID+0x1c6>
 80025a4:	89fb      	ldrh	r3, [r7, #14]
 80025a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025aa:	d11e      	bne.n	80025ea <readID+0x1c6>
#if 1
        uint8_t cmds[] = {0xFF, 0x83, 0x57};
 80025ac:	4a3c      	ldr	r2, [pc, #240]	; (80026a0 <readID+0x27c>)
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	4611      	mov	r1, r2
 80025b4:	8019      	strh	r1, [r3, #0]
 80025b6:	3302      	adds	r3, #2
 80025b8:	0c12      	lsrs	r2, r2, #16
 80025ba:	701a      	strb	r2, [r3, #0]
        pushCommand(0xB9, cmds, 3);
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	2203      	movs	r2, #3
 80025c0:	4619      	mov	r1, r3
 80025c2:	20b9      	movs	r0, #185	; 0xb9
 80025c4:	f7fe fe21 	bl	800120a <pushCommand>
        msb = readReg(0xD0,0);
 80025c8:	2100      	movs	r1, #0
 80025ca:	20d0      	movs	r0, #208	; 0xd0
 80025cc:	f7ff fa9a 	bl	8001b04 <readReg>
 80025d0:	4603      	mov	r3, r0
 80025d2:	71fb      	strb	r3, [r7, #7]
        if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	2b99      	cmp	r3, #153	; 0x99
 80025d8:	d101      	bne.n	80025de <readID+0x1ba>
 80025da:	2399      	movs	r3, #153	; 0x99
 80025dc:	e05c      	b.n	8002698 <readID+0x274>
        if (msb == 0x90)        //HX8357-C undocumented
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	2b90      	cmp	r3, #144	; 0x90
 80025e2:	d102      	bne.n	80025ea <readID+0x1c6>
#endif
            return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 80025e4:	f249 0390 	movw	r3, #37008	; 0x9090
 80025e8:	e056      	b.n	8002698 <readID+0x274>
    }
//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
//        return 0x1526;          //subsequent begin() enables Command Access
    if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 80025ea:	89fb      	ldrh	r3, [r7, #14]
 80025ec:	f241 5226 	movw	r2, #5414	; 0x1526
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d102      	bne.n	80025fa <readID+0x1d6>
        return 0x1526;          //subsequent begin() enables Command Access
 80025f4:	f241 5326 	movw	r3, #5414	; 0x1526
 80025f8:	e04e      	b.n	8002698 <readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 80025fa:	89fb      	ldrh	r3, [r7, #14]
 80025fc:	f648 12f0 	movw	r2, #35312	; 0x89f0
 8002600:	4293      	cmp	r3, r2
 8002602:	d102      	bne.n	800260a <readID+0x1e6>
        return 0x7735;
 8002604:	f247 7335 	movw	r3, #30517	; 0x7735
 8002608:	e046      	b.n	8002698 <readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 800260a:	89fb      	ldrh	r3, [r7, #14]
 800260c:	f248 5252 	movw	r2, #34130	; 0x8552
 8002610:	4293      	cmp	r3, r2
 8002612:	d102      	bne.n	800261a <readID+0x1f6>
        return 0x7789;
 8002614:	f247 7389 	movw	r3, #30601	; 0x7789
 8002618:	e03e      	b.n	8002698 <readID+0x274>
    if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 800261a:	89fb      	ldrh	r3, [r7, #14]
 800261c:	f64a 4211 	movw	r2, #44049	; 0xac11
 8002620:	4293      	cmp	r3, r2
 8002622:	d102      	bne.n	800262a <readID+0x206>
        return 0xAC11;
 8002624:	f64a 4311 	movw	r3, #44049	; 0xac11
 8002628:	e036      	b.n	8002698 <readID+0x274>
    ret32 = readReg32(0xD3);      //[xx 91 63 00]
 800262a:	20d3      	movs	r0, #211	; 0xd3
 800262c:	f7ff faf8 	bl	8001c20 <readReg32>
 8002630:	60b8      	str	r0, [r7, #8]
    ret = ret32 >> 8;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	0a1b      	lsrs	r3, r3, #8
 8002636:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9163) return ret;
 8002638:	89fb      	ldrh	r3, [r7, #14]
 800263a:	f249 1263 	movw	r2, #37219	; 0x9163
 800263e:	4293      	cmp	r3, r2
 8002640:	d101      	bne.n	8002646 <readID+0x222>
 8002642:	89fb      	ldrh	r3, [r7, #14]
 8002644:	e028      	b.n	8002698 <readID+0x274>
    ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 8002646:	20d3      	movs	r0, #211	; 0xd3
 8002648:	f7ff faea 	bl	8001c20 <readReg32>
 800264c:	4603      	mov	r3, r0
 800264e:	81fb      	strh	r3, [r7, #14]
    msb = ret >> 8;
 8002650:	89fb      	ldrh	r3, [r7, #14]
 8002652:	0a1b      	lsrs	r3, r3, #8
 8002654:	b29b      	uxth	r3, r3
 8002656:	71fb      	strb	r3, [r7, #7]
    if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	2b93      	cmp	r3, #147	; 0x93
 800265c:	d00b      	beq.n	8002676 <readID+0x252>
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	2b94      	cmp	r3, #148	; 0x94
 8002662:	d008      	beq.n	8002676 <readID+0x252>
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	2b98      	cmp	r3, #152	; 0x98
 8002668:	d005      	beq.n	8002676 <readID+0x252>
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	2b77      	cmp	r3, #119	; 0x77
 800266e:	d002      	beq.n	8002676 <readID+0x252>
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	2b16      	cmp	r3, #22
 8002674:	d101      	bne.n	800267a <readID+0x256>
        return ret;             //0x9488, 9486, 9340, 9341, 7796
 8002676:	89fb      	ldrh	r3, [r7, #14]
 8002678:	e00e      	b.n	8002698 <readID+0x274>
    if (ret == 0x00D3 || ret == 0xD3D3)
 800267a:	89fb      	ldrh	r3, [r7, #14]
 800267c:	2bd3      	cmp	r3, #211	; 0xd3
 800267e:	d004      	beq.n	800268a <readID+0x266>
 8002680:	89fb      	ldrh	r3, [r7, #14]
 8002682:	f24d 32d3 	movw	r2, #54227	; 0xd3d3
 8002686:	4293      	cmp	r3, r2
 8002688:	d101      	bne.n	800268e <readID+0x26a>
        return ret;             //16-bit write-only bus
 800268a:	89fb      	ldrh	r3, [r7, #14]
 800268c:	e004      	b.n	8002698 <readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
*/
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 800268e:	2100      	movs	r1, #0
 8002690:	2000      	movs	r0, #0
 8002692:	f7ff fa37 	bl	8001b04 <readReg>
 8002696:	4603      	mov	r3, r0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	080060e8 	.word	0x080060e8

080026a4 <readGRAM>:

// independent cursor and window registers.   S6D0154, ST7781 increments.  ILI92320/5 do not.
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h)
{
 80026a4:	b590      	push	{r4, r7, lr}
 80026a6:	b08b      	sub	sp, #44	; 0x2c
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60ba      	str	r2, [r7, #8]
 80026ac:	461a      	mov	r2, r3
 80026ae:	4603      	mov	r3, r0
 80026b0:	81fb      	strh	r3, [r7, #14]
 80026b2:	460b      	mov	r3, r1
 80026b4:	81bb      	strh	r3, [r7, #12]
 80026b6:	4613      	mov	r3, r2
 80026b8:	80fb      	strh	r3, [r7, #6]
    uint16_t ret, dummy, _MR = _MW;
 80026ba:	4b8d      	ldr	r3, [pc, #564]	; (80028f0 <readGRAM+0x24c>)
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	84bb      	strh	r3, [r7, #36]	; 0x24
    int16_t n = w * h, row = 0, col = 0;
 80026c0:	88fa      	ldrh	r2, [r7, #6]
 80026c2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80026c4:	fb12 f303 	smulbb	r3, r2, r3
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	847b      	strh	r3, [r7, #34]	; 0x22
 80026cc:	2300      	movs	r3, #0
 80026ce:	843b      	strh	r3, [r7, #32]
 80026d0:	2300      	movs	r3, #0
 80026d2:	83fb      	strh	r3, [r7, #30]
    uint8_t r, g, b, tmp;
    if (!is8347 && (_lcd_capable & MIPI_DCS_REV1)) // HX8347 uses same register
 80026d4:	4b87      	ldr	r3, [pc, #540]	; (80028f4 <readGRAM+0x250>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d107      	bne.n	80026ec <readGRAM+0x48>
 80026dc:	4b86      	ldr	r3, [pc, #536]	; (80028f8 <readGRAM+0x254>)
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <readGRAM+0x48>
        _MR = 0x2E;
 80026e8:	232e      	movs	r3, #46	; 0x2e
 80026ea:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (_lcd_ID == 0x1602) _MR = 0x2E;
 80026ec:	4b83      	ldr	r3, [pc, #524]	; (80028fc <readGRAM+0x258>)
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	f241 6202 	movw	r2, #5634	; 0x1602
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d101      	bne.n	80026fc <readGRAM+0x58>
 80026f8:	232e      	movs	r3, #46	; 0x2e
 80026fa:	84bb      	strh	r3, [r7, #36]	; 0x24
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 80026fc:	89fa      	ldrh	r2, [r7, #14]
 80026fe:	88fb      	ldrh	r3, [r7, #6]
 8002700:	4413      	add	r3, r2
 8002702:	b29b      	uxth	r3, r3
 8002704:	3b01      	subs	r3, #1
 8002706:	b29b      	uxth	r3, r3
 8002708:	b21c      	sxth	r4, r3
 800270a:	89ba      	ldrh	r2, [r7, #12]
 800270c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800270e:	4413      	add	r3, r2
 8002710:	b29b      	uxth	r3, r3
 8002712:	3b01      	subs	r3, #1
 8002714:	b29b      	uxth	r3, r3
 8002716:	b21b      	sxth	r3, r3
 8002718:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800271c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002720:	4622      	mov	r2, r4
 8002722:	f000 fff5 	bl	8003710 <setAddrWindow>
    while (n > 0) {
 8002726:	f000 bc8c 	b.w	8003042 <readGRAM+0x99e>
        if (!(_lcd_capable & MIPI_DCS_REV1)) {
 800272a:	4b73      	ldr	r3, [pc, #460]	; (80028f8 <readGRAM+0x254>)
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d111      	bne.n	800275a <readGRAM+0xb6>
            WriteCmdData(_MC, x + col);
 8002736:	4b72      	ldr	r3, [pc, #456]	; (8002900 <readGRAM+0x25c>)
 8002738:	8818      	ldrh	r0, [r3, #0]
 800273a:	89fa      	ldrh	r2, [r7, #14]
 800273c:	8bfb      	ldrh	r3, [r7, #30]
 800273e:	4413      	add	r3, r2
 8002740:	b29b      	uxth	r3, r3
 8002742:	4619      	mov	r1, r3
 8002744:	f7fe fd4f 	bl	80011e6 <WriteCmdData>
            WriteCmdData(_MP, y + row);
 8002748:	4b6e      	ldr	r3, [pc, #440]	; (8002904 <readGRAM+0x260>)
 800274a:	8818      	ldrh	r0, [r3, #0]
 800274c:	89ba      	ldrh	r2, [r7, #12]
 800274e:	8c3b      	ldrh	r3, [r7, #32]
 8002750:	4413      	add	r3, r2
 8002752:	b29b      	uxth	r3, r3
 8002754:	4619      	mov	r1, r3
 8002756:	f7fe fd46 	bl	80011e6 <WriteCmdData>
        }
        CS_ACTIVE;
 800275a:	2108      	movs	r1, #8
 800275c:	486a      	ldr	r0, [pc, #424]	; (8002908 <readGRAM+0x264>)
 800275e:	f7fe fc2d 	bl	8000fbc <PIN_LOW>
        WriteCmd(_MR);
 8002762:	2104      	movs	r1, #4
 8002764:	4868      	ldr	r0, [pc, #416]	; (8002908 <readGRAM+0x264>)
 8002766:	f7fe fc29 	bl	8000fbc <PIN_LOW>
 800276a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800276c:	0a1b      	lsrs	r3, r3, #8
 800276e:	b29b      	uxth	r3, r3
 8002770:	777b      	strb	r3, [r7, #29]
 8002772:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002774:	773b      	strb	r3, [r7, #28]
 8002776:	4b64      	ldr	r3, [pc, #400]	; (8002908 <readGRAM+0x264>)
 8002778:	4a64      	ldr	r2, [pc, #400]	; (800290c <readGRAM+0x268>)
 800277a:	619a      	str	r2, [r3, #24]
 800277c:	4b64      	ldr	r3, [pc, #400]	; (8002910 <readGRAM+0x26c>)
 800277e:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8002782:	619a      	str	r2, [r3, #24]
 8002784:	7f7b      	ldrb	r3, [r7, #29]
 8002786:	035b      	lsls	r3, r3, #13
 8002788:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 800278c:	7f7b      	ldrb	r3, [r7, #29]
 800278e:	109b      	asrs	r3, r3, #2
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	431a      	orrs	r2, r3
 8002796:	4b5c      	ldr	r3, [pc, #368]	; (8002908 <readGRAM+0x264>)
 8002798:	619a      	str	r2, [r3, #24]
 800279a:	7f7b      	ldrb	r3, [r7, #29]
 800279c:	4a5c      	ldr	r2, [pc, #368]	; (8002910 <readGRAM+0x26c>)
 800279e:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 80027a2:	6193      	str	r3, [r2, #24]
 80027a4:	2102      	movs	r1, #2
 80027a6:	4858      	ldr	r0, [pc, #352]	; (8002908 <readGRAM+0x264>)
 80027a8:	f7fe fc08 	bl	8000fbc <PIN_LOW>
 80027ac:	2102      	movs	r1, #2
 80027ae:	4856      	ldr	r0, [pc, #344]	; (8002908 <readGRAM+0x264>)
 80027b0:	f7fe fc14 	bl	8000fdc <PIN_HIGH>
 80027b4:	2102      	movs	r1, #2
 80027b6:	4854      	ldr	r0, [pc, #336]	; (8002908 <readGRAM+0x264>)
 80027b8:	f7fe fc10 	bl	8000fdc <PIN_HIGH>
 80027bc:	4b52      	ldr	r3, [pc, #328]	; (8002908 <readGRAM+0x264>)
 80027be:	4a53      	ldr	r2, [pc, #332]	; (800290c <readGRAM+0x268>)
 80027c0:	619a      	str	r2, [r3, #24]
 80027c2:	4b53      	ldr	r3, [pc, #332]	; (8002910 <readGRAM+0x26c>)
 80027c4:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 80027c8:	619a      	str	r2, [r3, #24]
 80027ca:	7f3b      	ldrb	r3, [r7, #28]
 80027cc:	035b      	lsls	r3, r3, #13
 80027ce:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 80027d2:	7f3b      	ldrb	r3, [r7, #28]
 80027d4:	109b      	asrs	r3, r3, #2
 80027d6:	f003 0320 	and.w	r3, r3, #32
 80027da:	431a      	orrs	r2, r3
 80027dc:	4b4a      	ldr	r3, [pc, #296]	; (8002908 <readGRAM+0x264>)
 80027de:	619a      	str	r2, [r3, #24]
 80027e0:	7f3b      	ldrb	r3, [r7, #28]
 80027e2:	4a4b      	ldr	r2, [pc, #300]	; (8002910 <readGRAM+0x26c>)
 80027e4:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 80027e8:	6193      	str	r3, [r2, #24]
 80027ea:	2102      	movs	r1, #2
 80027ec:	4846      	ldr	r0, [pc, #280]	; (8002908 <readGRAM+0x264>)
 80027ee:	f7fe fbe5 	bl	8000fbc <PIN_LOW>
 80027f2:	2102      	movs	r1, #2
 80027f4:	4844      	ldr	r0, [pc, #272]	; (8002908 <readGRAM+0x264>)
 80027f6:	f7fe fbf1 	bl	8000fdc <PIN_HIGH>
 80027fa:	2102      	movs	r1, #2
 80027fc:	4842      	ldr	r0, [pc, #264]	; (8002908 <readGRAM+0x264>)
 80027fe:	f7fe fbed 	bl	8000fdc <PIN_HIGH>
 8002802:	2104      	movs	r1, #4
 8002804:	4840      	ldr	r0, [pc, #256]	; (8002908 <readGRAM+0x264>)
 8002806:	f7fe fbe9 	bl	8000fdc <PIN_HIGH>
        setReadDir();
 800280a:	f7fe fd1f 	bl	800124c <setReadDir>
        if (_lcd_capable & READ_NODUMMY) {
 800280e:	4b3a      	ldr	r3, [pc, #232]	; (80028f8 <readGRAM+0x254>)
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002816:	2b00      	cmp	r3, #0
 8002818:	f040 813e 	bne.w	8002a98 <readGRAM+0x3f4>
            ;
        } else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 800281c:	4b36      	ldr	r3, [pc, #216]	; (80028f8 <readGRAM+0x254>)
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d105      	bne.n	8002834 <readGRAM+0x190>
 8002828:	4b34      	ldr	r3, [pc, #208]	; (80028fc <readGRAM+0x258>)
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	f241 2289 	movw	r2, #4745	; 0x1289
 8002830:	4293      	cmp	r3, r2
 8002832:	d16f      	bne.n	8002914 <readGRAM+0x270>
            READ_8(r);
 8002834:	2101      	movs	r1, #1
 8002836:	4834      	ldr	r0, [pc, #208]	; (8002908 <readGRAM+0x264>)
 8002838:	f7fe fbd0 	bl	8000fdc <PIN_HIGH>
 800283c:	2101      	movs	r1, #1
 800283e:	4832      	ldr	r0, [pc, #200]	; (8002908 <readGRAM+0x264>)
 8002840:	f7fe fbbc 	bl	8000fbc <PIN_LOW>
 8002844:	2101      	movs	r1, #1
 8002846:	4830      	ldr	r0, [pc, #192]	; (8002908 <readGRAM+0x264>)
 8002848:	f7fe fbb8 	bl	8000fbc <PIN_LOW>
 800284c:	2101      	movs	r1, #1
 800284e:	482e      	ldr	r0, [pc, #184]	; (8002908 <readGRAM+0x264>)
 8002850:	f7fe fbb4 	bl	8000fbc <PIN_LOW>
 8002854:	2101      	movs	r1, #1
 8002856:	482c      	ldr	r0, [pc, #176]	; (8002908 <readGRAM+0x264>)
 8002858:	f7fe fbb0 	bl	8000fbc <PIN_LOW>
 800285c:	4b2c      	ldr	r3, [pc, #176]	; (8002910 <readGRAM+0x26c>)
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	b2da      	uxtb	r2, r3
 8002868:	4b29      	ldr	r3, [pc, #164]	; (8002910 <readGRAM+0x26c>)
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	b2db      	uxtb	r3, r3
 8002874:	4313      	orrs	r3, r2
 8002876:	b2da      	uxtb	r2, r3
 8002878:	4b23      	ldr	r3, [pc, #140]	; (8002908 <readGRAM+0x264>)
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	0b5b      	lsrs	r3, r3, #13
 800287e:	b2db      	uxtb	r3, r3
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	b2db      	uxtb	r3, r3
 8002886:	4313      	orrs	r3, r2
 8002888:	b2da      	uxtb	r2, r3
 800288a:	4b21      	ldr	r3, [pc, #132]	; (8002910 <readGRAM+0x26c>)
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f003 0308 	and.w	r3, r3, #8
 8002894:	b2db      	uxtb	r3, r3
 8002896:	4313      	orrs	r3, r2
 8002898:	b2da      	uxtb	r2, r3
 800289a:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <readGRAM+0x26c>)
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	f003 0310 	and.w	r3, r3, #16
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	4313      	orrs	r3, r2
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	4b19      	ldr	r3, [pc, #100]	; (8002910 <readGRAM+0x26c>)
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	f003 0320 	and.w	r3, r3, #32
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	4313      	orrs	r3, r2
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	4b15      	ldr	r3, [pc, #84]	; (8002910 <readGRAM+0x26c>)
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	4313      	orrs	r3, r2
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	4b0f      	ldr	r3, [pc, #60]	; (8002908 <readGRAM+0x264>)
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	4313      	orrs	r3, r2
 80028dc:	75fb      	strb	r3, [r7, #23]
 80028de:	2101      	movs	r1, #1
 80028e0:	4809      	ldr	r0, [pc, #36]	; (8002908 <readGRAM+0x264>)
 80028e2:	f7fe fb7b 	bl	8000fdc <PIN_HIGH>
 80028e6:	2101      	movs	r1, #1
 80028e8:	4807      	ldr	r0, [pc, #28]	; (8002908 <readGRAM+0x264>)
 80028ea:	f7fe fb77 	bl	8000fdc <PIN_HIGH>
 80028ee:	e0d3      	b.n	8002a98 <readGRAM+0x3f4>
 80028f0:	200000ee 	.word	0x200000ee
 80028f4:	200000d9 	.word	0x200000d9
 80028f8:	200000e2 	.word	0x200000e2
 80028fc:	200000e4 	.word	0x200000e4
 8002900:	200000ea 	.word	0x200000ea
 8002904:	200000ec 	.word	0x200000ec
 8002908:	40020000 	.word	0x40020000
 800290c:	80200000 	.word	0x80200000
 8002910:	40020400 	.word	0x40020400
        } else {
            READ_16(dummy);
 8002914:	2101      	movs	r1, #1
 8002916:	4893      	ldr	r0, [pc, #588]	; (8002b64 <readGRAM+0x4c0>)
 8002918:	f7fe fb60 	bl	8000fdc <PIN_HIGH>
 800291c:	2101      	movs	r1, #1
 800291e:	4891      	ldr	r0, [pc, #580]	; (8002b64 <readGRAM+0x4c0>)
 8002920:	f7fe fb4c 	bl	8000fbc <PIN_LOW>
 8002924:	2101      	movs	r1, #1
 8002926:	488f      	ldr	r0, [pc, #572]	; (8002b64 <readGRAM+0x4c0>)
 8002928:	f7fe fb48 	bl	8000fbc <PIN_LOW>
 800292c:	2101      	movs	r1, #1
 800292e:	488d      	ldr	r0, [pc, #564]	; (8002b64 <readGRAM+0x4c0>)
 8002930:	f7fe fb44 	bl	8000fbc <PIN_LOW>
 8002934:	2101      	movs	r1, #1
 8002936:	488b      	ldr	r0, [pc, #556]	; (8002b64 <readGRAM+0x4c0>)
 8002938:	f7fe fb40 	bl	8000fbc <PIN_LOW>
 800293c:	4b8a      	ldr	r3, [pc, #552]	; (8002b68 <readGRAM+0x4c4>)
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	b2da      	uxtb	r2, r3
 8002948:	4b87      	ldr	r3, [pc, #540]	; (8002b68 <readGRAM+0x4c4>)
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	b2db      	uxtb	r3, r3
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	b2db      	uxtb	r3, r3
 8002954:	4313      	orrs	r3, r2
 8002956:	b2da      	uxtb	r2, r3
 8002958:	4b82      	ldr	r3, [pc, #520]	; (8002b64 <readGRAM+0x4c0>)
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	0b5b      	lsrs	r3, r3, #13
 800295e:	b2db      	uxtb	r3, r3
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	b2db      	uxtb	r3, r3
 8002966:	4313      	orrs	r3, r2
 8002968:	b2da      	uxtb	r2, r3
 800296a:	4b7f      	ldr	r3, [pc, #508]	; (8002b68 <readGRAM+0x4c4>)
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	b2db      	uxtb	r3, r3
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	b2db      	uxtb	r3, r3
 8002976:	4313      	orrs	r3, r2
 8002978:	b2da      	uxtb	r2, r3
 800297a:	4b7b      	ldr	r3, [pc, #492]	; (8002b68 <readGRAM+0x4c4>)
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	b2db      	uxtb	r3, r3
 8002980:	f003 0310 	and.w	r3, r3, #16
 8002984:	b2db      	uxtb	r3, r3
 8002986:	4313      	orrs	r3, r2
 8002988:	b2da      	uxtb	r2, r3
 800298a:	4b77      	ldr	r3, [pc, #476]	; (8002b68 <readGRAM+0x4c4>)
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	b2db      	uxtb	r3, r3
 8002990:	f003 0320 	and.w	r3, r3, #32
 8002994:	b2db      	uxtb	r3, r3
 8002996:	4313      	orrs	r3, r2
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4b73      	ldr	r3, [pc, #460]	; (8002b68 <readGRAM+0x4c4>)
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	4313      	orrs	r3, r2
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	4b6e      	ldr	r3, [pc, #440]	; (8002b64 <readGRAM+0x4c0>)
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	4313      	orrs	r3, r2
 80029bc:	76fb      	strb	r3, [r7, #27]
 80029be:	2101      	movs	r1, #1
 80029c0:	4868      	ldr	r0, [pc, #416]	; (8002b64 <readGRAM+0x4c0>)
 80029c2:	f7fe fb0b 	bl	8000fdc <PIN_HIGH>
 80029c6:	2101      	movs	r1, #1
 80029c8:	4866      	ldr	r0, [pc, #408]	; (8002b64 <readGRAM+0x4c0>)
 80029ca:	f7fe fb07 	bl	8000fdc <PIN_HIGH>
 80029ce:	2101      	movs	r1, #1
 80029d0:	4864      	ldr	r0, [pc, #400]	; (8002b64 <readGRAM+0x4c0>)
 80029d2:	f7fe fb03 	bl	8000fdc <PIN_HIGH>
 80029d6:	2101      	movs	r1, #1
 80029d8:	4862      	ldr	r0, [pc, #392]	; (8002b64 <readGRAM+0x4c0>)
 80029da:	f7fe faef 	bl	8000fbc <PIN_LOW>
 80029de:	2101      	movs	r1, #1
 80029e0:	4860      	ldr	r0, [pc, #384]	; (8002b64 <readGRAM+0x4c0>)
 80029e2:	f7fe faeb 	bl	8000fbc <PIN_LOW>
 80029e6:	2101      	movs	r1, #1
 80029e8:	485e      	ldr	r0, [pc, #376]	; (8002b64 <readGRAM+0x4c0>)
 80029ea:	f7fe fae7 	bl	8000fbc <PIN_LOW>
 80029ee:	2101      	movs	r1, #1
 80029f0:	485c      	ldr	r0, [pc, #368]	; (8002b64 <readGRAM+0x4c0>)
 80029f2:	f7fe fae3 	bl	8000fbc <PIN_LOW>
 80029f6:	4b5c      	ldr	r3, [pc, #368]	; (8002b68 <readGRAM+0x4c4>)
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	4b59      	ldr	r3, [pc, #356]	; (8002b68 <readGRAM+0x4c4>)
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	4b54      	ldr	r3, [pc, #336]	; (8002b64 <readGRAM+0x4c0>)
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	0b5b      	lsrs	r3, r3, #13
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	4313      	orrs	r3, r2
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	4b50      	ldr	r3, [pc, #320]	; (8002b68 <readGRAM+0x4c4>)
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	4313      	orrs	r3, r2
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	4b4c      	ldr	r3, [pc, #304]	; (8002b68 <readGRAM+0x4c4>)
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	4313      	orrs	r3, r2
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	4b48      	ldr	r3, [pc, #288]	; (8002b68 <readGRAM+0x4c4>)
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	f003 0320 	and.w	r3, r3, #32
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	4313      	orrs	r3, r2
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	4b44      	ldr	r3, [pc, #272]	; (8002b68 <readGRAM+0x4c4>)
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	4313      	orrs	r3, r2
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	4b3f      	ldr	r3, [pc, #252]	; (8002b64 <readGRAM+0x4c0>)
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	4313      	orrs	r3, r2
 8002a76:	833b      	strh	r3, [r7, #24]
 8002a78:	2101      	movs	r1, #1
 8002a7a:	483a      	ldr	r0, [pc, #232]	; (8002b64 <readGRAM+0x4c0>)
 8002a7c:	f7fe faae 	bl	8000fdc <PIN_HIGH>
 8002a80:	2101      	movs	r1, #1
 8002a82:	4838      	ldr	r0, [pc, #224]	; (8002b64 <readGRAM+0x4c0>)
 8002a84:	f7fe faaa 	bl	8000fdc <PIN_HIGH>
 8002a88:	7efb      	ldrb	r3, [r7, #27]
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	b21a      	sxth	r2, r3
 8002a8e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	b21b      	sxth	r3, r3
 8002a96:	833b      	strh	r3, [r7, #24]
        }
		if (_lcd_ID == 0x1511) READ_8(r);   //extra dummy for R61511
 8002a98:	4b34      	ldr	r3, [pc, #208]	; (8002b6c <readGRAM+0x4c8>)
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	f241 5211 	movw	r2, #5393	; 0x1511
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	f040 82a5 	bne.w	8002ff0 <readGRAM+0x94c>
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	482e      	ldr	r0, [pc, #184]	; (8002b64 <readGRAM+0x4c0>)
 8002aaa:	f7fe fa97 	bl	8000fdc <PIN_HIGH>
 8002aae:	2101      	movs	r1, #1
 8002ab0:	482c      	ldr	r0, [pc, #176]	; (8002b64 <readGRAM+0x4c0>)
 8002ab2:	f7fe fa83 	bl	8000fbc <PIN_LOW>
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	482a      	ldr	r0, [pc, #168]	; (8002b64 <readGRAM+0x4c0>)
 8002aba:	f7fe fa7f 	bl	8000fbc <PIN_LOW>
 8002abe:	2101      	movs	r1, #1
 8002ac0:	4828      	ldr	r0, [pc, #160]	; (8002b64 <readGRAM+0x4c0>)
 8002ac2:	f7fe fa7b 	bl	8000fbc <PIN_LOW>
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	4826      	ldr	r0, [pc, #152]	; (8002b64 <readGRAM+0x4c0>)
 8002aca:	f7fe fa77 	bl	8000fbc <PIN_LOW>
 8002ace:	4b26      	ldr	r3, [pc, #152]	; (8002b68 <readGRAM+0x4c4>)
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	4b23      	ldr	r3, [pc, #140]	; (8002b68 <readGRAM+0x4c4>)
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	4b1e      	ldr	r3, [pc, #120]	; (8002b64 <readGRAM+0x4c0>)
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	0b5b      	lsrs	r3, r3, #13
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	4313      	orrs	r3, r2
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	4b1a      	ldr	r3, [pc, #104]	; (8002b68 <readGRAM+0x4c4>)
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	4b16      	ldr	r3, [pc, #88]	; (8002b68 <readGRAM+0x4c4>)
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <readGRAM+0x4c4>)
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <readGRAM+0x4c4>)
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <readGRAM+0x4c0>)
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	75fb      	strb	r3, [r7, #23]
 8002b50:	2101      	movs	r1, #1
 8002b52:	4804      	ldr	r0, [pc, #16]	; (8002b64 <readGRAM+0x4c0>)
 8002b54:	f7fe fa42 	bl	8000fdc <PIN_HIGH>
 8002b58:	2101      	movs	r1, #1
 8002b5a:	4802      	ldr	r0, [pc, #8]	; (8002b64 <readGRAM+0x4c0>)
 8002b5c:	f7fe fa3e 	bl	8000fdc <PIN_HIGH>
        while (n)
 8002b60:	e246      	b.n	8002ff0 <readGRAM+0x94c>
 8002b62:	bf00      	nop
 8002b64:	40020000 	.word	0x40020000
 8002b68:	40020400 	.word	0x40020400
 8002b6c:	200000e4 	.word	0x200000e4
        {
            if (_lcd_capable & READ_24BITS)
 8002b70:	4b9a      	ldr	r3, [pc, #616]	; (8002ddc <readGRAM+0x738>)
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	f003 0310 	and.w	r3, r3, #16
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 8135 	beq.w	8002de8 <readGRAM+0x744>
            {
                READ_8(r);
 8002b7e:	2101      	movs	r1, #1
 8002b80:	4897      	ldr	r0, [pc, #604]	; (8002de0 <readGRAM+0x73c>)
 8002b82:	f7fe fa2b 	bl	8000fdc <PIN_HIGH>
 8002b86:	2101      	movs	r1, #1
 8002b88:	4895      	ldr	r0, [pc, #596]	; (8002de0 <readGRAM+0x73c>)
 8002b8a:	f7fe fa17 	bl	8000fbc <PIN_LOW>
 8002b8e:	2101      	movs	r1, #1
 8002b90:	4893      	ldr	r0, [pc, #588]	; (8002de0 <readGRAM+0x73c>)
 8002b92:	f7fe fa13 	bl	8000fbc <PIN_LOW>
 8002b96:	2101      	movs	r1, #1
 8002b98:	4891      	ldr	r0, [pc, #580]	; (8002de0 <readGRAM+0x73c>)
 8002b9a:	f7fe fa0f 	bl	8000fbc <PIN_LOW>
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	488f      	ldr	r0, [pc, #572]	; (8002de0 <readGRAM+0x73c>)
 8002ba2:	f7fe fa0b 	bl	8000fbc <PIN_LOW>
 8002ba6:	4b8f      	ldr	r3, [pc, #572]	; (8002de4 <readGRAM+0x740>)
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	4b8c      	ldr	r3, [pc, #560]	; (8002de4 <readGRAM+0x740>)
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	4b87      	ldr	r3, [pc, #540]	; (8002de0 <readGRAM+0x73c>)
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	0b5b      	lsrs	r3, r3, #13
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	4b83      	ldr	r3, [pc, #524]	; (8002de4 <readGRAM+0x740>)
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	4313      	orrs	r3, r2
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	4b7f      	ldr	r3, [pc, #508]	; (8002de4 <readGRAM+0x740>)
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	4b7b      	ldr	r3, [pc, #492]	; (8002de4 <readGRAM+0x740>)
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	f003 0320 	and.w	r3, r3, #32
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	4313      	orrs	r3, r2
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	4b77      	ldr	r3, [pc, #476]	; (8002de4 <readGRAM+0x740>)
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	4313      	orrs	r3, r2
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	4b72      	ldr	r3, [pc, #456]	; (8002de0 <readGRAM+0x73c>)
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	4313      	orrs	r3, r2
 8002c26:	75fb      	strb	r3, [r7, #23]
 8002c28:	2101      	movs	r1, #1
 8002c2a:	486d      	ldr	r0, [pc, #436]	; (8002de0 <readGRAM+0x73c>)
 8002c2c:	f7fe f9d6 	bl	8000fdc <PIN_HIGH>
 8002c30:	2101      	movs	r1, #1
 8002c32:	486b      	ldr	r0, [pc, #428]	; (8002de0 <readGRAM+0x73c>)
 8002c34:	f7fe f9d2 	bl	8000fdc <PIN_HIGH>
                READ_8(g);
 8002c38:	2101      	movs	r1, #1
 8002c3a:	4869      	ldr	r0, [pc, #420]	; (8002de0 <readGRAM+0x73c>)
 8002c3c:	f7fe f9ce 	bl	8000fdc <PIN_HIGH>
 8002c40:	2101      	movs	r1, #1
 8002c42:	4867      	ldr	r0, [pc, #412]	; (8002de0 <readGRAM+0x73c>)
 8002c44:	f7fe f9ba 	bl	8000fbc <PIN_LOW>
 8002c48:	2101      	movs	r1, #1
 8002c4a:	4865      	ldr	r0, [pc, #404]	; (8002de0 <readGRAM+0x73c>)
 8002c4c:	f7fe f9b6 	bl	8000fbc <PIN_LOW>
 8002c50:	2101      	movs	r1, #1
 8002c52:	4863      	ldr	r0, [pc, #396]	; (8002de0 <readGRAM+0x73c>)
 8002c54:	f7fe f9b2 	bl	8000fbc <PIN_LOW>
 8002c58:	2101      	movs	r1, #1
 8002c5a:	4861      	ldr	r0, [pc, #388]	; (8002de0 <readGRAM+0x73c>)
 8002c5c:	f7fe f9ae 	bl	8000fbc <PIN_LOW>
 8002c60:	4b60      	ldr	r3, [pc, #384]	; (8002de4 <readGRAM+0x740>)
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	4b5d      	ldr	r3, [pc, #372]	; (8002de4 <readGRAM+0x740>)
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	4b58      	ldr	r3, [pc, #352]	; (8002de0 <readGRAM+0x73c>)
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	0b5b      	lsrs	r3, r3, #13
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	4b55      	ldr	r3, [pc, #340]	; (8002de4 <readGRAM+0x740>)
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	4b51      	ldr	r3, [pc, #324]	; (8002de4 <readGRAM+0x740>)
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	4313      	orrs	r3, r2
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	4b4d      	ldr	r3, [pc, #308]	; (8002de4 <readGRAM+0x740>)
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	f003 0320 	and.w	r3, r3, #32
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	4b49      	ldr	r3, [pc, #292]	; (8002de4 <readGRAM+0x740>)
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	4b44      	ldr	r3, [pc, #272]	; (8002de0 <readGRAM+0x73c>)
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	757b      	strb	r3, [r7, #21]
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	483e      	ldr	r0, [pc, #248]	; (8002de0 <readGRAM+0x73c>)
 8002ce6:	f7fe f979 	bl	8000fdc <PIN_HIGH>
 8002cea:	2101      	movs	r1, #1
 8002cec:	483c      	ldr	r0, [pc, #240]	; (8002de0 <readGRAM+0x73c>)
 8002cee:	f7fe f975 	bl	8000fdc <PIN_HIGH>
                READ_8(b);
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	483a      	ldr	r0, [pc, #232]	; (8002de0 <readGRAM+0x73c>)
 8002cf6:	f7fe f971 	bl	8000fdc <PIN_HIGH>
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	4838      	ldr	r0, [pc, #224]	; (8002de0 <readGRAM+0x73c>)
 8002cfe:	f7fe f95d 	bl	8000fbc <PIN_LOW>
 8002d02:	2101      	movs	r1, #1
 8002d04:	4836      	ldr	r0, [pc, #216]	; (8002de0 <readGRAM+0x73c>)
 8002d06:	f7fe f959 	bl	8000fbc <PIN_LOW>
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	4834      	ldr	r0, [pc, #208]	; (8002de0 <readGRAM+0x73c>)
 8002d0e:	f7fe f955 	bl	8000fbc <PIN_LOW>
 8002d12:	2101      	movs	r1, #1
 8002d14:	4832      	ldr	r0, [pc, #200]	; (8002de0 <readGRAM+0x73c>)
 8002d16:	f7fe f951 	bl	8000fbc <PIN_LOW>
 8002d1a:	4b32      	ldr	r3, [pc, #200]	; (8002de4 <readGRAM+0x740>)
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	4b2f      	ldr	r3, [pc, #188]	; (8002de4 <readGRAM+0x740>)
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	4313      	orrs	r3, r2
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	4b2a      	ldr	r3, [pc, #168]	; (8002de0 <readGRAM+0x73c>)
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	0b5b      	lsrs	r3, r3, #13
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	4313      	orrs	r3, r2
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	4b26      	ldr	r3, [pc, #152]	; (8002de4 <readGRAM+0x740>)
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	4313      	orrs	r3, r2
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	4b22      	ldr	r3, [pc, #136]	; (8002de4 <readGRAM+0x740>)
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	f003 0310 	and.w	r3, r3, #16
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	4313      	orrs	r3, r2
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	4b1e      	ldr	r3, [pc, #120]	; (8002de4 <readGRAM+0x740>)
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	4313      	orrs	r3, r2
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	4b1a      	ldr	r3, [pc, #104]	; (8002de4 <readGRAM+0x740>)
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	4313      	orrs	r3, r2
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <readGRAM+0x73c>)
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	753b      	strb	r3, [r7, #20]
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	4810      	ldr	r0, [pc, #64]	; (8002de0 <readGRAM+0x73c>)
 8002da0:	f7fe f91c 	bl	8000fdc <PIN_HIGH>
 8002da4:	2101      	movs	r1, #1
 8002da6:	480e      	ldr	r0, [pc, #56]	; (8002de0 <readGRAM+0x73c>)
 8002da8:	f7fe f918 	bl	8000fdc <PIN_HIGH>
                if (_lcd_capable & READ_BGR)
 8002dac:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <readGRAM+0x738>)
 8002dae:	881b      	ldrh	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d008      	beq.n	8002dca <readGRAM+0x726>
                    ret = color565(b, g, r);
 8002db8:	7dfa      	ldrb	r2, [r7, #23]
 8002dba:	7d79      	ldrb	r1, [r7, #21]
 8002dbc:	7d3b      	ldrb	r3, [r7, #20]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe f9d3 	bl	800116a <color565>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002dc8:	e0f7      	b.n	8002fba <readGRAM+0x916>
                else
                    ret = color565(r, g, b);
 8002dca:	7d3a      	ldrb	r2, [r7, #20]
 8002dcc:	7d79      	ldrb	r1, [r7, #21]
 8002dce:	7dfb      	ldrb	r3, [r7, #23]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fe f9ca 	bl	800116a <color565>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002dda:	e0ee      	b.n	8002fba <readGRAM+0x916>
 8002ddc:	200000e2 	.word	0x200000e2
 8002de0:	40020000 	.word	0x40020000
 8002de4:	40020400 	.word	0x40020400
            } else
            {
                READ_16(ret);
 8002de8:	2101      	movs	r1, #1
 8002dea:	48a6      	ldr	r0, [pc, #664]	; (8003084 <readGRAM+0x9e0>)
 8002dec:	f7fe f8f6 	bl	8000fdc <PIN_HIGH>
 8002df0:	2101      	movs	r1, #1
 8002df2:	48a4      	ldr	r0, [pc, #656]	; (8003084 <readGRAM+0x9e0>)
 8002df4:	f7fe f8e2 	bl	8000fbc <PIN_LOW>
 8002df8:	2101      	movs	r1, #1
 8002dfa:	48a2      	ldr	r0, [pc, #648]	; (8003084 <readGRAM+0x9e0>)
 8002dfc:	f7fe f8de 	bl	8000fbc <PIN_LOW>
 8002e00:	2101      	movs	r1, #1
 8002e02:	48a0      	ldr	r0, [pc, #640]	; (8003084 <readGRAM+0x9e0>)
 8002e04:	f7fe f8da 	bl	8000fbc <PIN_LOW>
 8002e08:	2101      	movs	r1, #1
 8002e0a:	489e      	ldr	r0, [pc, #632]	; (8003084 <readGRAM+0x9e0>)
 8002e0c:	f7fe f8d6 	bl	8000fbc <PIN_LOW>
 8002e10:	4b9d      	ldr	r3, [pc, #628]	; (8003088 <readGRAM+0x9e4>)
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	4b9a      	ldr	r3, [pc, #616]	; (8003088 <readGRAM+0x9e4>)
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	4b95      	ldr	r3, [pc, #596]	; (8003084 <readGRAM+0x9e0>)
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	0b5b      	lsrs	r3, r3, #13
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	4b92      	ldr	r3, [pc, #584]	; (8003088 <readGRAM+0x9e4>)
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	4b8e      	ldr	r3, [pc, #568]	; (8003088 <readGRAM+0x9e4>)
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	f003 0310 	and.w	r3, r3, #16
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	4b8a      	ldr	r3, [pc, #552]	; (8003088 <readGRAM+0x9e4>)
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	4b86      	ldr	r3, [pc, #536]	; (8003088 <readGRAM+0x9e4>)
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	4b81      	ldr	r3, [pc, #516]	; (8003084 <readGRAM+0x9e0>)
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	75bb      	strb	r3, [r7, #22]
 8002e92:	2101      	movs	r1, #1
 8002e94:	487b      	ldr	r0, [pc, #492]	; (8003084 <readGRAM+0x9e0>)
 8002e96:	f7fe f8a1 	bl	8000fdc <PIN_HIGH>
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	4879      	ldr	r0, [pc, #484]	; (8003084 <readGRAM+0x9e0>)
 8002e9e:	f7fe f89d 	bl	8000fdc <PIN_HIGH>
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	4877      	ldr	r0, [pc, #476]	; (8003084 <readGRAM+0x9e0>)
 8002ea6:	f7fe f899 	bl	8000fdc <PIN_HIGH>
 8002eaa:	2101      	movs	r1, #1
 8002eac:	4875      	ldr	r0, [pc, #468]	; (8003084 <readGRAM+0x9e0>)
 8002eae:	f7fe f885 	bl	8000fbc <PIN_LOW>
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	4873      	ldr	r0, [pc, #460]	; (8003084 <readGRAM+0x9e0>)
 8002eb6:	f7fe f881 	bl	8000fbc <PIN_LOW>
 8002eba:	2101      	movs	r1, #1
 8002ebc:	4871      	ldr	r0, [pc, #452]	; (8003084 <readGRAM+0x9e0>)
 8002ebe:	f7fe f87d 	bl	8000fbc <PIN_LOW>
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	486f      	ldr	r0, [pc, #444]	; (8003084 <readGRAM+0x9e0>)
 8002ec6:	f7fe f879 	bl	8000fbc <PIN_LOW>
 8002eca:	4b6f      	ldr	r3, [pc, #444]	; (8003088 <readGRAM+0x9e4>)
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	4b6c      	ldr	r3, [pc, #432]	; (8003088 <readGRAM+0x9e4>)
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	4b67      	ldr	r3, [pc, #412]	; (8003084 <readGRAM+0x9e0>)
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	0b5b      	lsrs	r3, r3, #13
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	4b63      	ldr	r3, [pc, #396]	; (8003088 <readGRAM+0x9e4>)
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	4313      	orrs	r3, r2
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	4b5f      	ldr	r3, [pc, #380]	; (8003088 <readGRAM+0x9e4>)
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	4313      	orrs	r3, r2
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	4b5b      	ldr	r3, [pc, #364]	; (8003088 <readGRAM+0x9e4>)
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	f003 0320 	and.w	r3, r3, #32
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	4313      	orrs	r3, r2
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	4b57      	ldr	r3, [pc, #348]	; (8003088 <readGRAM+0x9e4>)
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	4313      	orrs	r3, r2
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	4b52      	ldr	r3, [pc, #328]	; (8003084 <readGRAM+0x9e0>)
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	484d      	ldr	r0, [pc, #308]	; (8003084 <readGRAM+0x9e0>)
 8002f50:	f7fe f844 	bl	8000fdc <PIN_HIGH>
 8002f54:	2101      	movs	r1, #1
 8002f56:	484b      	ldr	r0, [pc, #300]	; (8003084 <readGRAM+0x9e0>)
 8002f58:	f7fe f840 	bl	8000fdc <PIN_HIGH>
 8002f5c:	7dbb      	ldrb	r3, [r7, #22]
 8002f5e:	021b      	lsls	r3, r3, #8
 8002f60:	b21a      	sxth	r2, r3
 8002f62:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002f66:	4313      	orrs	r3, r2
 8002f68:	b21b      	sxth	r3, r3
 8002f6a:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_LOWHIGH)
 8002f6c:	4b47      	ldr	r3, [pc, #284]	; (800308c <readGRAM+0x9e8>)
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d009      	beq.n	8002f8c <readGRAM+0x8e8>
                    ret = (ret >> 8) | (ret << 8);
 8002f78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002f7a:	0a1b      	lsrs	r3, r3, #8
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	b21a      	sxth	r2, r3
 8002f80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002f82:	021b      	lsls	r3, r3, #8
 8002f84:	b21b      	sxth	r3, r3
 8002f86:	4313      	orrs	r3, r2
 8002f88:	b21b      	sxth	r3, r3
 8002f8a:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_BGR)
 8002f8c:	4b3f      	ldr	r3, [pc, #252]	; (800308c <readGRAM+0x9e8>)
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d010      	beq.n	8002fba <readGRAM+0x916>
                    ret = (ret & 0x07E0) | (ret >> 11) | (ret << 11);
 8002f98:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002f9c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8002fa0:	b21a      	sxth	r2, r3
 8002fa2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002fa4:	0adb      	lsrs	r3, r3, #11
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	b21b      	sxth	r3, r3
 8002faa:	4313      	orrs	r3, r2
 8002fac:	b21a      	sxth	r2, r3
 8002fae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002fb0:	02db      	lsls	r3, r3, #11
 8002fb2:	b21b      	sxth	r3, r3
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	b21b      	sxth	r3, r3
 8002fb8:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
#if defined(SUPPORT_9488_555)
    if (is555) ret = color555_to_565(ret);
 8002fba:	4b35      	ldr	r3, [pc, #212]	; (8003090 <readGRAM+0x9ec>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <readGRAM+0x92a>
 8002fc2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fe f87f 	bl	80010c8 <color555_to_565>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
            *block++ = ret;
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	1c9a      	adds	r2, r3, #2
 8002fd2:	60ba      	str	r2, [r7, #8]
 8002fd4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002fd6:	801a      	strh	r2, [r3, #0]
            n--;
 8002fd8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	847b      	strh	r3, [r7, #34]	; 0x22
            if (!(_lcd_capable & AUTO_READINC))
 8002fe4:	4b29      	ldr	r3, [pc, #164]	; (800308c <readGRAM+0x9e8>)
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <readGRAM+0x958>
        while (n)
 8002ff0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f47f adbb 	bne.w	8002b70 <readGRAM+0x4cc>
 8002ffa:	e000      	b.n	8002ffe <readGRAM+0x95a>
                break;
 8002ffc:	bf00      	nop
        }
        if (++col >= w) {
 8002ffe:	8bfb      	ldrh	r3, [r7, #30]
 8003000:	3301      	adds	r3, #1
 8003002:	b29b      	uxth	r3, r3
 8003004:	83fb      	strh	r3, [r7, #30]
 8003006:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800300a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800300e:	429a      	cmp	r2, r3
 8003010:	db0d      	blt.n	800302e <readGRAM+0x98a>
            col = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	83fb      	strh	r3, [r7, #30]
            if (++row >= h)
 8003016:	8c3b      	ldrh	r3, [r7, #32]
 8003018:	3301      	adds	r3, #1
 800301a:	b29b      	uxth	r3, r3
 800301c:	843b      	strh	r3, [r7, #32]
 800301e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003022:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8003026:	429a      	cmp	r2, r3
 8003028:	db01      	blt.n	800302e <readGRAM+0x98a>
                row = 0;
 800302a:	2300      	movs	r3, #0
 800302c:	843b      	strh	r3, [r7, #32]
        }
        RD_IDLE;
 800302e:	2101      	movs	r1, #1
 8003030:	4814      	ldr	r0, [pc, #80]	; (8003084 <readGRAM+0x9e0>)
 8003032:	f7fd ffd3 	bl	8000fdc <PIN_HIGH>
        CS_IDLE;
 8003036:	2108      	movs	r1, #8
 8003038:	4812      	ldr	r0, [pc, #72]	; (8003084 <readGRAM+0x9e0>)
 800303a:	f7fd ffcf 	bl	8000fdc <PIN_HIGH>
        setWriteDir();
 800303e:	f7fe f92f 	bl	80012a0 <setWriteDir>
    while (n > 0) {
 8003042:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003046:	2b00      	cmp	r3, #0
 8003048:	f73f ab6f 	bgt.w	800272a <readGRAM+0x86>
    }
    if (!(_lcd_capable & MIPI_DCS_REV1))
 800304c:	4b0f      	ldr	r3, [pc, #60]	; (800308c <readGRAM+0x9e8>)
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d110      	bne.n	800307a <readGRAM+0x9d6>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 8003058:	f7fd fffe 	bl	8001058 <width>
 800305c:	4603      	mov	r3, r0
 800305e:	3b01      	subs	r3, #1
 8003060:	b29b      	uxth	r3, r3
 8003062:	b21c      	sxth	r4, r3
 8003064:	f7fe f804 	bl	8001070 <height>
 8003068:	4603      	mov	r3, r0
 800306a:	3b01      	subs	r3, #1
 800306c:	b29b      	uxth	r3, r3
 800306e:	b21b      	sxth	r3, r3
 8003070:	4622      	mov	r2, r4
 8003072:	2100      	movs	r1, #0
 8003074:	2000      	movs	r0, #0
 8003076:	f000 fb4b 	bl	8003710 <setAddrWindow>
    return 0;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	372c      	adds	r7, #44	; 0x2c
 8003080:	46bd      	mov	sp, r7
 8003082:	bd90      	pop	{r4, r7, pc}
 8003084:	40020000 	.word	0x40020000
 8003088:	40020400 	.word	0x40020400
 800308c:	200000e2 	.word	0x200000e2
 8003090:	200000da 	.word	0x200000da

08003094 <setRotation>:

void setRotation(uint8_t r)
{
 8003094:	b590      	push	{r4, r7, lr}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	71fb      	strb	r3, [r7, #7]
   uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 800309e:	4b9c      	ldr	r3, [pc, #624]	; (8003310 <setRotation+0x27c>)
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	827b      	strh	r3, [r7, #18]
   uint8_t val, d[3];
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	4b99      	ldr	r3, [pc, #612]	; (8003314 <setRotation+0x280>)
 80030ae:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 80030b0:	4b98      	ldr	r3, [pc, #608]	; (8003314 <setRotation+0x280>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <setRotation+0x2e>
 80030bc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80030c0:	e000      	b.n	80030c4 <setRotation+0x30>
 80030c2:	22f0      	movs	r2, #240	; 0xf0
 80030c4:	4b94      	ldr	r3, [pc, #592]	; (8003318 <setRotation+0x284>)
 80030c6:	801a      	strh	r2, [r3, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 80030c8:	4b92      	ldr	r3, [pc, #584]	; (8003314 <setRotation+0x280>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <setRotation+0x44>
 80030d4:	22f0      	movs	r2, #240	; 0xf0
 80030d6:	e001      	b.n	80030dc <setRotation+0x48>
 80030d8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80030dc:	4b8f      	ldr	r3, [pc, #572]	; (800331c <setRotation+0x288>)
 80030de:	801a      	strh	r2, [r3, #0]
   switch (rotation) {
 80030e0:	4b8c      	ldr	r3, [pc, #560]	; (8003314 <setRotation+0x280>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d817      	bhi.n	8003118 <setRotation+0x84>
 80030e8:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <setRotation+0x5c>)
 80030ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ee:	bf00      	nop
 80030f0:	08003101 	.word	0x08003101
 80030f4:	08003107 	.word	0x08003107
 80030f8:	0800310d 	.word	0x0800310d
 80030fc:	08003113 	.word	0x08003113
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 8003100:	2348      	movs	r3, #72	; 0x48
 8003102:	72fb      	strb	r3, [r7, #11]
       break;
 8003104:	e008      	b.n	8003118 <setRotation+0x84>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 8003106:	2328      	movs	r3, #40	; 0x28
 8003108:	72fb      	strb	r3, [r7, #11]
       break;
 800310a:	e005      	b.n	8003118 <setRotation+0x84>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 800310c:	2398      	movs	r3, #152	; 0x98
 800310e:	72fb      	strb	r3, [r7, #11]
       break;
 8003110:	e002      	b.n	8003118 <setRotation+0x84>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 8003112:	23f8      	movs	r3, #248	; 0xf8
 8003114:	72fb      	strb	r3, [r7, #11]
       break;
 8003116:	bf00      	nop
   }
   if (_lcd_capable & INVERT_GS)
 8003118:	4b81      	ldr	r3, [pc, #516]	; (8003320 <setRotation+0x28c>)
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <setRotation+0x9c>
       val ^= 0x80;
 8003124:	7afb      	ldrb	r3, [r7, #11]
 8003126:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 800312a:	43db      	mvns	r3, r3
 800312c:	b2db      	uxtb	r3, r3
 800312e:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_SS)
 8003130:	4b7b      	ldr	r3, [pc, #492]	; (8003320 <setRotation+0x28c>)
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003138:	2b00      	cmp	r3, #0
 800313a:	d004      	beq.n	8003146 <setRotation+0xb2>
       val ^= 0x40;
 800313c:	7afb      	ldrb	r3, [r7, #11]
 800313e:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8003142:	b2db      	uxtb	r3, r3
 8003144:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_RGB)
 8003146:	4b76      	ldr	r3, [pc, #472]	; (8003320 <setRotation+0x28c>)
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800314e:	2b00      	cmp	r3, #0
 8003150:	d004      	beq.n	800315c <setRotation+0xc8>
       val ^= 0x08;
 8003152:	7afb      	ldrb	r3, [r7, #11]
 8003154:	f083 0308 	eor.w	r3, r3, #8
 8003158:	b2db      	uxtb	r3, r3
 800315a:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & MIPI_DCS_REV1) {
 800315c:	4b70      	ldr	r3, [pc, #448]	; (8003320 <setRotation+0x28c>)
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 8119 	beq.w	800339c <setRotation+0x308>
       if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 800316a:	4b6e      	ldr	r3, [pc, #440]	; (8003324 <setRotation+0x290>)
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	f646 0214 	movw	r2, #26644	; 0x6814
 8003172:	4293      	cmp	r3, r2
 8003174:	d128      	bne.n	80031c8 <setRotation+0x134>
           GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 8003176:	7afb      	ldrb	r3, [r7, #11]
 8003178:	b25b      	sxtb	r3, r3
 800317a:	105b      	asrs	r3, r3, #1
 800317c:	b25b      	sxtb	r3, r3
 800317e:	b29b      	uxth	r3, r3
 8003180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003184:	823b      	strh	r3, [r7, #16]
           SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 8003186:	7afb      	ldrb	r3, [r7, #11]
 8003188:	105b      	asrs	r3, r3, #1
 800318a:	b29b      	uxth	r3, r3
 800318c:	f003 0320 	and.w	r3, r3, #32
 8003190:	81fb      	strh	r3, [r7, #14]
           val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 8003192:	7afb      	ldrb	r3, [r7, #11]
 8003194:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003198:	b2db      	uxtb	r3, r3
 800319a:	72fb      	strb	r3, [r7, #11]
           d[0] = 0;
 800319c:	2300      	movs	r3, #0
 800319e:	723b      	strb	r3, [r7, #8]
           d[1] = GS | SS_v | 0x02;      //MY, MX
 80031a0:	8a3b      	ldrh	r3, [r7, #16]
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	89fb      	ldrh	r3, [r7, #14]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	4313      	orrs	r3, r2
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	f043 0302 	orr.w	r3, r3, #2
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	727b      	strb	r3, [r7, #9]
           d[2] = 0x3B;
 80031b4:	233b      	movs	r3, #59	; 0x3b
 80031b6:	72bb      	strb	r3, [r7, #10]
           WriteCmdParamN(0xB6, 3, d);
 80031b8:	f107 0308 	add.w	r3, r7, #8
 80031bc:	461a      	mov	r2, r3
 80031be:	2103      	movs	r1, #3
 80031c0:	20b6      	movs	r0, #182	; 0xb6
 80031c2:	f7fe f9db 	bl	800157c <WriteCmdParamN>
           goto common_MC;
 80031c6:	e0c0      	b.n	800334a <setRotation+0x2b6>
       }
       else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 80031c8:	4b56      	ldr	r3, [pc, #344]	; (8003324 <setRotation+0x290>)
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	f641 1263 	movw	r2, #6499	; 0x1963
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00b      	beq.n	80031ec <setRotation+0x158>
 80031d4:	4b53      	ldr	r3, [pc, #332]	; (8003324 <setRotation+0x290>)
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	f249 4281 	movw	r2, #38017	; 0x9481
 80031dc:	4293      	cmp	r3, r2
 80031de:	d005      	beq.n	80031ec <setRotation+0x158>
 80031e0:	4b50      	ldr	r3, [pc, #320]	; (8003324 <setRotation+0x290>)
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	f241 5211 	movw	r2, #5393	; 0x1511
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d139      	bne.n	8003260 <setRotation+0x1cc>
           if (val & 0x80)
 80031ec:	7afb      	ldrb	r3, [r7, #11]
 80031ee:	b25b      	sxtb	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	da04      	bge.n	80031fe <setRotation+0x16a>
               val |= 0x01;    //GS
 80031f4:	7afb      	ldrb	r3, [r7, #11]
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	72fb      	strb	r3, [r7, #11]
           if ((val & 0x40))
 80031fe:	7afb      	ldrb	r3, [r7, #11]
 8003200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003204:	2b00      	cmp	r3, #0
 8003206:	d004      	beq.n	8003212 <setRotation+0x17e>
               val |= 0x02;    //SS
 8003208:	7afb      	ldrb	r3, [r7, #11]
 800320a:	f043 0302 	orr.w	r3, r3, #2
 800320e:	b2db      	uxtb	r3, r3
 8003210:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1963) val &= ~0xC0;
 8003212:	4b44      	ldr	r3, [pc, #272]	; (8003324 <setRotation+0x290>)
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	f641 1263 	movw	r2, #6499	; 0x1963
 800321a:	4293      	cmp	r3, r2
 800321c:	d104      	bne.n	8003228 <setRotation+0x194>
 800321e:	7afb      	ldrb	r3, [r7, #11]
 8003220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003224:	b2db      	uxtb	r3, r3
 8003226:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x9481) val &= ~0xD0;
 8003228:	4b3e      	ldr	r3, [pc, #248]	; (8003324 <setRotation+0x290>)
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	f249 4281 	movw	r2, #38017	; 0x9481
 8003230:	4293      	cmp	r3, r2
 8003232:	d104      	bne.n	800323e <setRotation+0x1aa>
 8003234:	7afb      	ldrb	r3, [r7, #11]
 8003236:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 800323a:	b2db      	uxtb	r3, r3
 800323c:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1511) {
 800323e:	4b39      	ldr	r3, [pc, #228]	; (8003324 <setRotation+0x290>)
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	f241 5211 	movw	r2, #5393	; 0x1511
 8003246:	4293      	cmp	r3, r2
 8003248:	d160      	bne.n	800330c <setRotation+0x278>
               val &= ~0x10;   //remove ML
 800324a:	7afb      	ldrb	r3, [r7, #11]
 800324c:	f023 0310 	bic.w	r3, r3, #16
 8003250:	b2db      	uxtb	r3, r3
 8003252:	72fb      	strb	r3, [r7, #11]
               val |= 0xC0;    //force penguin 180 rotation
 8003254:	7afb      	ldrb	r3, [r7, #11]
 8003256:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800325a:	b2db      	uxtb	r3, r3
 800325c:	72fb      	strb	r3, [r7, #11]
           }
//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
           goto common_MC;
 800325e:	e055      	b.n	800330c <setRotation+0x278>
      }
       else if (is8347) {
 8003260:	4b31      	ldr	r3, [pc, #196]	; (8003328 <setRotation+0x294>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d06f      	beq.n	8003348 <setRotation+0x2b4>
           _MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 8003268:	4b30      	ldr	r3, [pc, #192]	; (800332c <setRotation+0x298>)
 800326a:	2202      	movs	r2, #2
 800326c:	801a      	strh	r2, [r3, #0]
 800326e:	4b30      	ldr	r3, [pc, #192]	; (8003330 <setRotation+0x29c>)
 8003270:	2206      	movs	r2, #6
 8003272:	801a      	strh	r2, [r3, #0]
 8003274:	4b2f      	ldr	r3, [pc, #188]	; (8003334 <setRotation+0x2a0>)
 8003276:	2222      	movs	r2, #34	; 0x22
 8003278:	801a      	strh	r2, [r3, #0]
 800327a:	4b2f      	ldr	r3, [pc, #188]	; (8003338 <setRotation+0x2a4>)
 800327c:	2202      	movs	r2, #2
 800327e:	801a      	strh	r2, [r3, #0]
 8003280:	4b2e      	ldr	r3, [pc, #184]	; (800333c <setRotation+0x2a8>)
 8003282:	2204      	movs	r2, #4
 8003284:	801a      	strh	r2, [r3, #0]
 8003286:	4b2e      	ldr	r3, [pc, #184]	; (8003340 <setRotation+0x2ac>)
 8003288:	2206      	movs	r2, #6
 800328a:	801a      	strh	r2, [r3, #0]
 800328c:	4b2d      	ldr	r3, [pc, #180]	; (8003344 <setRotation+0x2b0>)
 800328e:	2208      	movs	r2, #8
 8003290:	801a      	strh	r2, [r3, #0]
           if (_lcd_ID == 0x0065) {             //HX8352-B
 8003292:	4b24      	ldr	r3, [pc, #144]	; (8003324 <setRotation+0x290>)
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	2b65      	cmp	r3, #101	; 0x65
 8003298:	d121      	bne.n	80032de <setRotation+0x24a>
               val |= 0x01;    //GS=1
 800329a:	7afb      	ldrb	r3, [r7, #11]
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 80032a4:	7afb      	ldrb	r3, [r7, #11]
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d005      	beq.n	80032ba <setRotation+0x226>
 80032ae:	7afb      	ldrb	r3, [r7, #11]
 80032b0:	f083 032c 	eor.w	r3, r3, #44	; 0x2c
 80032b4:	43db      	mvns	r3, r3
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	72fb      	strb	r3, [r7, #11]
               if (r & 1) _MC = 0x82, _MP = 0x80;
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d006      	beq.n	80032d2 <setRotation+0x23e>
 80032c4:	4b19      	ldr	r3, [pc, #100]	; (800332c <setRotation+0x298>)
 80032c6:	2282      	movs	r2, #130	; 0x82
 80032c8:	801a      	strh	r2, [r3, #0]
 80032ca:	4b19      	ldr	r3, [pc, #100]	; (8003330 <setRotation+0x29c>)
 80032cc:	2280      	movs	r2, #128	; 0x80
 80032ce:	801a      	strh	r2, [r3, #0]
 80032d0:	e005      	b.n	80032de <setRotation+0x24a>
               else _MC = 0x80, _MP = 0x82;
 80032d2:	4b16      	ldr	r3, [pc, #88]	; (800332c <setRotation+0x298>)
 80032d4:	2280      	movs	r2, #128	; 0x80
 80032d6:	801a      	strh	r2, [r3, #0]
 80032d8:	4b15      	ldr	r3, [pc, #84]	; (8003330 <setRotation+0x29c>)
 80032da:	2282      	movs	r2, #130	; 0x82
 80032dc:	801a      	strh	r2, [r3, #0]
           }
           if (_lcd_ID == 0x5252) {             //HX8352-A
 80032de:	4b11      	ldr	r3, [pc, #68]	; (8003324 <setRotation+0x290>)
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	f245 2252 	movw	r2, #21074	; 0x5252
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d145      	bne.n	8003376 <setRotation+0x2e2>
               val |= 0x02;   //VERT_SCROLLON
 80032ea:	7afb      	ldrb	r3, [r7, #11]
 80032ec:	f043 0302 	orr.w	r3, r3, #2
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 80032f4:	7afb      	ldrb	r3, [r7, #11]
 80032f6:	f003 0310 	and.w	r3, r3, #16
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d03b      	beq.n	8003376 <setRotation+0x2e2>
 80032fe:	7afb      	ldrb	r3, [r7, #11]
 8003300:	f083 032b 	eor.w	r3, r3, #43	; 0x2b
 8003304:	43db      	mvns	r3, r3
 8003306:	b2db      	uxtb	r3, r3
 8003308:	72fb      	strb	r3, [r7, #11]
           }
			goto common_BGR;
 800330a:	e034      	b.n	8003376 <setRotation+0x2e2>
           goto common_MC;
 800330c:	bf00      	nop
 800330e:	e01c      	b.n	800334a <setRotation+0x2b6>
 8003310:	200000e6 	.word	0x200000e6
 8003314:	200000de 	.word	0x200000de
 8003318:	20000004 	.word	0x20000004
 800331c:	20000006 	.word	0x20000006
 8003320:	200000e2 	.word	0x200000e2
 8003324:	200000e4 	.word	0x200000e4
 8003328:	200000d9 	.word	0x200000d9
 800332c:	200000ea 	.word	0x200000ea
 8003330:	200000ec 	.word	0x200000ec
 8003334:	200000ee 	.word	0x200000ee
 8003338:	200000f0 	.word	0x200000f0
 800333c:	200000f2 	.word	0x200000f2
 8003340:	200000f4 	.word	0x200000f4
 8003344:	200000f6 	.word	0x200000f6
       }
     common_MC:
 8003348:	bf00      	nop
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 800334a:	4b8a      	ldr	r3, [pc, #552]	; (8003574 <setRotation+0x4e0>)
 800334c:	222a      	movs	r2, #42	; 0x2a
 800334e:	801a      	strh	r2, [r3, #0]
 8003350:	4b89      	ldr	r3, [pc, #548]	; (8003578 <setRotation+0x4e4>)
 8003352:	222b      	movs	r2, #43	; 0x2b
 8003354:	801a      	strh	r2, [r3, #0]
 8003356:	4b89      	ldr	r3, [pc, #548]	; (800357c <setRotation+0x4e8>)
 8003358:	222c      	movs	r2, #44	; 0x2c
 800335a:	801a      	strh	r2, [r3, #0]
 800335c:	4b88      	ldr	r3, [pc, #544]	; (8003580 <setRotation+0x4ec>)
 800335e:	222a      	movs	r2, #42	; 0x2a
 8003360:	801a      	strh	r2, [r3, #0]
 8003362:	4b88      	ldr	r3, [pc, #544]	; (8003584 <setRotation+0x4f0>)
 8003364:	222a      	movs	r2, #42	; 0x2a
 8003366:	801a      	strh	r2, [r3, #0]
 8003368:	4b87      	ldr	r3, [pc, #540]	; (8003588 <setRotation+0x4f4>)
 800336a:	222b      	movs	r2, #43	; 0x2b
 800336c:	801a      	strh	r2, [r3, #0]
 800336e:	4b87      	ldr	r3, [pc, #540]	; (800358c <setRotation+0x4f8>)
 8003370:	222b      	movs	r2, #43	; 0x2b
 8003372:	801a      	strh	r2, [r3, #0]
 8003374:	e000      	b.n	8003378 <setRotation+0x2e4>
			goto common_BGR;
 8003376:	bf00      	nop
     common_BGR:
       WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 8003378:	4b85      	ldr	r3, [pc, #532]	; (8003590 <setRotation+0x4fc>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <setRotation+0x2f0>
 8003380:	2316      	movs	r3, #22
 8003382:	e000      	b.n	8003386 <setRotation+0x2f2>
 8003384:	2336      	movs	r3, #54	; 0x36
 8003386:	f107 020b 	add.w	r2, r7, #11
 800338a:	2101      	movs	r1, #1
 800338c:	4618      	mov	r0, r3
 800338e:	f7fe f8f5 	bl	800157c <WriteCmdParamN>
       _lcd_madctl = val;
 8003392:	7afb      	ldrb	r3, [r7, #11]
 8003394:	b29a      	uxth	r2, r3
 8003396:	4b7f      	ldr	r3, [pc, #508]	; (8003594 <setRotation+0x500>)
 8003398:	801a      	strh	r2, [r3, #0]
 800339a:	e0a5      	b.n	80034e8 <setRotation+0x454>
//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
   }
   // cope with 9320 variants
   else {
       switch (_lcd_ID) {
 800339c:	4b7e      	ldr	r3, [pc, #504]	; (8003598 <setRotation+0x504>)
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	f24b 5209 	movw	r2, #46345	; 0xb509
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d013      	beq.n	80033d0 <setRotation+0x33c>
 80033a8:	f24b 5209 	movw	r2, #46345	; 0xb509
 80033ac:	4293      	cmp	r3, r2
 80033ae:	dc4f      	bgt.n	8003450 <setRotation+0x3bc>
 80033b0:	f249 3226 	movw	r2, #37670	; 0x9326
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d00b      	beq.n	80033d0 <setRotation+0x33c>
 80033b8:	f249 3226 	movw	r2, #37670	; 0x9326
 80033bc:	4293      	cmp	r3, r2
 80033be:	dc47      	bgt.n	8003450 <setRotation+0x3bc>
 80033c0:	f245 4220 	movw	r2, #21536	; 0x5420
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d003      	beq.n	80033d0 <setRotation+0x33c>
 80033c8:	f247 7293 	movw	r2, #30611	; 0x7793
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d13f      	bne.n	8003450 <setRotation+0x3bc>
#endif
       case 0x5420:
       case 0x7793:
       case 0x9326:
		case 0xB509:
           _MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 80033d0:	4b68      	ldr	r3, [pc, #416]	; (8003574 <setRotation+0x4e0>)
 80033d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033d6:	801a      	strh	r2, [r3, #0]
 80033d8:	4b67      	ldr	r3, [pc, #412]	; (8003578 <setRotation+0x4e4>)
 80033da:	f240 2201 	movw	r2, #513	; 0x201
 80033de:	801a      	strh	r2, [r3, #0]
 80033e0:	4b66      	ldr	r3, [pc, #408]	; (800357c <setRotation+0x4e8>)
 80033e2:	f240 2202 	movw	r2, #514	; 0x202
 80033e6:	801a      	strh	r2, [r3, #0]
 80033e8:	4b65      	ldr	r3, [pc, #404]	; (8003580 <setRotation+0x4ec>)
 80033ea:	f44f 7204 	mov.w	r2, #528	; 0x210
 80033ee:	801a      	strh	r2, [r3, #0]
 80033f0:	4b64      	ldr	r3, [pc, #400]	; (8003584 <setRotation+0x4f0>)
 80033f2:	f240 2211 	movw	r2, #529	; 0x211
 80033f6:	801a      	strh	r2, [r3, #0]
 80033f8:	4b63      	ldr	r3, [pc, #396]	; (8003588 <setRotation+0x4f4>)
 80033fa:	f240 2212 	movw	r2, #530	; 0x212
 80033fe:	801a      	strh	r2, [r3, #0]
 8003400:	4b62      	ldr	r3, [pc, #392]	; (800358c <setRotation+0x4f8>)
 8003402:	f240 2213 	movw	r2, #531	; 0x213
 8003406:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8003408:	7afb      	ldrb	r3, [r7, #11]
 800340a:	b25b      	sxtb	r3, r3
 800340c:	b29b      	uxth	r3, r3
 800340e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003412:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003416:	823b      	strh	r3, [r7, #16]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 8003418:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800341c:	82bb      	strh	r3, [r7, #20]
           if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 800341e:	4b5e      	ldr	r3, [pc, #376]	; (8003598 <setRotation+0x504>)
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	f249 3226 	movw	r2, #37670	; 0x9326
 8003426:	4293      	cmp	r3, r2
 8003428:	d005      	beq.n	8003436 <setRotation+0x3a2>
 800342a:	4b5b      	ldr	r3, [pc, #364]	; (8003598 <setRotation+0x504>)
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	f245 4220 	movw	r2, #21536	; 0x5420
 8003432:	4293      	cmp	r3, r2
 8003434:	d102      	bne.n	800343c <setRotation+0x3a8>
 8003436:	8abb      	ldrh	r3, [r7, #20]
 8003438:	085b      	lsrs	r3, r3, #1
 800343a:	82bb      	strh	r3, [r7, #20]
           WriteCmdData(0x400, GS | NL);
 800343c:	8a3a      	ldrh	r2, [r7, #16]
 800343e:	8abb      	ldrh	r3, [r7, #20]
 8003440:	4313      	orrs	r3, r2
 8003442:	b29b      	uxth	r3, r3
 8003444:	4619      	mov	r1, r3
 8003446:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800344a:	f7fd fecc 	bl	80011e6 <WriteCmdData>
           goto common_SS;
 800344e:	e024      	b.n	800349a <setRotation+0x406>
       default:
           _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 8003450:	4b48      	ldr	r3, [pc, #288]	; (8003574 <setRotation+0x4e0>)
 8003452:	2220      	movs	r2, #32
 8003454:	801a      	strh	r2, [r3, #0]
 8003456:	4b48      	ldr	r3, [pc, #288]	; (8003578 <setRotation+0x4e4>)
 8003458:	2221      	movs	r2, #33	; 0x21
 800345a:	801a      	strh	r2, [r3, #0]
 800345c:	4b47      	ldr	r3, [pc, #284]	; (800357c <setRotation+0x4e8>)
 800345e:	2222      	movs	r2, #34	; 0x22
 8003460:	801a      	strh	r2, [r3, #0]
 8003462:	4b47      	ldr	r3, [pc, #284]	; (8003580 <setRotation+0x4ec>)
 8003464:	2250      	movs	r2, #80	; 0x50
 8003466:	801a      	strh	r2, [r3, #0]
 8003468:	4b46      	ldr	r3, [pc, #280]	; (8003584 <setRotation+0x4f0>)
 800346a:	2251      	movs	r2, #81	; 0x51
 800346c:	801a      	strh	r2, [r3, #0]
 800346e:	4b46      	ldr	r3, [pc, #280]	; (8003588 <setRotation+0x4f4>)
 8003470:	2252      	movs	r2, #82	; 0x52
 8003472:	801a      	strh	r2, [r3, #0]
 8003474:	4b45      	ldr	r3, [pc, #276]	; (800358c <setRotation+0x4f8>)
 8003476:	2253      	movs	r2, #83	; 0x53
 8003478:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 800347a:	7afb      	ldrb	r3, [r7, #11]
 800347c:	b25b      	sxtb	r3, r3
 800347e:	b29b      	uxth	r3, r3
 8003480:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003484:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003488:	823b      	strh	r3, [r7, #16]
           WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 800348a:	8a3b      	ldrh	r3, [r7, #16]
 800348c:	f443 531c 	orr.w	r3, r3, #9984	; 0x2700
 8003490:	b29b      	uxth	r3, r3
 8003492:	4619      	mov	r1, r3
 8003494:	2060      	movs	r0, #96	; 0x60
 8003496:	f7fd fea6 	bl	80011e6 <WriteCmdData>
         common_SS:
           SS_v = (val & 0x40) ? (1 << 8) : 0;
 800349a:	7afb      	ldrb	r3, [r7, #11]
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	b29b      	uxth	r3, r3
 80034a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a4:	81fb      	strh	r3, [r7, #14]
           WriteCmdData(0x01, SS_v);     // set Driver Output Control
 80034a6:	89fb      	ldrh	r3, [r7, #14]
 80034a8:	4619      	mov	r1, r3
 80034aa:	2001      	movs	r0, #1
 80034ac:	f7fd fe9b 	bl	80011e6 <WriteCmdData>
         common_ORG:
           ORG = (val & 0x20) ? (1 << 3) : 0;
 80034b0:	7afb      	ldrb	r3, [r7, #11]
 80034b2:	109b      	asrs	r3, r3, #2
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	82fb      	strh	r3, [r7, #22]
               if (rotation == 1 || rotation == 2) {
                   val ^= 0x08;        // change BGR bit for LANDSCAPE and PORTRAIT_REV
               }
           }
#endif
           if (val & 0x08)
 80034bc:	7afb      	ldrb	r3, [r7, #11]
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <setRotation+0x43a>
               ORG |= 0x1000;  //BGR
 80034c6:	8afb      	ldrh	r3, [r7, #22]
 80034c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034cc:	82fb      	strh	r3, [r7, #22]
           _lcd_madctl = ORG | 0x0030;
 80034ce:	8afb      	ldrh	r3, [r7, #22]
 80034d0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	4b2f      	ldr	r3, [pc, #188]	; (8003594 <setRotation+0x500>)
 80034d8:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 80034da:	4b2e      	ldr	r3, [pc, #184]	; (8003594 <setRotation+0x500>)
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	4619      	mov	r1, r3
 80034e0:	2003      	movs	r0, #3
 80034e2:	f7fd fe80 	bl	80011e6 <WriteCmdData>
           break;
 80034e6:	bf00      	nop
           WriteCmdData(0x11, ORG | 0x6070);   // DFM=3, EN=0, TY=1
           break;
#endif
		}
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 80034e8:	4b2c      	ldr	r3, [pc, #176]	; (800359c <setRotation+0x508>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d023      	beq.n	800353c <setRotation+0x4a8>
 80034f4:	4b2a      	ldr	r3, [pc, #168]	; (80035a0 <setRotation+0x50c>)
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d11d      	bne.n	800353c <setRotation+0x4a8>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 8003500:	4b1c      	ldr	r3, [pc, #112]	; (8003574 <setRotation+0x4e0>)
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	81bb      	strh	r3, [r7, #12]
 8003506:	4b1c      	ldr	r3, [pc, #112]	; (8003578 <setRotation+0x4e4>)
 8003508:	881a      	ldrh	r2, [r3, #0]
 800350a:	4b1a      	ldr	r3, [pc, #104]	; (8003574 <setRotation+0x4e0>)
 800350c:	801a      	strh	r2, [r3, #0]
 800350e:	4a1a      	ldr	r2, [pc, #104]	; (8003578 <setRotation+0x4e4>)
 8003510:	89bb      	ldrh	r3, [r7, #12]
 8003512:	8013      	strh	r3, [r2, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 8003514:	4b1a      	ldr	r3, [pc, #104]	; (8003580 <setRotation+0x4ec>)
 8003516:	881b      	ldrh	r3, [r3, #0]
 8003518:	81bb      	strh	r3, [r7, #12]
 800351a:	4b1b      	ldr	r3, [pc, #108]	; (8003588 <setRotation+0x4f4>)
 800351c:	881a      	ldrh	r2, [r3, #0]
 800351e:	4b18      	ldr	r3, [pc, #96]	; (8003580 <setRotation+0x4ec>)
 8003520:	801a      	strh	r2, [r3, #0]
 8003522:	4a19      	ldr	r2, [pc, #100]	; (8003588 <setRotation+0x4f4>)
 8003524:	89bb      	ldrh	r3, [r7, #12]
 8003526:	8013      	strh	r3, [r2, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 8003528:	4b16      	ldr	r3, [pc, #88]	; (8003584 <setRotation+0x4f0>)
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	81bb      	strh	r3, [r7, #12]
 800352e:	4b17      	ldr	r3, [pc, #92]	; (800358c <setRotation+0x4f8>)
 8003530:	881a      	ldrh	r2, [r3, #0]
 8003532:	4b14      	ldr	r3, [pc, #80]	; (8003584 <setRotation+0x4f0>)
 8003534:	801a      	strh	r2, [r3, #0]
 8003536:	4a15      	ldr	r2, [pc, #84]	; (800358c <setRotation+0x4f8>)
 8003538:	89bb      	ldrh	r3, [r7, #12]
 800353a:	8013      	strh	r3, [r2, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 800353c:	f7fd fd8c 	bl	8001058 <width>
 8003540:	4603      	mov	r3, r0
 8003542:	3b01      	subs	r3, #1
 8003544:	b29b      	uxth	r3, r3
 8003546:	b21c      	sxth	r4, r3
 8003548:	f7fd fd92 	bl	8001070 <height>
 800354c:	4603      	mov	r3, r0
 800354e:	3b01      	subs	r3, #1
 8003550:	b29b      	uxth	r3, r3
 8003552:	b21b      	sxth	r3, r3
 8003554:	4622      	mov	r2, r4
 8003556:	2100      	movs	r1, #0
 8003558:	2000      	movs	r0, #0
 800355a:	f000 f8d9 	bl	8003710 <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 800355e:	2200      	movs	r2, #0
 8003560:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003564:	2000      	movs	r0, #0
 8003566:	f000 f9f7 	bl	8003958 <vertScroll>
}
 800356a:	bf00      	nop
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	bd90      	pop	{r4, r7, pc}
 8003572:	bf00      	nop
 8003574:	200000ea 	.word	0x200000ea
 8003578:	200000ec 	.word	0x200000ec
 800357c:	200000ee 	.word	0x200000ee
 8003580:	200000f0 	.word	0x200000f0
 8003584:	200000f2 	.word	0x200000f2
 8003588:	200000f4 	.word	0x200000f4
 800358c:	200000f6 	.word	0x200000f6
 8003590:	200000d9 	.word	0x200000d9
 8003594:	200000e8 	.word	0x200000e8
 8003598:	200000e4 	.word	0x200000e4
 800359c:	200000de 	.word	0x200000de
 80035a0:	200000e2 	.word	0x200000e2

080035a4 <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 80035a4:	b590      	push	{r4, r7, lr}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	80fb      	strh	r3, [r7, #6]
 80035ae:	460b      	mov	r3, r1
 80035b0:	80bb      	strh	r3, [r7, #4]
 80035b2:	4613      	mov	r3, r2
 80035b4:	807b      	strh	r3, [r7, #2]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 80035b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f2c0 8098 	blt.w	80036f0 <drawPixel+0x14c>
 80035c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f2c0 8093 	blt.w	80036f0 <drawPixel+0x14c>
 80035ca:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80035ce:	f7fd fd43 	bl	8001058 <width>
 80035d2:	4603      	mov	r3, r0
 80035d4:	429c      	cmp	r4, r3
 80035d6:	f280 808b 	bge.w	80036f0 <drawPixel+0x14c>
 80035da:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80035de:	f7fd fd47 	bl	8001070 <height>
 80035e2:	4603      	mov	r3, r0
 80035e4:	429c      	cmp	r4, r3
 80035e6:	f280 8083 	bge.w	80036f0 <drawPixel+0x14c>
       return;
#if defined(SUPPORT_9488_555)
   if (is555) color = color565_to_555(color);
 80035ea:	4b43      	ldr	r3, [pc, #268]	; (80036f8 <drawPixel+0x154>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d005      	beq.n	80035fe <drawPixel+0x5a>
 80035f2:	887b      	ldrh	r3, [r7, #2]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fd fd47 	bl	8001088 <color565_to_555>
 80035fa:	4603      	mov	r3, r0
 80035fc:	807b      	strh	r3, [r7, #2]
#endif
   setAddrWindow(x, y, x, y);
 80035fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003602:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003606:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800360a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800360e:	f000 f87f 	bl	8003710 <setAddrWindow>
//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
   if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 8003612:	4b3a      	ldr	r3, [pc, #232]	; (80036fc <drawPixel+0x158>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d062      	beq.n	80036e0 <drawPixel+0x13c>
 800361a:	2108      	movs	r1, #8
 800361c:	4838      	ldr	r0, [pc, #224]	; (8003700 <drawPixel+0x15c>)
 800361e:	f7fd fccd 	bl	8000fbc <PIN_LOW>
 8003622:	2104      	movs	r1, #4
 8003624:	4836      	ldr	r0, [pc, #216]	; (8003700 <drawPixel+0x15c>)
 8003626:	f7fd fcc9 	bl	8000fbc <PIN_LOW>
 800362a:	4b36      	ldr	r3, [pc, #216]	; (8003704 <drawPixel+0x160>)
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	0a1b      	lsrs	r3, r3, #8
 8003630:	b29b      	uxth	r3, r3
 8003632:	73fb      	strb	r3, [r7, #15]
 8003634:	4b33      	ldr	r3, [pc, #204]	; (8003704 <drawPixel+0x160>)
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	73bb      	strb	r3, [r7, #14]
 800363a:	4b31      	ldr	r3, [pc, #196]	; (8003700 <drawPixel+0x15c>)
 800363c:	4a32      	ldr	r2, [pc, #200]	; (8003708 <drawPixel+0x164>)
 800363e:	619a      	str	r2, [r3, #24]
 8003640:	4b32      	ldr	r3, [pc, #200]	; (800370c <drawPixel+0x168>)
 8003642:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8003646:	619a      	str	r2, [r3, #24]
 8003648:	7bfb      	ldrb	r3, [r7, #15]
 800364a:	035b      	lsls	r3, r3, #13
 800364c:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8003650:	7bfb      	ldrb	r3, [r7, #15]
 8003652:	109b      	asrs	r3, r3, #2
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	431a      	orrs	r2, r3
 800365a:	4b29      	ldr	r3, [pc, #164]	; (8003700 <drawPixel+0x15c>)
 800365c:	619a      	str	r2, [r3, #24]
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	4a2a      	ldr	r2, [pc, #168]	; (800370c <drawPixel+0x168>)
 8003662:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8003666:	6193      	str	r3, [r2, #24]
 8003668:	2102      	movs	r1, #2
 800366a:	4825      	ldr	r0, [pc, #148]	; (8003700 <drawPixel+0x15c>)
 800366c:	f7fd fca6 	bl	8000fbc <PIN_LOW>
 8003670:	2102      	movs	r1, #2
 8003672:	4823      	ldr	r0, [pc, #140]	; (8003700 <drawPixel+0x15c>)
 8003674:	f7fd fcb2 	bl	8000fdc <PIN_HIGH>
 8003678:	2102      	movs	r1, #2
 800367a:	4821      	ldr	r0, [pc, #132]	; (8003700 <drawPixel+0x15c>)
 800367c:	f7fd fcae 	bl	8000fdc <PIN_HIGH>
 8003680:	4b1f      	ldr	r3, [pc, #124]	; (8003700 <drawPixel+0x15c>)
 8003682:	4a21      	ldr	r2, [pc, #132]	; (8003708 <drawPixel+0x164>)
 8003684:	619a      	str	r2, [r3, #24]
 8003686:	4b21      	ldr	r3, [pc, #132]	; (800370c <drawPixel+0x168>)
 8003688:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 800368c:	619a      	str	r2, [r3, #24]
 800368e:	7bbb      	ldrb	r3, [r7, #14]
 8003690:	035b      	lsls	r3, r3, #13
 8003692:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8003696:	7bbb      	ldrb	r3, [r7, #14]
 8003698:	109b      	asrs	r3, r3, #2
 800369a:	f003 0320 	and.w	r3, r3, #32
 800369e:	431a      	orrs	r2, r3
 80036a0:	4b17      	ldr	r3, [pc, #92]	; (8003700 <drawPixel+0x15c>)
 80036a2:	619a      	str	r2, [r3, #24]
 80036a4:	7bbb      	ldrb	r3, [r7, #14]
 80036a6:	4a19      	ldr	r2, [pc, #100]	; (800370c <drawPixel+0x168>)
 80036a8:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 80036ac:	6193      	str	r3, [r2, #24]
 80036ae:	2102      	movs	r1, #2
 80036b0:	4813      	ldr	r0, [pc, #76]	; (8003700 <drawPixel+0x15c>)
 80036b2:	f7fd fc83 	bl	8000fbc <PIN_LOW>
 80036b6:	2102      	movs	r1, #2
 80036b8:	4811      	ldr	r0, [pc, #68]	; (8003700 <drawPixel+0x15c>)
 80036ba:	f7fd fc8f 	bl	8000fdc <PIN_HIGH>
 80036be:	2102      	movs	r1, #2
 80036c0:	480f      	ldr	r0, [pc, #60]	; (8003700 <drawPixel+0x15c>)
 80036c2:	f7fd fc8b 	bl	8000fdc <PIN_HIGH>
 80036c6:	2104      	movs	r1, #4
 80036c8:	480d      	ldr	r0, [pc, #52]	; (8003700 <drawPixel+0x15c>)
 80036ca:	f7fd fc87 	bl	8000fdc <PIN_HIGH>
 80036ce:	887b      	ldrh	r3, [r7, #2]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fd fe0f 	bl	80012f4 <write24>
 80036d6:	2108      	movs	r1, #8
 80036d8:	4809      	ldr	r0, [pc, #36]	; (8003700 <drawPixel+0x15c>)
 80036da:	f7fd fc7f 	bl	8000fdc <PIN_HIGH>
 80036de:	e008      	b.n	80036f2 <drawPixel+0x14e>
   WriteCmdData(_MW, color);
 80036e0:	4b08      	ldr	r3, [pc, #32]	; (8003704 <drawPixel+0x160>)
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	887a      	ldrh	r2, [r7, #2]
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fd fd7c 	bl	80011e6 <WriteCmdData>
 80036ee:	e000      	b.n	80036f2 <drawPixel+0x14e>
       return;
 80036f0:	bf00      	nop
}
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd90      	pop	{r4, r7, pc}
 80036f8:	200000da 	.word	0x200000da
 80036fc:	200000db 	.word	0x200000db
 8003700:	40020000 	.word	0x40020000
 8003704:	200000ee 	.word	0x200000ee
 8003708:	80200000 	.word	0x80200000
 800370c:	40020400 	.word	0x40020400

08003710 <setAddrWindow>:

void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 8003710:	b590      	push	{r4, r7, lr}
 8003712:	b087      	sub	sp, #28
 8003714:	af02      	add	r7, sp, #8
 8003716:	4604      	mov	r4, r0
 8003718:	4608      	mov	r0, r1
 800371a:	4611      	mov	r1, r2
 800371c:	461a      	mov	r2, r3
 800371e:	4623      	mov	r3, r4
 8003720:	80fb      	strh	r3, [r7, #6]
 8003722:	4603      	mov	r3, r0
 8003724:	80bb      	strh	r3, [r7, #4]
 8003726:	460b      	mov	r3, r1
 8003728:	807b      	strh	r3, [r7, #2]
 800372a:	4613      	mov	r3, r2
 800372c:	803b      	strh	r3, [r7, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 800372e:	4b80      	ldr	r3, [pc, #512]	; (8003930 <setAddrWindow+0x220>)
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	f249 3227 	movw	r2, #37671	; 0x9327
 8003736:	4293      	cmp	r3, r2
 8003738:	d117      	bne.n	800376a <setAddrWindow+0x5a>
	    if (rotation == 2) y += OFFSET_9327, y1 += OFFSET_9327;
 800373a:	4b7e      	ldr	r3, [pc, #504]	; (8003934 <setAddrWindow+0x224>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d107      	bne.n	8003752 <setAddrWindow+0x42>
 8003742:	88bb      	ldrh	r3, [r7, #4]
 8003744:	3320      	adds	r3, #32
 8003746:	b29b      	uxth	r3, r3
 8003748:	80bb      	strh	r3, [r7, #4]
 800374a:	883b      	ldrh	r3, [r7, #0]
 800374c:	3320      	adds	r3, #32
 800374e:	b29b      	uxth	r3, r3
 8003750:	803b      	strh	r3, [r7, #0]
	    if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;
 8003752:	4b78      	ldr	r3, [pc, #480]	; (8003934 <setAddrWindow+0x224>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b03      	cmp	r3, #3
 8003758:	d107      	bne.n	800376a <setAddrWindow+0x5a>
 800375a:	88fb      	ldrh	r3, [r7, #6]
 800375c:	3320      	adds	r3, #32
 800375e:	b29b      	uxth	r3, r3
 8003760:	80fb      	strh	r3, [r7, #6]
 8003762:	887b      	ldrh	r3, [r7, #2]
 8003764:	3320      	adds	r3, #32
 8003766:	b29b      	uxth	r3, r3
 8003768:	807b      	strh	r3, [r7, #2]
   }
#endif
#if 1
   if (_lcd_ID == 0x1526 && (rotation & 1)) {
 800376a:	4b71      	ldr	r3, [pc, #452]	; (8003930 <setAddrWindow+0x220>)
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	f241 5226 	movw	r2, #5414	; 0x1526
 8003772:	4293      	cmp	r3, r2
 8003774:	d128      	bne.n	80037c8 <setAddrWindow+0xb8>
 8003776:	4b6f      	ldr	r3, [pc, #444]	; (8003934 <setAddrWindow+0x224>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d022      	beq.n	80037c8 <setAddrWindow+0xb8>
		int16_t dx = x1 - x, dy = y1 - y;
 8003782:	887a      	ldrh	r2, [r7, #2]
 8003784:	88fb      	ldrh	r3, [r7, #6]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	b29b      	uxth	r3, r3
 800378a:	81fb      	strh	r3, [r7, #14]
 800378c:	883a      	ldrh	r2, [r7, #0]
 800378e:	88bb      	ldrh	r3, [r7, #4]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	b29b      	uxth	r3, r3
 8003794:	81bb      	strh	r3, [r7, #12]
		if (dy == 0) { y1++; }
 8003796:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d106      	bne.n	80037ac <setAddrWindow+0x9c>
 800379e:	f9b7 3000 	ldrsh.w	r3, [r7]
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3301      	adds	r3, #1
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	803b      	strh	r3, [r7, #0]
 80037aa:	e00d      	b.n	80037c8 <setAddrWindow+0xb8>
		else if (dx == 0) { x1 += dy; y1 -= dy; }
 80037ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d109      	bne.n	80037c8 <setAddrWindow+0xb8>
 80037b4:	887a      	ldrh	r2, [r7, #2]
 80037b6:	89bb      	ldrh	r3, [r7, #12]
 80037b8:	4413      	add	r3, r2
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	807b      	strh	r3, [r7, #2]
 80037be:	883a      	ldrh	r2, [r7, #0]
 80037c0:	89bb      	ldrh	r3, [r7, #12]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	803b      	strh	r3, [r7, #0]
   }
#endif
   if (_lcd_capable & MIPI_DCS_REV1) {
 80037c8:	4b5b      	ldr	r3, [pc, #364]	; (8003938 <setAddrWindow+0x228>)
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d054      	beq.n	800387e <setAddrWindow+0x16e>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 80037d4:	4b59      	ldr	r3, [pc, #356]	; (800393c <setAddrWindow+0x22c>)
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	b2d8      	uxtb	r0, r3
 80037da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037de:	121b      	asrs	r3, r3, #8
 80037e0:	b21b      	sxth	r3, r3
 80037e2:	b2d9      	uxtb	r1, r3
 80037e4:	88fb      	ldrh	r3, [r7, #6]
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80037ec:	121b      	asrs	r3, r3, #8
 80037ee:	b21b      	sxth	r3, r3
 80037f0:	b2dc      	uxtb	r4, r3
 80037f2:	887b      	ldrh	r3, [r7, #2]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	4623      	mov	r3, r4
 80037fa:	f7fd ffc1 	bl	8001780 <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 80037fe:	4b50      	ldr	r3, [pc, #320]	; (8003940 <setAddrWindow+0x230>)
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	b2d8      	uxtb	r0, r3
 8003804:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003808:	121b      	asrs	r3, r3, #8
 800380a:	b21b      	sxth	r3, r3
 800380c:	b2d9      	uxtb	r1, r3
 800380e:	88bb      	ldrh	r3, [r7, #4]
 8003810:	b2da      	uxtb	r2, r3
 8003812:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003816:	121b      	asrs	r3, r3, #8
 8003818:	b21b      	sxth	r3, r3
 800381a:	b2dc      	uxtb	r4, r3
 800381c:	883b      	ldrh	r3, [r7, #0]
 800381e:	b2db      	uxtb	r3, r3
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	4623      	mov	r3, r4
 8003824:	f7fd ffac 	bl	8001780 <WriteCmdParam4>
       if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 8003828:	4b46      	ldr	r3, [pc, #280]	; (8003944 <setAddrWindow+0x234>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d07b      	beq.n	8003928 <setAddrWindow+0x218>
 8003830:	4b3f      	ldr	r3, [pc, #252]	; (8003930 <setAddrWindow+0x220>)
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	2b65      	cmp	r3, #101	; 0x65
 8003836:	d177      	bne.n	8003928 <setAddrWindow+0x218>
           uint8_t d[2];
           d[0] = x >> 8; d[1] = x;
 8003838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800383c:	121b      	asrs	r3, r3, #8
 800383e:	b21b      	sxth	r3, r3
 8003840:	b2db      	uxtb	r3, r3
 8003842:	723b      	strb	r3, [r7, #8]
 8003844:	88fb      	ldrh	r3, [r7, #6]
 8003846:	b2db      	uxtb	r3, r3
 8003848:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 800384a:	4b3f      	ldr	r3, [pc, #252]	; (8003948 <setAddrWindow+0x238>)
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	f107 0208 	add.w	r2, r7, #8
 8003852:	2102      	movs	r1, #2
 8003854:	4618      	mov	r0, r3
 8003856:	f7fd fe91 	bl	800157c <WriteCmdParamN>
           d[0] = y >> 8; d[1] = y;
 800385a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800385e:	121b      	asrs	r3, r3, #8
 8003860:	b21b      	sxth	r3, r3
 8003862:	b2db      	uxtb	r3, r3
 8003864:	723b      	strb	r3, [r7, #8]
 8003866:	88bb      	ldrh	r3, [r7, #4]
 8003868:	b2db      	uxtb	r3, r3
 800386a:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MP, 2, d);
 800386c:	4b37      	ldr	r3, [pc, #220]	; (800394c <setAddrWindow+0x23c>)
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	f107 0208 	add.w	r2, r7, #8
 8003874:	2102      	movs	r1, #2
 8003876:	4618      	mov	r0, r3
 8003878:	f7fd fe80 	bl	800157c <WriteCmdParamN>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 800387c:	e054      	b.n	8003928 <setAddrWindow+0x218>
       WriteCmdData(_MC, x);
 800387e:	4b32      	ldr	r3, [pc, #200]	; (8003948 <setAddrWindow+0x238>)
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	88fa      	ldrh	r2, [r7, #6]
 8003884:	4611      	mov	r1, r2
 8003886:	4618      	mov	r0, r3
 8003888:	f7fd fcad 	bl	80011e6 <WriteCmdData>
       WriteCmdData(_MP, y);
 800388c:	4b2f      	ldr	r3, [pc, #188]	; (800394c <setAddrWindow+0x23c>)
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	88ba      	ldrh	r2, [r7, #4]
 8003892:	4611      	mov	r1, r2
 8003894:	4618      	mov	r0, r3
 8003896:	f7fd fca6 	bl	80011e6 <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 800389a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800389e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d105      	bne.n	80038b2 <setAddrWindow+0x1a2>
 80038a6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80038aa:	f9b7 3000 	ldrsh.w	r3, [r7]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d03a      	beq.n	8003928 <setAddrWindow+0x218>
           if (_lcd_capable & XSA_XEA_16BIT) {
 80038b2:	4b21      	ldr	r3, [pc, #132]	; (8003938 <setAddrWindow+0x228>)
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	f003 0320 	and.w	r3, r3, #32
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d018      	beq.n	80038f0 <setAddrWindow+0x1e0>
               if (rotation & 1)
 80038be:	4b1d      	ldr	r3, [pc, #116]	; (8003934 <setAddrWindow+0x224>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d009      	beq.n	80038de <setAddrWindow+0x1ce>
                   y1 = y = (y1 << 8) | y;
 80038ca:	f9b7 3000 	ldrsh.w	r3, [r7]
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	b21a      	sxth	r2, r3
 80038d2:	88bb      	ldrh	r3, [r7, #4]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	80bb      	strh	r3, [r7, #4]
 80038d8:	88bb      	ldrh	r3, [r7, #4]
 80038da:	803b      	strh	r3, [r7, #0]
 80038dc:	e008      	b.n	80038f0 <setAddrWindow+0x1e0>
                   x1 = x = (x1 << 8) | x;
 80038de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80038e2:	021b      	lsls	r3, r3, #8
 80038e4:	b21a      	sxth	r2, r3
 80038e6:	88fb      	ldrh	r3, [r7, #6]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	80fb      	strh	r3, [r7, #6]
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	807b      	strh	r3, [r7, #2]
           WriteCmdData(_SC, x);
 80038f0:	4b12      	ldr	r3, [pc, #72]	; (800393c <setAddrWindow+0x22c>)
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	88fa      	ldrh	r2, [r7, #6]
 80038f6:	4611      	mov	r1, r2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fd fc74 	bl	80011e6 <WriteCmdData>
           WriteCmdData(_SP, y);
 80038fe:	4b10      	ldr	r3, [pc, #64]	; (8003940 <setAddrWindow+0x230>)
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	88ba      	ldrh	r2, [r7, #4]
 8003904:	4611      	mov	r1, r2
 8003906:	4618      	mov	r0, r3
 8003908:	f7fd fc6d 	bl	80011e6 <WriteCmdData>
           WriteCmdData(_EC, x1);
 800390c:	4b10      	ldr	r3, [pc, #64]	; (8003950 <setAddrWindow+0x240>)
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	887a      	ldrh	r2, [r7, #2]
 8003912:	4611      	mov	r1, r2
 8003914:	4618      	mov	r0, r3
 8003916:	f7fd fc66 	bl	80011e6 <WriteCmdData>
           WriteCmdData(_EP, y1);
 800391a:	4b0e      	ldr	r3, [pc, #56]	; (8003954 <setAddrWindow+0x244>)
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	883a      	ldrh	r2, [r7, #0]
 8003920:	4611      	mov	r1, r2
 8003922:	4618      	mov	r0, r3
 8003924:	f7fd fc5f 	bl	80011e6 <WriteCmdData>
}
 8003928:	bf00      	nop
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	bd90      	pop	{r4, r7, pc}
 8003930:	200000e4 	.word	0x200000e4
 8003934:	200000de 	.word	0x200000de
 8003938:	200000e2 	.word	0x200000e2
 800393c:	200000f0 	.word	0x200000f0
 8003940:	200000f4 	.word	0x200000f4
 8003944:	200000d9 	.word	0x200000d9
 8003948:	200000ea 	.word	0x200000ea
 800394c:	200000ec 	.word	0x200000ec
 8003950:	200000f2 	.word	0x200000f2
 8003954:	200000f6 	.word	0x200000f6

08003958 <vertScroll>:

void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	80fb      	strh	r3, [r7, #6]
 8003962:	460b      	mov	r3, r1
 8003964:	80bb      	strh	r3, [r7, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	807b      	strh	r3, [r7, #2]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 800396a:	4b89      	ldr	r3, [pc, #548]	; (8003b90 <vertScroll+0x238>)
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	f249 3227 	movw	r2, #37671	; 0x9327
 8003972:	4293      	cmp	r3, r2
 8003974:	d10b      	bne.n	800398e <vertScroll+0x36>
	    if (rotation == 2 || rotation == 3) top += OFFSET_9327;
 8003976:	4b87      	ldr	r3, [pc, #540]	; (8003b94 <vertScroll+0x23c>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b02      	cmp	r3, #2
 800397c:	d003      	beq.n	8003986 <vertScroll+0x2e>
 800397e:	4b85      	ldr	r3, [pc, #532]	; (8003b94 <vertScroll+0x23c>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b03      	cmp	r3, #3
 8003984:	d103      	bne.n	800398e <vertScroll+0x36>
 8003986:	88fb      	ldrh	r3, [r7, #6]
 8003988:	3320      	adds	r3, #32
 800398a:	b29b      	uxth	r3, r3
 800398c:	80fb      	strh	r3, [r7, #6]
    }
#endif
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 800398e:	88fa      	ldrh	r2, [r7, #6]
 8003990:	88bb      	ldrh	r3, [r7, #4]
 8003992:	4413      	add	r3, r2
 8003994:	b29b      	uxth	r3, r3
 8003996:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800399a:	b29b      	uxth	r3, r3
 800399c:	82fb      	strh	r3, [r7, #22]
    int16_t vsp;
    int16_t sea = top;
 800399e:	88fb      	ldrh	r3, [r7, #6]
 80039a0:	827b      	strh	r3, [r7, #18]
	if (_lcd_ID == 0x9327) bfa += 32;
 80039a2:	4b7b      	ldr	r3, [pc, #492]	; (8003b90 <vertScroll+0x238>)
 80039a4:	881b      	ldrh	r3, [r3, #0]
 80039a6:	f249 3227 	movw	r2, #37671	; 0x9327
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d103      	bne.n	80039b6 <vertScroll+0x5e>
 80039ae:	8afb      	ldrh	r3, [r7, #22]
 80039b0:	3320      	adds	r3, #32
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	82fb      	strh	r3, [r7, #22]
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 80039b6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80039ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80039be:	425b      	negs	r3, r3
 80039c0:	429a      	cmp	r2, r3
 80039c2:	dd05      	ble.n	80039d0 <vertScroll+0x78>
 80039c4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80039c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	db01      	blt.n	80039d4 <vertScroll+0x7c>
 80039d0:	2300      	movs	r3, #0
 80039d2:	807b      	strh	r3, [r7, #2]
	vsp = top + offset; // vertical start position
 80039d4:	88fa      	ldrh	r2, [r7, #6]
 80039d6:	887b      	ldrh	r3, [r7, #2]
 80039d8:	4413      	add	r3, r2
 80039da:	b29b      	uxth	r3, r3
 80039dc:	82bb      	strh	r3, [r7, #20]
    if (offset < 0)
 80039de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	da04      	bge.n	80039f0 <vertScroll+0x98>
        vsp += scrollines;          //keep in unsigned range
 80039e6:	8aba      	ldrh	r2, [r7, #20]
 80039e8:	88bb      	ldrh	r3, [r7, #4]
 80039ea:	4413      	add	r3, r2
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	82bb      	strh	r3, [r7, #20]
    sea = top + scrollines - 1;
 80039f0:	88fa      	ldrh	r2, [r7, #6]
 80039f2:	88bb      	ldrh	r3, [r7, #4]
 80039f4:	4413      	add	r3, r2
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	827b      	strh	r3, [r7, #18]
    if (_lcd_capable & MIPI_DCS_REV1) {
 80039fe:	4b66      	ldr	r3, [pc, #408]	; (8003b98 <vertScroll+0x240>)
 8003a00:	881b      	ldrh	r3, [r3, #0]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d071      	beq.n	8003aee <vertScroll+0x196>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 8003a0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a0e:	121b      	asrs	r3, r3, #8
 8003a10:	b21b      	sxth	r3, r3
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	733b      	strb	r3, [r7, #12]
        d[1] = top;
 8003a16:	88fb      	ldrh	r3, [r7, #6]
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	737b      	strb	r3, [r7, #13]
        d[2] = scrollines >> 8; //VSA
 8003a1c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003a20:	121b      	asrs	r3, r3, #8
 8003a22:	b21b      	sxth	r3, r3
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	73bb      	strb	r3, [r7, #14]
        d[3] = scrollines;
 8003a28:	88bb      	ldrh	r3, [r7, #4]
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	73fb      	strb	r3, [r7, #15]
        d[4] = bfa >> 8;        //BFA
 8003a2e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003a32:	121b      	asrs	r3, r3, #8
 8003a34:	b21b      	sxth	r3, r3
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	743b      	strb	r3, [r7, #16]
        d[5] = bfa;
 8003a3a:	8afb      	ldrh	r3, [r7, #22]
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	747b      	strb	r3, [r7, #17]
        WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 8003a40:	4b56      	ldr	r3, [pc, #344]	; (8003b9c <vertScroll+0x244>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <vertScroll+0xf4>
 8003a48:	230e      	movs	r3, #14
 8003a4a:	e000      	b.n	8003a4e <vertScroll+0xf6>
 8003a4c:	2333      	movs	r3, #51	; 0x33
 8003a4e:	f107 020c 	add.w	r2, r7, #12
 8003a52:	2106      	movs	r1, #6
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fd fd91 	bl	800157c <WriteCmdParamN>
//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 8003a5a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a5e:	121b      	asrs	r3, r3, #8
 8003a60:	b21b      	sxth	r3, r3
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	733b      	strb	r3, [r7, #12]
        d[1] = vsp;
 8003a66:	8abb      	ldrh	r3, [r7, #20]
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	737b      	strb	r3, [r7, #13]
        WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 8003a6c:	4b4b      	ldr	r3, [pc, #300]	; (8003b9c <vertScroll+0x244>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <vertScroll+0x120>
 8003a74:	2314      	movs	r3, #20
 8003a76:	e000      	b.n	8003a7a <vertScroll+0x122>
 8003a78:	2337      	movs	r3, #55	; 0x37
 8003a7a:	f107 020c 	add.w	r2, r7, #12
 8003a7e:	2102      	movs	r1, #2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fd fd7b 	bl	800157c <WriteCmdParamN>
		if (is8347) {
 8003a86:	4b45      	ldr	r3, [pc, #276]	; (8003b9c <vertScroll+0x244>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d01f      	beq.n	8003ace <vertScroll+0x176>
		    d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 8003a8e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <vertScroll+0x152>
 8003a96:	4b3e      	ldr	r3, [pc, #248]	; (8003b90 <vertScroll+0x238>)
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	f248 3247 	movw	r2, #33607	; 0x8347
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d101      	bne.n	8003aa6 <vertScroll+0x14e>
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	e002      	b.n	8003aac <vertScroll+0x154>
 8003aa6:	2308      	movs	r3, #8
 8003aa8:	e000      	b.n	8003aac <vertScroll+0x154>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	733b      	strb	r3, [r7, #12]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 8003aae:	4b38      	ldr	r3, [pc, #224]	; (8003b90 <vertScroll+0x238>)
 8003ab0:	881b      	ldrh	r3, [r3, #0]
 8003ab2:	f248 3247 	movw	r2, #33607	; 0x8347
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d101      	bne.n	8003abe <vertScroll+0x166>
 8003aba:	2318      	movs	r3, #24
 8003abc:	e000      	b.n	8003ac0 <vertScroll+0x168>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	f107 020c 	add.w	r2, r7, #12
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fd fd58 	bl	800157c <WriteCmdParamN>
 8003acc:	e05d      	b.n	8003b8a <vertScroll+0x232>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 8003ace:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d159      	bne.n	8003b8a <vertScroll+0x232>
 8003ad6:	4b30      	ldr	r3, [pc, #192]	; (8003b98 <vertScroll+0x240>)
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d053      	beq.n	8003b8a <vertScroll+0x232>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	2013      	movs	r0, #19
 8003ae8:	f7fd fd48 	bl	800157c <WriteCmdParamN>
 8003aec:	e04d      	b.n	8003b8a <vertScroll+0x232>
		}
		return;
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8003aee:	4b28      	ldr	r3, [pc, #160]	; (8003b90 <vertScroll+0x238>)
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d027      	beq.n	8003b4a <vertScroll+0x1f2>
 8003afa:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003afe:	4293      	cmp	r3, r2
 8003b00:	dc34      	bgt.n	8003b6c <vertScroll+0x214>
 8003b02:	f249 3226 	movw	r2, #37670	; 0x9326
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d01f      	beq.n	8003b4a <vertScroll+0x1f2>
 8003b0a:	f249 3226 	movw	r2, #37670	; 0x9326
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	dc2c      	bgt.n	8003b6c <vertScroll+0x214>
 8003b12:	f247 7293 	movw	r2, #30611	; 0x7793
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d017      	beq.n	8003b4a <vertScroll+0x1f2>
 8003b1a:	f247 7293 	movw	r2, #30611	; 0x7793
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	dc24      	bgt.n	8003b6c <vertScroll+0x214>
 8003b22:	f245 4220 	movw	r2, #21536	; 0x5420
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d00f      	beq.n	8003b4a <vertScroll+0x1f2>
 8003b2a:	f247 7283 	movw	r2, #30595	; 0x7783
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d11c      	bne.n	8003b6c <vertScroll+0x214>
    case 0x7783:
        WriteCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 8003b32:	4b1b      	ldr	r3, [pc, #108]	; (8003ba0 <vertScroll+0x248>)
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	4619      	mov	r1, r3
 8003b38:	2061      	movs	r0, #97	; 0x61
 8003b3a:	f7fd fb54 	bl	80011e6 <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8003b3e:	8abb      	ldrh	r3, [r7, #20]
 8003b40:	4619      	mov	r1, r3
 8003b42:	206a      	movs	r0, #106	; 0x6a
 8003b44:	f7fd fb4f 	bl	80011e6 <WriteCmdData>
        break;
 8003b48:	e01f      	b.n	8003b8a <vertScroll+0x232>
#endif
	case 0x5420:
    case 0x7793:
	case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 8003b4a:	4b15      	ldr	r3, [pc, #84]	; (8003ba0 <vertScroll+0x248>)
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	f043 0302 	orr.w	r3, r3, #2
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	4619      	mov	r1, r3
 8003b56:	f240 4001 	movw	r0, #1025	; 0x401
 8003b5a:	f7fd fb44 	bl	80011e6 <WriteCmdData>
        WriteCmdData(0x404, vsp);       //VL#
 8003b5e:	8abb      	ldrh	r3, [r7, #20]
 8003b60:	4619      	mov	r1, r3
 8003b62:	f240 4004 	movw	r0, #1028	; 0x404
 8003b66:	f7fd fb3e 	bl	80011e6 <WriteCmdData>
        break;
 8003b6a:	e00e      	b.n	8003b8a <vertScroll+0x232>
    default:
        // 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
        WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 8003b6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ba0 <vertScroll+0x248>)
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	f043 0302 	orr.w	r3, r3, #2
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	4619      	mov	r1, r3
 8003b78:	2061      	movs	r0, #97	; 0x61
 8003b7a:	f7fd fb34 	bl	80011e6 <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8003b7e:	8abb      	ldrh	r3, [r7, #20]
 8003b80:	4619      	mov	r1, r3
 8003b82:	206a      	movs	r0, #106	; 0x6a
 8003b84:	f7fd fb2f 	bl	80011e6 <WriteCmdData>
        break;
 8003b88:	bf00      	nop
    }
}
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	200000e4 	.word	0x200000e4
 8003b94:	200000de 	.word	0x200000de
 8003b98:	200000e2 	.word	0x200000e2
 8003b9c:	200000d9 	.word	0x200000d9
 8003ba0:	200000e6 	.word	0x200000e6

08003ba4 <fillScreen>:
{
    pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}

void fillScreen(uint16_t color)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	4603      	mov	r3, r0
 8003bac:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8003bae:	4b08      	ldr	r3, [pc, #32]	; (8003bd0 <fillScreen+0x2c>)
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	b21a      	sxth	r2, r3
 8003bb4:	4b07      	ldr	r3, [pc, #28]	; (8003bd4 <fillScreen+0x30>)
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	b219      	sxth	r1, r3
 8003bba:	88fb      	ldrh	r3, [r7, #6]
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	f000 f8c4 	bl	8003d50 <fillRect>
}
 8003bc8:	bf00      	nop
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20000004 	.word	0x20000004
 8003bd4:	20000006 	.word	0x20000006

08003bd8 <invertDisplay>:

void invertDisplay(uint8_t i)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4603      	mov	r3, r0
 8003be0:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 8003be2:	4b4c      	ldr	r3, [pc, #304]	; (8003d14 <invertDisplay+0x13c>)
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	bf14      	ite	ne
 8003bee:	2301      	movne	r3, #1
 8003bf0:	2300      	moveq	r3, #0
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	b21a      	sxth	r2, r3
 8003bf6:	79fb      	ldrb	r3, [r7, #7]
 8003bf8:	b21b      	sxth	r3, r3
 8003bfa:	4053      	eors	r3, r2
 8003bfc:	b21b      	sxth	r3, r3
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	4b45      	ldr	r3, [pc, #276]	; (8003d18 <invertDisplay+0x140>)
 8003c02:	801a      	strh	r2, [r3, #0]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8003c04:	4b43      	ldr	r3, [pc, #268]	; (8003d14 <invertDisplay+0x13c>)
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d035      	beq.n	8003c7c <invertDisplay+0xa4>
        if (is8347) {
 8003c10:	4b42      	ldr	r3, [pc, #264]	; (8003d1c <invertDisplay+0x144>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d024      	beq.n	8003c62 <invertDisplay+0x8a>
            // HX8347D: 0x36 Panel Characteristic. REV_Panel
            // HX8347A: 0x36 is Display Control 10
            if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 8003c18:	4b41      	ldr	r3, [pc, #260]	; (8003d20 <invertDisplay+0x148>)
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	f248 3247 	movw	r2, #33607	; 0x8347
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d005      	beq.n	8003c30 <invertDisplay+0x58>
 8003c24:	4b3e      	ldr	r3, [pc, #248]	; (8003d20 <invertDisplay+0x148>)
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	f245 2252 	movw	r2, #21074	; 0x5252
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d108      	bne.n	8003c42 <invertDisplay+0x6a>
			    val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 8003c30:	4b39      	ldr	r3, [pc, #228]	; (8003d18 <invertDisplay+0x140>)
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <invertDisplay+0x64>
 8003c38:	2306      	movs	r3, #6
 8003c3a:	e000      	b.n	8003c3e <invertDisplay+0x66>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	73fb      	strb	r3, [r7, #15]
 8003c40:	e007      	b.n	8003c52 <invertDisplay+0x7a>
            else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 8003c42:	4b35      	ldr	r3, [pc, #212]	; (8003d18 <invertDisplay+0x140>)
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <invertDisplay+0x76>
 8003c4a:	2308      	movs	r3, #8
 8003c4c:	e000      	b.n	8003c50 <invertDisplay+0x78>
 8003c4e:	230a      	movs	r3, #10
 8003c50:	73fb      	strb	r3, [r7, #15]
            // HX8347: 0x01 Display Mode has diff bit mapping for A, D
            WriteCmdParamN(0x01, 1, &val);
 8003c52:	f107 030f 	add.w	r3, r7, #15
 8003c56:	461a      	mov	r2, r3
 8003c58:	2101      	movs	r1, #1
 8003c5a:	2001      	movs	r0, #1
 8003c5c:	f7fd fc8e 	bl	800157c <WriteCmdParamN>
        } else
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
        return;
 8003c60:	e055      	b.n	8003d0e <invertDisplay+0x136>
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 8003c62:	4b2d      	ldr	r3, [pc, #180]	; (8003d18 <invertDisplay+0x140>)
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <invertDisplay+0x96>
 8003c6a:	2321      	movs	r3, #33	; 0x21
 8003c6c:	e000      	b.n	8003c70 <invertDisplay+0x98>
 8003c6e:	2320      	movs	r3, #32
 8003c70:	2200      	movs	r2, #0
 8003c72:	2100      	movs	r1, #0
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fd fc81 	bl	800157c <WriteCmdParamN>
 8003c7a:	e048      	b.n	8003d0e <invertDisplay+0x136>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8003c7c:	4b28      	ldr	r3, [pc, #160]	; (8003d20 <invertDisplay+0x148>)
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d030      	beq.n	8003cea <invertDisplay+0x112>
 8003c88:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	dc37      	bgt.n	8003d00 <invertDisplay+0x128>
 8003c90:	f249 3226 	movw	r2, #37670	; 0x9326
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d028      	beq.n	8003cea <invertDisplay+0x112>
 8003c98:	f249 3226 	movw	r2, #37670	; 0x9326
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	dc2f      	bgt.n	8003d00 <invertDisplay+0x128>
 8003ca0:	f249 2225 	movw	r2, #37413	; 0x9225
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d013      	beq.n	8003cd0 <invertDisplay+0xf8>
 8003ca8:	f249 2225 	movw	r2, #37413	; 0x9225
 8003cac:	4293      	cmp	r3, r2
 8003cae:	dc27      	bgt.n	8003d00 <invertDisplay+0x128>
 8003cb0:	f247 7293 	movw	r2, #30611	; 0x7793
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d018      	beq.n	8003cea <invertDisplay+0x112>
 8003cb8:	f247 7293 	movw	r2, #30611	; 0x7793
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	dc1f      	bgt.n	8003d00 <invertDisplay+0x128>
 8003cc0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003cc4:	d004      	beq.n	8003cd0 <invertDisplay+0xf8>
 8003cc6:	f245 4220 	movw	r2, #21536	; 0x5420
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00d      	beq.n	8003cea <invertDisplay+0x112>
 8003cce:	e017      	b.n	8003d00 <invertDisplay+0x128>
#ifdef SUPPORT_0139
    case 0x0139:
#endif
    case 0x9225:                                        //REV is in reg(0x07) like Samsung
    case 0x0154:
        WriteCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 8003cd0:	4b11      	ldr	r3, [pc, #68]	; (8003d18 <invertDisplay+0x140>)
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	b21b      	sxth	r3, r3
 8003cd8:	f043 0313 	orr.w	r3, r3, #19
 8003cdc:	b21b      	sxth	r3, r3
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	2007      	movs	r0, #7
 8003ce4:	f7fd fa7f 	bl	80011e6 <WriteCmdData>
        break;
 8003ce8:	e011      	b.n	8003d0e <invertDisplay+0x136>
#endif
	case 0x5420:
    case 0x7793:
    case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 8003cea:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <invertDisplay+0x140>)
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	f043 0302 	orr.w	r3, r3, #2
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	f240 4001 	movw	r0, #1025	; 0x401
 8003cfa:	f7fd fa74 	bl	80011e6 <WriteCmdData>
        break;
 8003cfe:	e006      	b.n	8003d0e <invertDisplay+0x136>
    default:
        WriteCmdData(0x61, _lcd_rev);
 8003d00:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <invertDisplay+0x140>)
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	4619      	mov	r1, r3
 8003d06:	2061      	movs	r0, #97	; 0x61
 8003d08:	f7fd fa6d 	bl	80011e6 <WriteCmdData>
        break;
 8003d0c:	bf00      	nop
    }
}
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	200000e2 	.word	0x200000e2
 8003d18:	200000e6 	.word	0x200000e6
 8003d1c:	200000d9 	.word	0x200000d9
 8003d20:	200000e4 	.word	0x200000e4

08003d24 <writePixel>:
{
	fillRect(x, y, w, 1, color);
}

void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	80fb      	strh	r3, [r7, #6]
 8003d2e:	460b      	mov	r3, r1
 8003d30:	80bb      	strh	r3, [r7, #4]
 8003d32:	4613      	mov	r3, r2
 8003d34:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 8003d36:	887a      	ldrh	r2, [r7, #2]
 8003d38:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003d3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff fc2f 	bl	80035a4 <drawPixel>
}
 8003d46:	bf00      	nop
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
	...

08003d50 <fillRect>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8003d50:	b590      	push	{r4, r7, lr}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	4604      	mov	r4, r0
 8003d58:	4608      	mov	r0, r1
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	4623      	mov	r3, r4
 8003d60:	80fb      	strh	r3, [r7, #6]
 8003d62:	4603      	mov	r3, r0
 8003d64:	80bb      	strh	r3, [r7, #4]
 8003d66:	460b      	mov	r3, r1
 8003d68:	807b      	strh	r3, [r7, #2]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	803b      	strh	r3, [r7, #0]
    int16_t end;
#if defined(SUPPORT_9488_555)
    if (is555) color = color565_to_555(color);
 8003d6e:	4b6e      	ldr	r3, [pc, #440]	; (8003f28 <fillRect+0x1d8>)
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <fillRect+0x32>
 8003d76:	8c3b      	ldrh	r3, [r7, #32]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7fd f985 	bl	8001088 <color565_to_555>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	843b      	strh	r3, [r7, #32]
#endif
    if (w < 0) {
 8003d82:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	da08      	bge.n	8003d9c <fillRect+0x4c>
        w = -w;
 8003d8a:	887b      	ldrh	r3, [r7, #2]
 8003d8c:	425b      	negs	r3, r3
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	807b      	strh	r3, [r7, #2]
        x -= w;
 8003d92:	88fa      	ldrh	r2, [r7, #6]
 8003d94:	887b      	ldrh	r3, [r7, #2]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	80fb      	strh	r3, [r7, #6]
    }                           //+ve w
    end = x + w;
 8003d9c:	88fa      	ldrh	r2, [r7, #6]
 8003d9e:	887b      	ldrh	r3, [r7, #2]
 8003da0:	4413      	add	r3, r2
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	81fb      	strh	r3, [r7, #14]
    if (x < 0)
 8003da6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	da01      	bge.n	8003db2 <fillRect+0x62>
        x = 0;
 8003dae:	2300      	movs	r3, #0
 8003db0:	80fb      	strh	r3, [r7, #6]
    if (end > width())
 8003db2:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8003db6:	f7fd f94f 	bl	8001058 <width>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	429c      	cmp	r4, r3
 8003dbe:	dd03      	ble.n	8003dc8 <fillRect+0x78>
        end = width();
 8003dc0:	f7fd f94a 	bl	8001058 <width>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	81fb      	strh	r3, [r7, #14]
    w = end - x;
 8003dc8:	89fa      	ldrh	r2, [r7, #14]
 8003dca:	88fb      	ldrh	r3, [r7, #6]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	807b      	strh	r3, [r7, #2]
    if (h < 0) {
 8003dd2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	da08      	bge.n	8003dec <fillRect+0x9c>
        h = -h;
 8003dda:	883b      	ldrh	r3, [r7, #0]
 8003ddc:	425b      	negs	r3, r3
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	803b      	strh	r3, [r7, #0]
        y -= h;
 8003de2:	88ba      	ldrh	r2, [r7, #4]
 8003de4:	883b      	ldrh	r3, [r7, #0]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	80bb      	strh	r3, [r7, #4]
    }                           //+ve h
    end = y + h;
 8003dec:	88ba      	ldrh	r2, [r7, #4]
 8003dee:	883b      	ldrh	r3, [r7, #0]
 8003df0:	4413      	add	r3, r2
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	81fb      	strh	r3, [r7, #14]
    if (y < 0)
 8003df6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	da01      	bge.n	8003e02 <fillRect+0xb2>
        y = 0;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	80bb      	strh	r3, [r7, #4]
    if (end > height())
 8003e02:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8003e06:	f7fd f933 	bl	8001070 <height>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	429c      	cmp	r4, r3
 8003e0e:	dd03      	ble.n	8003e18 <fillRect+0xc8>
        end = height();
 8003e10:	f7fd f92e 	bl	8001070 <height>
 8003e14:	4603      	mov	r3, r0
 8003e16:	81fb      	strh	r3, [r7, #14]
    h = end - y;
 8003e18:	89fa      	ldrh	r2, [r7, #14]
 8003e1a:	88bb      	ldrh	r3, [r7, #4]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	803b      	strh	r3, [r7, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8003e22:	88fa      	ldrh	r2, [r7, #6]
 8003e24:	887b      	ldrh	r3, [r7, #2]
 8003e26:	4413      	add	r3, r2
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	b21c      	sxth	r4, r3
 8003e30:	88ba      	ldrh	r2, [r7, #4]
 8003e32:	883b      	ldrh	r3, [r7, #0]
 8003e34:	4413      	add	r3, r2
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	b21b      	sxth	r3, r3
 8003e3e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003e42:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003e46:	4622      	mov	r2, r4
 8003e48:	f7ff fc62 	bl	8003710 <setAddrWindow>
    CS_ACTIVE;
 8003e4c:	2108      	movs	r1, #8
 8003e4e:	4837      	ldr	r0, [pc, #220]	; (8003f2c <fillRect+0x1dc>)
 8003e50:	f7fd f8b4 	bl	8000fbc <PIN_LOW>
    WriteCmd(_MW);
 8003e54:	2104      	movs	r1, #4
 8003e56:	4835      	ldr	r0, [pc, #212]	; (8003f2c <fillRect+0x1dc>)
 8003e58:	f7fd f8b0 	bl	8000fbc <PIN_LOW>
 8003e5c:	4b34      	ldr	r3, [pc, #208]	; (8003f30 <fillRect+0x1e0>)
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	0a1b      	lsrs	r3, r3, #8
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	737b      	strb	r3, [r7, #13]
 8003e66:	4b32      	ldr	r3, [pc, #200]	; (8003f30 <fillRect+0x1e0>)
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	733b      	strb	r3, [r7, #12]
 8003e6c:	4b2f      	ldr	r3, [pc, #188]	; (8003f2c <fillRect+0x1dc>)
 8003e6e:	4a31      	ldr	r2, [pc, #196]	; (8003f34 <fillRect+0x1e4>)
 8003e70:	619a      	str	r2, [r3, #24]
 8003e72:	4b31      	ldr	r3, [pc, #196]	; (8003f38 <fillRect+0x1e8>)
 8003e74:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8003e78:	619a      	str	r2, [r3, #24]
 8003e7a:	7b7b      	ldrb	r3, [r7, #13]
 8003e7c:	035b      	lsls	r3, r3, #13
 8003e7e:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8003e82:	7b7b      	ldrb	r3, [r7, #13]
 8003e84:	109b      	asrs	r3, r3, #2
 8003e86:	f003 0320 	and.w	r3, r3, #32
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	4b27      	ldr	r3, [pc, #156]	; (8003f2c <fillRect+0x1dc>)
 8003e8e:	619a      	str	r2, [r3, #24]
 8003e90:	7b7b      	ldrb	r3, [r7, #13]
 8003e92:	4a29      	ldr	r2, [pc, #164]	; (8003f38 <fillRect+0x1e8>)
 8003e94:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8003e98:	6193      	str	r3, [r2, #24]
 8003e9a:	2102      	movs	r1, #2
 8003e9c:	4823      	ldr	r0, [pc, #140]	; (8003f2c <fillRect+0x1dc>)
 8003e9e:	f7fd f88d 	bl	8000fbc <PIN_LOW>
 8003ea2:	2102      	movs	r1, #2
 8003ea4:	4821      	ldr	r0, [pc, #132]	; (8003f2c <fillRect+0x1dc>)
 8003ea6:	f7fd f899 	bl	8000fdc <PIN_HIGH>
 8003eaa:	2102      	movs	r1, #2
 8003eac:	481f      	ldr	r0, [pc, #124]	; (8003f2c <fillRect+0x1dc>)
 8003eae:	f7fd f895 	bl	8000fdc <PIN_HIGH>
 8003eb2:	4b1e      	ldr	r3, [pc, #120]	; (8003f2c <fillRect+0x1dc>)
 8003eb4:	4a1f      	ldr	r2, [pc, #124]	; (8003f34 <fillRect+0x1e4>)
 8003eb6:	619a      	str	r2, [r3, #24]
 8003eb8:	4b1f      	ldr	r3, [pc, #124]	; (8003f38 <fillRect+0x1e8>)
 8003eba:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8003ebe:	619a      	str	r2, [r3, #24]
 8003ec0:	7b3b      	ldrb	r3, [r7, #12]
 8003ec2:	035b      	lsls	r3, r3, #13
 8003ec4:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8003ec8:	7b3b      	ldrb	r3, [r7, #12]
 8003eca:	109b      	asrs	r3, r3, #2
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	4b16      	ldr	r3, [pc, #88]	; (8003f2c <fillRect+0x1dc>)
 8003ed4:	619a      	str	r2, [r3, #24]
 8003ed6:	7b3b      	ldrb	r3, [r7, #12]
 8003ed8:	4a17      	ldr	r2, [pc, #92]	; (8003f38 <fillRect+0x1e8>)
 8003eda:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8003ede:	6193      	str	r3, [r2, #24]
 8003ee0:	2102      	movs	r1, #2
 8003ee2:	4812      	ldr	r0, [pc, #72]	; (8003f2c <fillRect+0x1dc>)
 8003ee4:	f7fd f86a 	bl	8000fbc <PIN_LOW>
 8003ee8:	2102      	movs	r1, #2
 8003eea:	4810      	ldr	r0, [pc, #64]	; (8003f2c <fillRect+0x1dc>)
 8003eec:	f7fd f876 	bl	8000fdc <PIN_HIGH>
 8003ef0:	2102      	movs	r1, #2
 8003ef2:	480e      	ldr	r0, [pc, #56]	; (8003f2c <fillRect+0x1dc>)
 8003ef4:	f7fd f872 	bl	8000fdc <PIN_HIGH>
 8003ef8:	2104      	movs	r1, #4
 8003efa:	480c      	ldr	r0, [pc, #48]	; (8003f2c <fillRect+0x1dc>)
 8003efc:	f7fd f86e 	bl	8000fdc <PIN_HIGH>
    if (h > w) {
 8003f00:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003f04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	dd05      	ble.n	8003f18 <fillRect+0x1c8>
        end = h;
 8003f0c:	883b      	ldrh	r3, [r7, #0]
 8003f0e:	81fb      	strh	r3, [r7, #14]
        h = w;
 8003f10:	887b      	ldrh	r3, [r7, #2]
 8003f12:	803b      	strh	r3, [r7, #0]
        w = end;
 8003f14:	89fb      	ldrh	r3, [r7, #14]
 8003f16:	807b      	strh	r3, [r7, #2]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 8003f18:	8c3b      	ldrh	r3, [r7, #32]
 8003f1a:	0a1b      	lsrs	r3, r3, #8
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	72fb      	strb	r3, [r7, #11]
 8003f20:	8c3b      	ldrh	r3, [r7, #32]
 8003f22:	72bb      	strb	r3, [r7, #10]
    while (h-- > 0) {
 8003f24:	e05a      	b.n	8003fdc <fillRect+0x28c>
 8003f26:	bf00      	nop
 8003f28:	200000da 	.word	0x200000da
 8003f2c:	40020000 	.word	0x40020000
 8003f30:	200000ee 	.word	0x200000ee
 8003f34:	80200000 	.word	0x80200000
 8003f38:	40020400 	.word	0x40020400
        end = w;
 8003f3c:	887b      	ldrh	r3, [r7, #2]
 8003f3e:	81fb      	strh	r3, [r7, #14]
//                 write8(b);
//             } while (--end != 0);
//        } else
//#endif
        do {
            write8(hi);
 8003f40:	4b40      	ldr	r3, [pc, #256]	; (8004044 <fillRect+0x2f4>)
 8003f42:	4a41      	ldr	r2, [pc, #260]	; (8004048 <fillRect+0x2f8>)
 8003f44:	619a      	str	r2, [r3, #24]
 8003f46:	4b41      	ldr	r3, [pc, #260]	; (800404c <fillRect+0x2fc>)
 8003f48:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8003f4c:	619a      	str	r2, [r3, #24]
 8003f4e:	7afb      	ldrb	r3, [r7, #11]
 8003f50:	035b      	lsls	r3, r3, #13
 8003f52:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8003f56:	7afb      	ldrb	r3, [r7, #11]
 8003f58:	109b      	asrs	r3, r3, #2
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	4b38      	ldr	r3, [pc, #224]	; (8004044 <fillRect+0x2f4>)
 8003f62:	619a      	str	r2, [r3, #24]
 8003f64:	7afb      	ldrb	r3, [r7, #11]
 8003f66:	4a39      	ldr	r2, [pc, #228]	; (800404c <fillRect+0x2fc>)
 8003f68:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8003f6c:	6193      	str	r3, [r2, #24]
 8003f6e:	2102      	movs	r1, #2
 8003f70:	4834      	ldr	r0, [pc, #208]	; (8004044 <fillRect+0x2f4>)
 8003f72:	f7fd f823 	bl	8000fbc <PIN_LOW>
 8003f76:	2102      	movs	r1, #2
 8003f78:	4832      	ldr	r0, [pc, #200]	; (8004044 <fillRect+0x2f4>)
 8003f7a:	f7fd f82f 	bl	8000fdc <PIN_HIGH>
 8003f7e:	2102      	movs	r1, #2
 8003f80:	4830      	ldr	r0, [pc, #192]	; (8004044 <fillRect+0x2f4>)
 8003f82:	f7fd f82b 	bl	8000fdc <PIN_HIGH>
            write8(lo);
 8003f86:	4b2f      	ldr	r3, [pc, #188]	; (8004044 <fillRect+0x2f4>)
 8003f88:	4a2f      	ldr	r2, [pc, #188]	; (8004048 <fillRect+0x2f8>)
 8003f8a:	619a      	str	r2, [r3, #24]
 8003f8c:	4b2f      	ldr	r3, [pc, #188]	; (800404c <fillRect+0x2fc>)
 8003f8e:	f44f 02f6 	mov.w	r2, #8060928	; 0x7b0000
 8003f92:	619a      	str	r2, [r3, #24]
 8003f94:	7abb      	ldrb	r3, [r7, #10]
 8003f96:	035b      	lsls	r3, r3, #13
 8003f98:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8003f9c:	7abb      	ldrb	r3, [r7, #10]
 8003f9e:	109b      	asrs	r3, r3, #2
 8003fa0:	f003 0320 	and.w	r3, r3, #32
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	4b27      	ldr	r3, [pc, #156]	; (8004044 <fillRect+0x2f4>)
 8003fa8:	619a      	str	r2, [r3, #24]
 8003faa:	7abb      	ldrb	r3, [r7, #10]
 8003fac:	4a27      	ldr	r2, [pc, #156]	; (800404c <fillRect+0x2fc>)
 8003fae:	f003 037b 	and.w	r3, r3, #123	; 0x7b
 8003fb2:	6193      	str	r3, [r2, #24]
 8003fb4:	2102      	movs	r1, #2
 8003fb6:	4823      	ldr	r0, [pc, #140]	; (8004044 <fillRect+0x2f4>)
 8003fb8:	f7fd f800 	bl	8000fbc <PIN_LOW>
 8003fbc:	2102      	movs	r1, #2
 8003fbe:	4821      	ldr	r0, [pc, #132]	; (8004044 <fillRect+0x2f4>)
 8003fc0:	f7fd f80c 	bl	8000fdc <PIN_HIGH>
 8003fc4:	2102      	movs	r1, #2
 8003fc6:	481f      	ldr	r0, [pc, #124]	; (8004044 <fillRect+0x2f4>)
 8003fc8:	f7fd f808 	bl	8000fdc <PIN_HIGH>
        } while (--end != 0);
 8003fcc:	89fb      	ldrh	r3, [r7, #14]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	81fb      	strh	r3, [r7, #14]
 8003fd4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1b1      	bne.n	8003f40 <fillRect+0x1f0>
    while (h-- > 0) {
 8003fdc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	3a01      	subs	r2, #1
 8003fe4:	b292      	uxth	r2, r2
 8003fe6:	803a      	strh	r2, [r7, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	dca7      	bgt.n	8003f3c <fillRect+0x1ec>
#endif
    }
    CS_IDLE;
 8003fec:	2108      	movs	r1, #8
 8003fee:	4815      	ldr	r0, [pc, #84]	; (8004044 <fillRect+0x2f4>)
 8003ff0:	f7fc fff4 	bl	8000fdc <PIN_HIGH>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 8003ff4:	4b16      	ldr	r3, [pc, #88]	; (8004050 <fillRect+0x300>)
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00b      	beq.n	8004018 <fillRect+0x2c8>
 8004000:	4b14      	ldr	r3, [pc, #80]	; (8004054 <fillRect+0x304>)
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	f241 5226 	movw	r2, #5414	; 0x1526
 8004008:	4293      	cmp	r3, r2
 800400a:	d116      	bne.n	800403a <fillRect+0x2ea>
 800400c:	4b12      	ldr	r3, [pc, #72]	; (8004058 <fillRect+0x308>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	d010      	beq.n	800403a <fillRect+0x2ea>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 8004018:	f7fd f81e 	bl	8001058 <width>
 800401c:	4603      	mov	r3, r0
 800401e:	3b01      	subs	r3, #1
 8004020:	b29b      	uxth	r3, r3
 8004022:	b21c      	sxth	r4, r3
 8004024:	f7fd f824 	bl	8001070 <height>
 8004028:	4603      	mov	r3, r0
 800402a:	3b01      	subs	r3, #1
 800402c:	b29b      	uxth	r3, r3
 800402e:	b21b      	sxth	r3, r3
 8004030:	4622      	mov	r2, r4
 8004032:	2100      	movs	r1, #0
 8004034:	2000      	movs	r0, #0
 8004036:	f7ff fb6b 	bl	8003710 <setAddrWindow>
}
 800403a:	bf00      	nop
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	bd90      	pop	{r4, r7, pc}
 8004042:	bf00      	nop
 8004044:	40020000 	.word	0x40020000
 8004048:	80200000 	.word	0x80200000
 800404c:	40020400 	.word	0x40020400
 8004050:	200000e2 	.word	0x200000e2
 8004054:	200000e4 	.word	0x200000e4
 8004058:	200000de 	.word	0x200000de

0800405c <drawChar>:
    }

}

void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 800405c:	b590      	push	{r4, r7, lr}
 800405e:	b08b      	sub	sp, #44	; 0x2c
 8004060:	af02      	add	r7, sp, #8
 8004062:	4604      	mov	r4, r0
 8004064:	4608      	mov	r0, r1
 8004066:	4611      	mov	r1, r2
 8004068:	461a      	mov	r2, r3
 800406a:	4623      	mov	r3, r4
 800406c:	80fb      	strh	r3, [r7, #6]
 800406e:	4603      	mov	r3, r0
 8004070:	80bb      	strh	r3, [r7, #4]
 8004072:	460b      	mov	r3, r1
 8004074:	70fb      	strb	r3, [r7, #3]
 8004076:	4613      	mov	r3, r2
 8004078:	803b      	strh	r3, [r7, #0]

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 800407a:	4b59      	ldr	r3, [pc, #356]	; (80041e0 <drawChar+0x184>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3308      	adds	r3, #8
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	78fa      	ldrb	r2, [r7, #3]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	70fb      	strb	r3, [r7, #3]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
 8004088:	78fa      	ldrb	r2, [r7, #3]
 800408a:	4613      	mov	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	461a      	mov	r2, r3
 8004094:	4b52      	ldr	r3, [pc, #328]	; (80041e0 <drawChar+0x184>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3304      	adds	r3, #4
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	4413      	add	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
 80040a0:	4b4f      	ldr	r3, [pc, #316]	; (80041e0 <drawChar+0x184>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	60fb      	str	r3, [r7, #12]

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	881b      	ldrh	r3, [r3, #0]
 80040ac:	83fb      	strh	r3, [r7, #30]
        uint8_t  w  = pgm_read_byte(&glyph->width),
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	3302      	adds	r3, #2
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	72fb      	strb	r3, [r7, #11]
                 h  = pgm_read_byte(&glyph->height);
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	3304      	adds	r3, #4
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	72bb      	strb	r3, [r7, #10]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	3307      	adds	r3, #7
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	727b      	strb	r3, [r7, #9]
                 yo = pgm_read_byte(&glyph->yOffset);
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	3308      	adds	r3, #8
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	723b      	strb	r3, [r7, #8]
        uint8_t  xx, yy, bits = 0, bit = 0;
 80040ce:	2300      	movs	r3, #0
 80040d0:	76fb      	strb	r3, [r7, #27]
 80040d2:	2300      	movs	r3, #0
 80040d4:	76bb      	strb	r3, [r7, #26]
        int16_t  xo16 = 0, yo16 = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	833b      	strh	r3, [r7, #24]
 80040da:	2300      	movs	r3, #0
 80040dc:	82fb      	strh	r3, [r7, #22]

        if(size > 1) {
 80040de:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d905      	bls.n	80040f2 <drawChar+0x96>
            xo16 = xo;
 80040e6:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80040ea:	833b      	strh	r3, [r7, #24]
            yo16 = yo;
 80040ec:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80040f0:	82fb      	strh	r3, [r7, #22]
        }

        for(yy=0; yy<h; yy++) {
 80040f2:	2300      	movs	r3, #0
 80040f4:	773b      	strb	r3, [r7, #28]
 80040f6:	e06a      	b.n	80041ce <drawChar+0x172>
            for(xx=0; xx<w; xx++) {
 80040f8:	2300      	movs	r3, #0
 80040fa:	777b      	strb	r3, [r7, #29]
 80040fc:	e060      	b.n	80041c0 <drawChar+0x164>
                if(!(bit++ & 7)) {
 80040fe:	7ebb      	ldrb	r3, [r7, #26]
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	76ba      	strb	r2, [r7, #26]
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	2b00      	cmp	r3, #0
 800410a:	d107      	bne.n	800411c <drawChar+0xc0>
                    bits = pgm_read_byte(&bitmap[bo++]);
 800410c:	8bfb      	ldrh	r3, [r7, #30]
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	83fa      	strh	r2, [r7, #30]
 8004112:	461a      	mov	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4413      	add	r3, r2
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	76fb      	strb	r3, [r7, #27]
                }
                if(bits & 0x80) {
 800411c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004120:	2b00      	cmp	r3, #0
 8004122:	da47      	bge.n	80041b4 <drawChar+0x158>
                    if(size == 1) {
 8004124:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004128:	2b01      	cmp	r3, #1
 800412a:	d11a      	bne.n	8004162 <drawChar+0x106>
                        writePixel(x+xo+xx, y+yo+yy, color);
 800412c:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8004130:	b29a      	uxth	r2, r3
 8004132:	88fb      	ldrh	r3, [r7, #6]
 8004134:	4413      	add	r3, r2
 8004136:	b29a      	uxth	r2, r3
 8004138:	7f7b      	ldrb	r3, [r7, #29]
 800413a:	b29b      	uxth	r3, r3
 800413c:	4413      	add	r3, r2
 800413e:	b29b      	uxth	r3, r3
 8004140:	b218      	sxth	r0, r3
 8004142:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8004146:	b29a      	uxth	r2, r3
 8004148:	88bb      	ldrh	r3, [r7, #4]
 800414a:	4413      	add	r3, r2
 800414c:	b29a      	uxth	r2, r3
 800414e:	7f3b      	ldrb	r3, [r7, #28]
 8004150:	b29b      	uxth	r3, r3
 8004152:	4413      	add	r3, r2
 8004154:	b29b      	uxth	r3, r3
 8004156:	b21b      	sxth	r3, r3
 8004158:	883a      	ldrh	r2, [r7, #0]
 800415a:	4619      	mov	r1, r3
 800415c:	f7ff fde2 	bl	8003d24 <writePixel>
 8004160:	e028      	b.n	80041b4 <drawChar+0x158>
                    } else {
                        fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
 8004162:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004166:	7f7b      	ldrb	r3, [r7, #29]
 8004168:	4413      	add	r3, r2
 800416a:	b29a      	uxth	r2, r3
 800416c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004170:	b29b      	uxth	r3, r3
 8004172:	fb12 f303 	smulbb	r3, r2, r3
 8004176:	b29a      	uxth	r2, r3
 8004178:	88fb      	ldrh	r3, [r7, #6]
 800417a:	4413      	add	r3, r2
 800417c:	b29b      	uxth	r3, r3
 800417e:	b218      	sxth	r0, r3
 8004180:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004184:	7f3b      	ldrb	r3, [r7, #28]
 8004186:	4413      	add	r3, r2
 8004188:	b29a      	uxth	r2, r3
 800418a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800418e:	b29b      	uxth	r3, r3
 8004190:	fb12 f303 	smulbb	r3, r2, r3
 8004194:	b29a      	uxth	r2, r3
 8004196:	88bb      	ldrh	r3, [r7, #4]
 8004198:	4413      	add	r3, r2
 800419a:	b29b      	uxth	r3, r3
 800419c:	b219      	sxth	r1, r3
 800419e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80041a2:	b21a      	sxth	r2, r3
 80041a4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80041a8:	b21c      	sxth	r4, r3
 80041aa:	883b      	ldrh	r3, [r7, #0]
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	4623      	mov	r3, r4
 80041b0:	f7ff fdce 	bl	8003d50 <fillRect>
                          size, size, color);
                    }
                }
                bits <<= 1;
 80041b4:	7efb      	ldrb	r3, [r7, #27]
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	76fb      	strb	r3, [r7, #27]
            for(xx=0; xx<w; xx++) {
 80041ba:	7f7b      	ldrb	r3, [r7, #29]
 80041bc:	3301      	adds	r3, #1
 80041be:	777b      	strb	r3, [r7, #29]
 80041c0:	7f7a      	ldrb	r2, [r7, #29]
 80041c2:	7afb      	ldrb	r3, [r7, #11]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d39a      	bcc.n	80040fe <drawChar+0xa2>
        for(yy=0; yy<h; yy++) {
 80041c8:	7f3b      	ldrb	r3, [r7, #28]
 80041ca:	3301      	adds	r3, #1
 80041cc:	773b      	strb	r3, [r7, #28]
 80041ce:	7f3a      	ldrb	r2, [r7, #28]
 80041d0:	7abb      	ldrb	r3, [r7, #10]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d390      	bcc.n	80040f8 <drawChar+0x9c>
            }
        }

    } // End classic vs custom font
}
 80041d6:	bf00      	nop
 80041d8:	bf00      	nop
 80041da:	3724      	adds	r7, #36	; 0x24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd90      	pop	{r4, r7, pc}
 80041e0:	20000034 	.word	0x20000034

080041e4 <write>:
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t write(uint8_t c)
{
 80041e4:	b5b0      	push	{r4, r5, r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af02      	add	r7, sp, #8
 80041ea:	4603      	mov	r3, r0
 80041ec:	71fb      	strb	r3, [r7, #7]
	{

        if(c == '\n') {
 80041ee:	79fb      	ldrb	r3, [r7, #7]
 80041f0:	2b0a      	cmp	r3, #10
 80041f2:	d112      	bne.n	800421a <write+0x36>
            cursor_x  = 0;
 80041f4:	4b4a      	ldr	r3, [pc, #296]	; (8004320 <write+0x13c>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	701a      	strb	r2, [r3, #0]
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80041fa:	4b4a      	ldr	r3, [pc, #296]	; (8004324 <write+0x140>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	330a      	adds	r3, #10
 8004200:	781a      	ldrb	r2, [r3, #0]
            cursor_y += (int16_t)textsize *
 8004202:	4b49      	ldr	r3, [pc, #292]	; (8004328 <write+0x144>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	fb12 f303 	smulbb	r3, r2, r3
 800420a:	b2da      	uxtb	r2, r3
 800420c:	4b47      	ldr	r3, [pc, #284]	; (800432c <write+0x148>)
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	4413      	add	r3, r2
 8004212:	b2da      	uxtb	r2, r3
 8004214:	4b45      	ldr	r3, [pc, #276]	; (800432c <write+0x148>)
 8004216:	701a      	strb	r2, [r3, #0]
 8004218:	e07c      	b.n	8004314 <write+0x130>
        } else if(c != '\r') {
 800421a:	79fb      	ldrb	r3, [r7, #7]
 800421c:	2b0d      	cmp	r3, #13
 800421e:	d079      	beq.n	8004314 <write+0x130>
            uint8_t first = pgm_read_byte(&gfxFont->first);
 8004220:	4b40      	ldr	r3, [pc, #256]	; (8004324 <write+0x140>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3308      	adds	r3, #8
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	75fb      	strb	r3, [r7, #23]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 800422a:	79fa      	ldrb	r2, [r7, #7]
 800422c:	7dfb      	ldrb	r3, [r7, #23]
 800422e:	429a      	cmp	r2, r3
 8004230:	d370      	bcc.n	8004314 <write+0x130>
 8004232:	4b3c      	ldr	r3, [pc, #240]	; (8004324 <write+0x140>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3309      	adds	r3, #9
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	79fa      	ldrb	r2, [r7, #7]
 800423c:	429a      	cmp	r2, r3
 800423e:	d869      	bhi.n	8004314 <write+0x130>
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
                  &gfxFont->glyph))[c - first]);
 8004240:	79fa      	ldrb	r2, [r7, #7]
 8004242:	7dfb      	ldrb	r3, [r7, #23]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	461a      	mov	r2, r3
 8004248:	4613      	mov	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	461a      	mov	r2, r3
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 8004252:	4b34      	ldr	r3, [pc, #208]	; (8004324 <write+0x140>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3304      	adds	r3, #4
 8004258:	881b      	ldrh	r3, [r3, #0]
                  &gfxFont->glyph))[c - first]);
 800425a:	4413      	add	r3, r2
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 800425c:	613b      	str	r3, [r7, #16]
                uint8_t   w     = pgm_read_byte(&glyph->width),
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	3302      	adds	r3, #2
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	73fb      	strb	r3, [r7, #15]
                          h     = pgm_read_byte(&glyph->height);
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	3304      	adds	r3, #4
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	73bb      	strb	r3, [r7, #14]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d041      	beq.n	80042f8 <write+0x114>
 8004274:	7bbb      	ldrb	r3, [r7, #14]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d03e      	beq.n	80042f8 <write+0x114>
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	3307      	adds	r3, #7
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	b25b      	sxtb	r3, r3
 8004282:	81bb      	strh	r3, [r7, #12]
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
 8004284:	4b2a      	ldr	r3, [pc, #168]	; (8004330 <write+0x14c>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d022      	beq.n	80042d2 <write+0xee>
 800428c:	4b24      	ldr	r3, [pc, #144]	; (8004320 <write+0x13c>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	4619      	mov	r1, r3
 8004292:	4b25      	ldr	r3, [pc, #148]	; (8004328 <write+0x144>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	4413      	add	r3, r2
 80042a0:	fb00 f303 	mul.w	r3, r0, r3
 80042a4:	440b      	add	r3, r1
 80042a6:	4a23      	ldr	r2, [pc, #140]	; (8004334 <write+0x150>)
 80042a8:	8812      	ldrh	r2, [r2, #0]
 80042aa:	4293      	cmp	r3, r2
 80042ac:	dd11      	ble.n	80042d2 <write+0xee>
                        cursor_x  = 0;
 80042ae:	4b1c      	ldr	r3, [pc, #112]	; (8004320 <write+0x13c>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	701a      	strb	r2, [r3, #0]
                        cursor_y += (int16_t)textsize *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80042b4:	4b1b      	ldr	r3, [pc, #108]	; (8004324 <write+0x140>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	330a      	adds	r3, #10
 80042ba:	781a      	ldrb	r2, [r3, #0]
                        cursor_y += (int16_t)textsize *
 80042bc:	4b1a      	ldr	r3, [pc, #104]	; (8004328 <write+0x144>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	fb12 f303 	smulbb	r3, r2, r3
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	4b19      	ldr	r3, [pc, #100]	; (800432c <write+0x148>)
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	4413      	add	r3, r2
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	4b17      	ldr	r3, [pc, #92]	; (800432c <write+0x148>)
 80042d0:	701a      	strb	r2, [r3, #0]
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 80042d2:	4b13      	ldr	r3, [pc, #76]	; (8004320 <write+0x13c>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	b218      	sxth	r0, r3
 80042d8:	4b14      	ldr	r3, [pc, #80]	; (800432c <write+0x148>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	b219      	sxth	r1, r3
 80042de:	4b16      	ldr	r3, [pc, #88]	; (8004338 <write+0x154>)
 80042e0:	881d      	ldrh	r5, [r3, #0]
 80042e2:	4b16      	ldr	r3, [pc, #88]	; (800433c <write+0x158>)
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	4a10      	ldr	r2, [pc, #64]	; (8004328 <write+0x144>)
 80042e8:	7812      	ldrb	r2, [r2, #0]
 80042ea:	79fc      	ldrb	r4, [r7, #7]
 80042ec:	9201      	str	r2, [sp, #4]
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	462b      	mov	r3, r5
 80042f2:	4622      	mov	r2, r4
 80042f4:	f7ff feb2 	bl	800405c <drawChar>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	3306      	adds	r3, #6
 80042fc:	781a      	ldrb	r2, [r3, #0]
 80042fe:	4b0a      	ldr	r3, [pc, #40]	; (8004328 <write+0x144>)
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	fb12 f303 	smulbb	r3, r2, r3
 8004306:	b2da      	uxtb	r2, r3
 8004308:	4b05      	ldr	r3, [pc, #20]	; (8004320 <write+0x13c>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	4413      	add	r3, r2
 800430e:	b2da      	uxtb	r2, r3
 8004310:	4b03      	ldr	r3, [pc, #12]	; (8004320 <write+0x13c>)
 8004312:	701a      	strb	r2, [r3, #0]
            }
        }

    }
    return 1;
 8004314:	2301      	movs	r3, #1
}
 8004316:	4618      	mov	r0, r3
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bdb0      	pop	{r4, r5, r7, pc}
 800431e:	bf00      	nop
 8004320:	200000dd 	.word	0x200000dd
 8004324:	20000034 	.word	0x20000034
 8004328:	20000008 	.word	0x20000008
 800432c:	200000dc 	.word	0x200000dc
 8004330:	2000000e 	.word	0x2000000e
 8004334:	20000004 	.word	0x20000004
 8004338:	2000000a 	.word	0x2000000a
 800433c:	2000000c 	.word	0x2000000c

08004340 <setFont>:
/*!
    @brief Set the font to display when print()ing, either custom or default
    @param  f  The GFXfont object, if NULL use built in 6x8 font
*/
/**************************************************************************/
void setFont(const GFXfont *f) {
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
    if(f) {            // Font struct pointer passed in?
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00a      	beq.n	8004364 <setFont+0x24>
        if(!gfxFont) { // And no current font struct?
 800434e:	4b0f      	ldr	r3, [pc, #60]	; (800438c <setFont+0x4c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d110      	bne.n	8004378 <setFont+0x38>
            // Switching from classic to new font behavior.
            // Move cursor pos down 6 pixels so it's on baseline.
            cursor_y += 6;
 8004356:	4b0e      	ldr	r3, [pc, #56]	; (8004390 <setFont+0x50>)
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	3306      	adds	r3, #6
 800435c:	b2da      	uxtb	r2, r3
 800435e:	4b0c      	ldr	r3, [pc, #48]	; (8004390 <setFont+0x50>)
 8004360:	701a      	strb	r2, [r3, #0]
 8004362:	e009      	b.n	8004378 <setFont+0x38>
        }
    } else if(gfxFont) { // NULL passed.  Current font struct defined?
 8004364:	4b09      	ldr	r3, [pc, #36]	; (800438c <setFont+0x4c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <setFont+0x38>
        // Switching from new to classic font behavior.
        // Move cursor pos up 6 pixels so it's at top-left of char.
        cursor_y -= 6;
 800436c:	4b08      	ldr	r3, [pc, #32]	; (8004390 <setFont+0x50>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	3b06      	subs	r3, #6
 8004372:	b2da      	uxtb	r2, r3
 8004374:	4b06      	ldr	r3, [pc, #24]	; (8004390 <setFont+0x50>)
 8004376:	701a      	strb	r2, [r3, #0]
    }
    gfxFont = (GFXfont *)f;
 8004378:	4a04      	ldr	r2, [pc, #16]	; (800438c <setFont+0x4c>)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6013      	str	r3, [r2, #0]
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	20000034 	.word	0x20000034
 8004390:	200000dc 	.word	0x200000dc

08004394 <printnewtstr>:

    setCursor(x1, y1);
    printstr(str);
}
void printnewtstr (int row, int col, uint16_t txtcolor, const GFXfont *f, uint8_t txtsize, uint8_t *str)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	603b      	str	r3, [r7, #0]
 80043a0:	4613      	mov	r3, r2
 80043a2:	80fb      	strh	r3, [r7, #6]
	setFont(f);
 80043a4:	6838      	ldr	r0, [r7, #0]
 80043a6:	f7ff ffcb 	bl	8004340 <setFont>
	textcolor = txtcolor;
 80043aa:	4a13      	ldr	r2, [pc, #76]	; (80043f8 <printnewtstr+0x64>)
 80043ac:	88fb      	ldrh	r3, [r7, #6]
 80043ae:	8013      	strh	r3, [r2, #0]
	textsize = (txtsize > 0) ? txtsize : 1;
 80043b0:	7e3b      	ldrb	r3, [r7, #24]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <printnewtstr+0x26>
 80043b6:	7e3b      	ldrb	r3, [r7, #24]
 80043b8:	e000      	b.n	80043bc <printnewtstr+0x28>
 80043ba:	2301      	movs	r3, #1
 80043bc:	4a0f      	ldr	r2, [pc, #60]	; (80043fc <printnewtstr+0x68>)
 80043be:	7013      	strb	r3, [r2, #0]
	setCursor(row, col);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	b21b      	sxth	r3, r3
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	b212      	sxth	r2, r2
 80043c8:	4611      	mov	r1, r2
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 f828 	bl	8004420 <setCursor>
	setTextWrap(1);
 80043d0:	2001      	movs	r0, #1
 80043d2:	f000 f815 	bl	8004400 <setTextWrap>
	while (*str) write (*str++);
 80043d6:	e006      	b.n	80043e6 <printnewtstr+0x52>
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	61fa      	str	r2, [r7, #28]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff feff 	bl	80041e4 <write>
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1f4      	bne.n	80043d8 <printnewtstr+0x44>
}
 80043ee:	bf00      	nop
 80043f0:	bf00      	nop
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	2000000a 	.word	0x2000000a
 80043fc:	20000008 	.word	0x20000008

08004400 <setTextWrap>:
void printstr (uint8_t *str)
{
	while (*str) write (*str++);
}

void setTextWrap(uint8_t w) { wrap = w; }
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	4603      	mov	r3, r0
 8004408:	71fb      	strb	r3, [r7, #7]
 800440a:	4a04      	ldr	r2, [pc, #16]	; (800441c <setTextWrap+0x1c>)
 800440c:	79fb      	ldrb	r3, [r7, #7]
 800440e:	7013      	strb	r3, [r2, #0]
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	2000000e 	.word	0x2000000e

08004420 <setCursor>:
void setTextSize (uint8_t size)
{
	textsize = size;
}

void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	4603      	mov	r3, r0
 8004428:	460a      	mov	r2, r1
 800442a:	80fb      	strh	r3, [r7, #6]
 800442c:	4613      	mov	r3, r2
 800442e:	80bb      	strh	r3, [r7, #4]
 8004430:	88fb      	ldrh	r3, [r7, #6]
 8004432:	b2da      	uxtb	r2, r3
 8004434:	4b05      	ldr	r3, [pc, #20]	; (800444c <setCursor+0x2c>)
 8004436:	701a      	strb	r2, [r3, #0]
 8004438:	88bb      	ldrh	r3, [r7, #4]
 800443a:	b2da      	uxtb	r2, r3
 800443c:	4b04      	ldr	r3, [pc, #16]	; (8004450 <setCursor+0x30>)
 800443e:	701a      	strb	r2, [r3, #0]
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	200000dd 	.word	0x200000dd
 8004450:	200000dc 	.word	0x200000dc

08004454 <drawRGBBitmap>:
            }
        }
    }
}

void drawRGBBitmap(int16_t x, int16_t y, uint16_t *bitmap, int16_t w, int16_t h) {
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	60ba      	str	r2, [r7, #8]
 800445c:	461a      	mov	r2, r3
 800445e:	4603      	mov	r3, r0
 8004460:	81fb      	strh	r3, [r7, #14]
 8004462:	460b      	mov	r3, r1
 8004464:	81bb      	strh	r3, [r7, #12]
 8004466:	4613      	mov	r3, r2
 8004468:	80fb      	strh	r3, [r7, #6]
  startWrite();
 800446a:	f7fc fee1 	bl	8001230 <startWrite>
  for (int16_t j = 0; j < h; j++, y++) {
 800446e:	2300      	movs	r3, #0
 8004470:	82fb      	strh	r3, [r7, #22]
 8004472:	e031      	b.n	80044d8 <drawRGBBitmap+0x84>
    for (int16_t i = 0; i < w; i++) {
 8004474:	2300      	movs	r3, #0
 8004476:	82bb      	strh	r3, [r7, #20]
 8004478:	e01c      	b.n	80044b4 <drawRGBBitmap+0x60>
      writePixel(x + i, y, bitmap[j * w + i]);
 800447a:	89fa      	ldrh	r2, [r7, #14]
 800447c:	8abb      	ldrh	r3, [r7, #20]
 800447e:	4413      	add	r3, r2
 8004480:	b29b      	uxth	r3, r3
 8004482:	b218      	sxth	r0, r3
 8004484:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004488:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800448c:	fb03 f202 	mul.w	r2, r3, r2
 8004490:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004494:	4413      	add	r3, r2
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	4413      	add	r3, r2
 800449c:	881a      	ldrh	r2, [r3, #0]
 800449e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80044a2:	4619      	mov	r1, r3
 80044a4:	f7ff fc3e 	bl	8003d24 <writePixel>
    for (int16_t i = 0; i < w; i++) {
 80044a8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3301      	adds	r3, #1
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	82bb      	strh	r3, [r7, #20]
 80044b4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80044b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044bc:	429a      	cmp	r2, r3
 80044be:	dbdc      	blt.n	800447a <drawRGBBitmap+0x26>
  for (int16_t j = 0; j < h; j++, y++) {
 80044c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3301      	adds	r3, #1
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	82fb      	strh	r3, [r7, #22]
 80044cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	3301      	adds	r3, #1
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	81bb      	strh	r3, [r7, #12]
 80044d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80044dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	dbc7      	blt.n	8004474 <drawRGBBitmap+0x20>
    }
  }
  endWrite();
 80044e4:	f7fc feab 	bl	800123e <endWrite>
}
 80044e8:	bf00      	nop
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80044f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004528 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80044f4:	480d      	ldr	r0, [pc, #52]	; (800452c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80044f6:	490e      	ldr	r1, [pc, #56]	; (8004530 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80044f8:	4a0e      	ldr	r2, [pc, #56]	; (8004534 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80044fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044fc:	e002      	b.n	8004504 <LoopCopyDataInit>

080044fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004502:	3304      	adds	r3, #4

08004504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004508:	d3f9      	bcc.n	80044fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800450a:	4a0b      	ldr	r2, [pc, #44]	; (8004538 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800450c:	4c0b      	ldr	r4, [pc, #44]	; (800453c <LoopFillZerobss+0x26>)
  movs r3, #0
 800450e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004510:	e001      	b.n	8004516 <LoopFillZerobss>

08004512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004514:	3204      	adds	r2, #4

08004516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004518:	d3fb      	bcc.n	8004512 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800451a:	f7fc fd25 	bl	8000f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800451e:	f001 fcf7 	bl	8005f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004522:	f7fc f827 	bl	8000574 <main>
  bx  lr    
 8004526:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004528:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800452c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004530:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8004534:	0802ea3c 	.word	0x0802ea3c
  ldr r2, =_sbss
 8004538:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800453c:	200000fc 	.word	0x200000fc

08004540 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004540:	e7fe      	b.n	8004540 <ADC_IRQHandler>
	...

08004544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004548:	4b0e      	ldr	r3, [pc, #56]	; (8004584 <HAL_Init+0x40>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a0d      	ldr	r2, [pc, #52]	; (8004584 <HAL_Init+0x40>)
 800454e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004552:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004554:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <HAL_Init+0x40>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a0a      	ldr	r2, [pc, #40]	; (8004584 <HAL_Init+0x40>)
 800455a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800455e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004560:	4b08      	ldr	r3, [pc, #32]	; (8004584 <HAL_Init+0x40>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a07      	ldr	r2, [pc, #28]	; (8004584 <HAL_Init+0x40>)
 8004566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800456a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800456c:	2003      	movs	r0, #3
 800456e:	f000 fba3 	bl	8004cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004572:	200f      	movs	r0, #15
 8004574:	f000 f808 	bl	8004588 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004578:	f7fc fc1c 	bl	8000db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	40023c00 	.word	0x40023c00

08004588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004590:	4b12      	ldr	r3, [pc, #72]	; (80045dc <HAL_InitTick+0x54>)
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	4b12      	ldr	r3, [pc, #72]	; (80045e0 <HAL_InitTick+0x58>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	4619      	mov	r1, r3
 800459a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800459e:	fbb3 f3f1 	udiv	r3, r3, r1
 80045a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fbad 	bl	8004d06 <HAL_SYSTICK_Config>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e00e      	b.n	80045d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b0f      	cmp	r3, #15
 80045ba:	d80a      	bhi.n	80045d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045bc:	2200      	movs	r2, #0
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	f04f 30ff 	mov.w	r0, #4294967295
 80045c4:	f000 fb83 	bl	8004cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045c8:	4a06      	ldr	r2, [pc, #24]	; (80045e4 <HAL_InitTick+0x5c>)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	e000      	b.n	80045d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	20000000 	.word	0x20000000
 80045e0:	20000014 	.word	0x20000014
 80045e4:	20000010 	.word	0x20000010

080045e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045ec:	4b06      	ldr	r3, [pc, #24]	; (8004608 <HAL_IncTick+0x20>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	461a      	mov	r2, r3
 80045f2:	4b06      	ldr	r3, [pc, #24]	; (800460c <HAL_IncTick+0x24>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4413      	add	r3, r2
 80045f8:	4a04      	ldr	r2, [pc, #16]	; (800460c <HAL_IncTick+0x24>)
 80045fa:	6013      	str	r3, [r2, #0]
}
 80045fc:	bf00      	nop
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	20000014 	.word	0x20000014
 800460c:	200000f8 	.word	0x200000f8

08004610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  return uwTick;
 8004614:	4b03      	ldr	r3, [pc, #12]	; (8004624 <HAL_GetTick+0x14>)
 8004616:	681b      	ldr	r3, [r3, #0]
}
 8004618:	4618      	mov	r0, r3
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	200000f8 	.word	0x200000f8

08004628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004630:	f7ff ffee 	bl	8004610 <HAL_GetTick>
 8004634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004640:	d005      	beq.n	800464e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004642:	4b0a      	ldr	r3, [pc, #40]	; (800466c <HAL_Delay+0x44>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	461a      	mov	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4413      	add	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800464e:	bf00      	nop
 8004650:	f7ff ffde 	bl	8004610 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	429a      	cmp	r2, r3
 800465e:	d8f7      	bhi.n	8004650 <HAL_Delay+0x28>
  {
  }
}
 8004660:	bf00      	nop
 8004662:	bf00      	nop
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	20000014 	.word	0x20000014

08004670 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004678:	2300      	movs	r3, #0
 800467a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e033      	b.n	80046ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	2b00      	cmp	r3, #0
 800468c:	d109      	bne.n	80046a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7fc fbb8 	bl	8000e04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	f003 0310 	and.w	r3, r3, #16
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d118      	bne.n	80046e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80046b6:	f023 0302 	bic.w	r3, r3, #2
 80046ba:	f043 0202 	orr.w	r2, r3, #2
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f94a 	bl	800495c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	f023 0303 	bic.w	r3, r3, #3
 80046d6:	f043 0201 	orr.w	r2, r3, #1
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	641a      	str	r2, [r3, #64]	; 0x40
 80046de:	e001      	b.n	80046e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80046ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004702:	2300      	movs	r3, #0
 8004704:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_ADC_ConfigChannel+0x1c>
 8004710:	2302      	movs	r3, #2
 8004712:	e113      	b.n	800493c <HAL_ADC_ConfigChannel+0x244>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b09      	cmp	r3, #9
 8004722:	d925      	bls.n	8004770 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68d9      	ldr	r1, [r3, #12]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	b29b      	uxth	r3, r3
 8004730:	461a      	mov	r2, r3
 8004732:	4613      	mov	r3, r2
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	4413      	add	r3, r2
 8004738:	3b1e      	subs	r3, #30
 800473a:	2207      	movs	r2, #7
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	43da      	mvns	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	400a      	ands	r2, r1
 8004748:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68d9      	ldr	r1, [r3, #12]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	b29b      	uxth	r3, r3
 800475a:	4618      	mov	r0, r3
 800475c:	4603      	mov	r3, r0
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	4403      	add	r3, r0
 8004762:	3b1e      	subs	r3, #30
 8004764:	409a      	lsls	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	60da      	str	r2, [r3, #12]
 800476e:	e022      	b.n	80047b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6919      	ldr	r1, [r3, #16]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	b29b      	uxth	r3, r3
 800477c:	461a      	mov	r2, r3
 800477e:	4613      	mov	r3, r2
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	4413      	add	r3, r2
 8004784:	2207      	movs	r2, #7
 8004786:	fa02 f303 	lsl.w	r3, r2, r3
 800478a:	43da      	mvns	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	400a      	ands	r2, r1
 8004792:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6919      	ldr	r1, [r3, #16]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	4618      	mov	r0, r3
 80047a6:	4603      	mov	r3, r0
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	4403      	add	r3, r0
 80047ac:	409a      	lsls	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b06      	cmp	r3, #6
 80047bc:	d824      	bhi.n	8004808 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	3b05      	subs	r3, #5
 80047d0:	221f      	movs	r2, #31
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
 80047d6:	43da      	mvns	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	400a      	ands	r2, r1
 80047de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	4618      	mov	r0, r3
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	4613      	mov	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	3b05      	subs	r3, #5
 80047fa:	fa00 f203 	lsl.w	r2, r0, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	635a      	str	r2, [r3, #52]	; 0x34
 8004806:	e04c      	b.n	80048a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b0c      	cmp	r3, #12
 800480e:	d824      	bhi.n	800485a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	4613      	mov	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4413      	add	r3, r2
 8004820:	3b23      	subs	r3, #35	; 0x23
 8004822:	221f      	movs	r2, #31
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	43da      	mvns	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	400a      	ands	r2, r1
 8004830:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	b29b      	uxth	r3, r3
 800483e:	4618      	mov	r0, r3
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	4613      	mov	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	3b23      	subs	r3, #35	; 0x23
 800484c:	fa00 f203 	lsl.w	r2, r0, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	430a      	orrs	r2, r1
 8004856:	631a      	str	r2, [r3, #48]	; 0x30
 8004858:	e023      	b.n	80048a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	4613      	mov	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	3b41      	subs	r3, #65	; 0x41
 800486c:	221f      	movs	r2, #31
 800486e:	fa02 f303 	lsl.w	r3, r2, r3
 8004872:	43da      	mvns	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	400a      	ands	r2, r1
 800487a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	b29b      	uxth	r3, r3
 8004888:	4618      	mov	r0, r3
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	4613      	mov	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	3b41      	subs	r3, #65	; 0x41
 8004896:	fa00 f203 	lsl.w	r2, r0, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048a2:	4b29      	ldr	r3, [pc, #164]	; (8004948 <HAL_ADC_ConfigChannel+0x250>)
 80048a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a28      	ldr	r2, [pc, #160]	; (800494c <HAL_ADC_ConfigChannel+0x254>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d10f      	bne.n	80048d0 <HAL_ADC_ConfigChannel+0x1d8>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b12      	cmp	r3, #18
 80048b6:	d10b      	bne.n	80048d0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a1d      	ldr	r2, [pc, #116]	; (800494c <HAL_ADC_ConfigChannel+0x254>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d12b      	bne.n	8004932 <HAL_ADC_ConfigChannel+0x23a>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a1c      	ldr	r2, [pc, #112]	; (8004950 <HAL_ADC_ConfigChannel+0x258>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d003      	beq.n	80048ec <HAL_ADC_ConfigChannel+0x1f4>
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b11      	cmp	r3, #17
 80048ea:	d122      	bne.n	8004932 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a11      	ldr	r2, [pc, #68]	; (8004950 <HAL_ADC_ConfigChannel+0x258>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d111      	bne.n	8004932 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800490e:	4b11      	ldr	r3, [pc, #68]	; (8004954 <HAL_ADC_ConfigChannel+0x25c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a11      	ldr	r2, [pc, #68]	; (8004958 <HAL_ADC_ConfigChannel+0x260>)
 8004914:	fba2 2303 	umull	r2, r3, r2, r3
 8004918:	0c9a      	lsrs	r2, r3, #18
 800491a:	4613      	mov	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4413      	add	r3, r2
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004924:	e002      	b.n	800492c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	3b01      	subs	r3, #1
 800492a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1f9      	bne.n	8004926 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	40012300 	.word	0x40012300
 800494c:	40012000 	.word	0x40012000
 8004950:	10000012 	.word	0x10000012
 8004954:	20000000 	.word	0x20000000
 8004958:	431bde83 	.word	0x431bde83

0800495c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004964:	4b79      	ldr	r3, [pc, #484]	; (8004b4c <ADC_Init+0x1f0>)
 8004966:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	431a      	orrs	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004990:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6859      	ldr	r1, [r3, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	021a      	lsls	r2, r3, #8
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80049b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6859      	ldr	r1, [r3, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6899      	ldr	r1, [r3, #8]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ee:	4a58      	ldr	r2, [pc, #352]	; (8004b50 <ADC_Init+0x1f4>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d022      	beq.n	8004a3a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689a      	ldr	r2, [r3, #8]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6899      	ldr	r1, [r3, #8]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6899      	ldr	r1, [r3, #8]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	609a      	str	r2, [r3, #8]
 8004a38:	e00f      	b.n	8004a5a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0202 	bic.w	r2, r2, #2
 8004a68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6899      	ldr	r1, [r3, #8]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	7e1b      	ldrb	r3, [r3, #24]
 8004a74:	005a      	lsls	r2, r3, #1
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d01b      	beq.n	8004ac0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004aa6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6859      	ldr	r1, [r3, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	035a      	lsls	r2, r3, #13
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	605a      	str	r2, [r3, #4]
 8004abe:	e007      	b.n	8004ad0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ace:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004ade:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	051a      	lsls	r2, r3, #20
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6899      	ldr	r1, [r3, #8]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b12:	025a      	lsls	r2, r3, #9
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689a      	ldr	r2, [r3, #8]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6899      	ldr	r1, [r3, #8]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	029a      	lsls	r2, r3, #10
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	609a      	str	r2, [r3, #8]
}
 8004b40:	bf00      	nop
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	40012300 	.word	0x40012300
 8004b50:	0f000001 	.word	0x0f000001

08004b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b64:	4b0c      	ldr	r3, [pc, #48]	; (8004b98 <__NVIC_SetPriorityGrouping+0x44>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b70:	4013      	ands	r3, r2
 8004b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b86:	4a04      	ldr	r2, [pc, #16]	; (8004b98 <__NVIC_SetPriorityGrouping+0x44>)
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	60d3      	str	r3, [r2, #12]
}
 8004b8c:	bf00      	nop
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	e000ed00 	.word	0xe000ed00

08004b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ba0:	4b04      	ldr	r3, [pc, #16]	; (8004bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	0a1b      	lsrs	r3, r3, #8
 8004ba6:	f003 0307 	and.w	r3, r3, #7
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	e000ed00 	.word	0xe000ed00

08004bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	6039      	str	r1, [r7, #0]
 8004bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	db0a      	blt.n	8004be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	490c      	ldr	r1, [pc, #48]	; (8004c04 <__NVIC_SetPriority+0x4c>)
 8004bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd6:	0112      	lsls	r2, r2, #4
 8004bd8:	b2d2      	uxtb	r2, r2
 8004bda:	440b      	add	r3, r1
 8004bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004be0:	e00a      	b.n	8004bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	4908      	ldr	r1, [pc, #32]	; (8004c08 <__NVIC_SetPriority+0x50>)
 8004be8:	79fb      	ldrb	r3, [r7, #7]
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	3b04      	subs	r3, #4
 8004bf0:	0112      	lsls	r2, r2, #4
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	761a      	strb	r2, [r3, #24]
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	e000e100 	.word	0xe000e100
 8004c08:	e000ed00 	.word	0xe000ed00

08004c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b089      	sub	sp, #36	; 0x24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	f1c3 0307 	rsb	r3, r3, #7
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	bf28      	it	cs
 8004c2a:	2304      	movcs	r3, #4
 8004c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	3304      	adds	r3, #4
 8004c32:	2b06      	cmp	r3, #6
 8004c34:	d902      	bls.n	8004c3c <NVIC_EncodePriority+0x30>
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	3b03      	subs	r3, #3
 8004c3a:	e000      	b.n	8004c3e <NVIC_EncodePriority+0x32>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c40:	f04f 32ff 	mov.w	r2, #4294967295
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4a:	43da      	mvns	r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	401a      	ands	r2, r3
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c54:	f04f 31ff 	mov.w	r1, #4294967295
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5e:	43d9      	mvns	r1, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c64:	4313      	orrs	r3, r2
         );
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3724      	adds	r7, #36	; 0x24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
	...

08004c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c84:	d301      	bcc.n	8004c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c86:	2301      	movs	r3, #1
 8004c88:	e00f      	b.n	8004caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c8a:	4a0a      	ldr	r2, [pc, #40]	; (8004cb4 <SysTick_Config+0x40>)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c92:	210f      	movs	r1, #15
 8004c94:	f04f 30ff 	mov.w	r0, #4294967295
 8004c98:	f7ff ff8e 	bl	8004bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c9c:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <SysTick_Config+0x40>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ca2:	4b04      	ldr	r3, [pc, #16]	; (8004cb4 <SysTick_Config+0x40>)
 8004ca4:	2207      	movs	r2, #7
 8004ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	e000e010 	.word	0xe000e010

08004cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff ff47 	bl	8004b54 <__NVIC_SetPriorityGrouping>
}
 8004cc6:	bf00      	nop
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b086      	sub	sp, #24
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	60b9      	str	r1, [r7, #8]
 8004cd8:	607a      	str	r2, [r7, #4]
 8004cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ce0:	f7ff ff5c 	bl	8004b9c <__NVIC_GetPriorityGrouping>
 8004ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	68b9      	ldr	r1, [r7, #8]
 8004cea:	6978      	ldr	r0, [r7, #20]
 8004cec:	f7ff ff8e 	bl	8004c0c <NVIC_EncodePriority>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cf6:	4611      	mov	r1, r2
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7ff ff5d 	bl	8004bb8 <__NVIC_SetPriority>
}
 8004cfe:	bf00      	nop
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b082      	sub	sp, #8
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7ff ffb0 	bl	8004c74 <SysTick_Config>
 8004d14:	4603      	mov	r3, r0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b082      	sub	sp, #8
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e00e      	b.n	8004d4e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	795b      	ldrb	r3, [r3, #5]
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d105      	bne.n	8004d46 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7fc f8a3 	bl	8000e8c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
	...

08004d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b089      	sub	sp, #36	; 0x24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d66:	2300      	movs	r3, #0
 8004d68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61fb      	str	r3, [r7, #28]
 8004d72:	e159      	b.n	8005028 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d74:	2201      	movs	r2, #1
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	4013      	ands	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	f040 8148 	bne.w	8005022 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f003 0303 	and.w	r3, r3, #3
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d005      	beq.n	8004daa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d130      	bne.n	8004e0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	2203      	movs	r2, #3
 8004db6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dba:	43db      	mvns	r3, r3
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	fa02 f303 	lsl.w	r3, r2, r3
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004de0:	2201      	movs	r2, #1
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	fa02 f303 	lsl.w	r3, r2, r3
 8004de8:	43db      	mvns	r3, r3
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	4013      	ands	r3, r2
 8004dee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	091b      	lsrs	r3, r3, #4
 8004df6:	f003 0201 	and.w	r2, r3, #1
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f003 0303 	and.w	r3, r3, #3
 8004e14:	2b03      	cmp	r3, #3
 8004e16:	d017      	beq.n	8004e48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	2203      	movs	r2, #3
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	43db      	mvns	r3, r3
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f003 0303 	and.w	r3, r3, #3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d123      	bne.n	8004e9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	08da      	lsrs	r2, r3, #3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3208      	adds	r2, #8
 8004e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	220f      	movs	r2, #15
 8004e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e70:	43db      	mvns	r3, r3
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	4013      	ands	r3, r2
 8004e76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	691a      	ldr	r2, [r3, #16]
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	f003 0307 	and.w	r3, r3, #7
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	08da      	lsrs	r2, r3, #3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	3208      	adds	r2, #8
 8004e96:	69b9      	ldr	r1, [r7, #24]
 8004e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	2203      	movs	r2, #3
 8004ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eac:	43db      	mvns	r3, r3
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f003 0203 	and.w	r2, r3, #3
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 80a2 	beq.w	8005022 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	4b57      	ldr	r3, [pc, #348]	; (8005040 <HAL_GPIO_Init+0x2e8>)
 8004ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee6:	4a56      	ldr	r2, [pc, #344]	; (8005040 <HAL_GPIO_Init+0x2e8>)
 8004ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004eec:	6453      	str	r3, [r2, #68]	; 0x44
 8004eee:	4b54      	ldr	r3, [pc, #336]	; (8005040 <HAL_GPIO_Init+0x2e8>)
 8004ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004efa:	4a52      	ldr	r2, [pc, #328]	; (8005044 <HAL_GPIO_Init+0x2ec>)
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	089b      	lsrs	r3, r3, #2
 8004f00:	3302      	adds	r3, #2
 8004f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	f003 0303 	and.w	r3, r3, #3
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	220f      	movs	r2, #15
 8004f12:	fa02 f303 	lsl.w	r3, r2, r3
 8004f16:	43db      	mvns	r3, r3
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a49      	ldr	r2, [pc, #292]	; (8005048 <HAL_GPIO_Init+0x2f0>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d019      	beq.n	8004f5a <HAL_GPIO_Init+0x202>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a48      	ldr	r2, [pc, #288]	; (800504c <HAL_GPIO_Init+0x2f4>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d013      	beq.n	8004f56 <HAL_GPIO_Init+0x1fe>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a47      	ldr	r2, [pc, #284]	; (8005050 <HAL_GPIO_Init+0x2f8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d00d      	beq.n	8004f52 <HAL_GPIO_Init+0x1fa>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a46      	ldr	r2, [pc, #280]	; (8005054 <HAL_GPIO_Init+0x2fc>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d007      	beq.n	8004f4e <HAL_GPIO_Init+0x1f6>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a45      	ldr	r2, [pc, #276]	; (8005058 <HAL_GPIO_Init+0x300>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d101      	bne.n	8004f4a <HAL_GPIO_Init+0x1f2>
 8004f46:	2304      	movs	r3, #4
 8004f48:	e008      	b.n	8004f5c <HAL_GPIO_Init+0x204>
 8004f4a:	2307      	movs	r3, #7
 8004f4c:	e006      	b.n	8004f5c <HAL_GPIO_Init+0x204>
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e004      	b.n	8004f5c <HAL_GPIO_Init+0x204>
 8004f52:	2302      	movs	r3, #2
 8004f54:	e002      	b.n	8004f5c <HAL_GPIO_Init+0x204>
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <HAL_GPIO_Init+0x204>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	69fa      	ldr	r2, [r7, #28]
 8004f5e:	f002 0203 	and.w	r2, r2, #3
 8004f62:	0092      	lsls	r2, r2, #2
 8004f64:	4093      	lsls	r3, r2
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f6c:	4935      	ldr	r1, [pc, #212]	; (8005044 <HAL_GPIO_Init+0x2ec>)
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	089b      	lsrs	r3, r3, #2
 8004f72:	3302      	adds	r3, #2
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f7a:	4b38      	ldr	r3, [pc, #224]	; (800505c <HAL_GPIO_Init+0x304>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	43db      	mvns	r3, r3
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	4013      	ands	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f9e:	4a2f      	ldr	r2, [pc, #188]	; (800505c <HAL_GPIO_Init+0x304>)
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fa4:	4b2d      	ldr	r3, [pc, #180]	; (800505c <HAL_GPIO_Init+0x304>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	43db      	mvns	r3, r3
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fc8:	4a24      	ldr	r2, [pc, #144]	; (800505c <HAL_GPIO_Init+0x304>)
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004fce:	4b23      	ldr	r3, [pc, #140]	; (800505c <HAL_GPIO_Init+0x304>)
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	43db      	mvns	r3, r3
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	4013      	ands	r3, r2
 8004fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ff2:	4a1a      	ldr	r2, [pc, #104]	; (800505c <HAL_GPIO_Init+0x304>)
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ff8:	4b18      	ldr	r3, [pc, #96]	; (800505c <HAL_GPIO_Init+0x304>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	43db      	mvns	r3, r3
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	4013      	ands	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	4313      	orrs	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800501c:	4a0f      	ldr	r2, [pc, #60]	; (800505c <HAL_GPIO_Init+0x304>)
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	3301      	adds	r3, #1
 8005026:	61fb      	str	r3, [r7, #28]
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	2b0f      	cmp	r3, #15
 800502c:	f67f aea2 	bls.w	8004d74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005030:	bf00      	nop
 8005032:	bf00      	nop
 8005034:	3724      	adds	r7, #36	; 0x24
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	40023800 	.word	0x40023800
 8005044:	40013800 	.word	0x40013800
 8005048:	40020000 	.word	0x40020000
 800504c:	40020400 	.word	0x40020400
 8005050:	40020800 	.word	0x40020800
 8005054:	40020c00 	.word	0x40020c00
 8005058:	40021000 	.word	0x40021000
 800505c:	40013c00 	.word	0x40013c00

08005060 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	460b      	mov	r3, r1
 800506a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691a      	ldr	r2, [r3, #16]
 8005070:	887b      	ldrh	r3, [r7, #2]
 8005072:	4013      	ands	r3, r2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d002      	beq.n	800507e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005078:	2301      	movs	r3, #1
 800507a:	73fb      	strb	r3, [r7, #15]
 800507c:	e001      	b.n	8005082 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800507e:	2300      	movs	r3, #0
 8005080:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005082:	7bfb      	ldrb	r3, [r7, #15]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	460b      	mov	r3, r1
 800509a:	807b      	strh	r3, [r7, #2]
 800509c:	4613      	mov	r3, r2
 800509e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050a0:	787b      	ldrb	r3, [r7, #1]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050a6:	887a      	ldrh	r2, [r7, #2]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050ac:	e003      	b.n	80050b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050ae:	887b      	ldrh	r3, [r7, #2]
 80050b0:	041a      	lsls	r2, r3, #16
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	619a      	str	r2, [r3, #24]
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
	...

080050c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e267      	b.n	80055a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d075      	beq.n	80051ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050e2:	4b88      	ldr	r3, [pc, #544]	; (8005304 <HAL_RCC_OscConfig+0x240>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 030c 	and.w	r3, r3, #12
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d00c      	beq.n	8005108 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050ee:	4b85      	ldr	r3, [pc, #532]	; (8005304 <HAL_RCC_OscConfig+0x240>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050f6:	2b08      	cmp	r3, #8
 80050f8:	d112      	bne.n	8005120 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050fa:	4b82      	ldr	r3, [pc, #520]	; (8005304 <HAL_RCC_OscConfig+0x240>)
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005102:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005106:	d10b      	bne.n	8005120 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005108:	4b7e      	ldr	r3, [pc, #504]	; (8005304 <HAL_RCC_OscConfig+0x240>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d05b      	beq.n	80051cc <HAL_RCC_OscConfig+0x108>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d157      	bne.n	80051cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e242      	b.n	80055a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005128:	d106      	bne.n	8005138 <HAL_RCC_OscConfig+0x74>
 800512a:	4b76      	ldr	r3, [pc, #472]	; (8005304 <HAL_RCC_OscConfig+0x240>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a75      	ldr	r2, [pc, #468]	; (8005304 <HAL_RCC_OscConfig+0x240>)
 8005130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005134:	6013      	str	r3, [r2, #0]
 8005136:	e01d      	b.n	8005174 <HAL_RCC_OscConfig+0xb0>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005140:	d10c      	bne.n	800515c <HAL_RCC_OscConfig+0x98>
 8005142:	4b70      	ldr	r3, [pc, #448]	; (8005304 <HAL_RCC_OscConfig+0x240>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a6f      	ldr	r2, [pc, #444]	; (8005304 <HAL_RCC_OscConfig+0x240>)
 8005148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800514c:	6013      	str	r3, [r2, #0]
 800514e:	4b6d      	ldr	r3, [pc, #436]	; (8005304 <HAL_RCC_OscConfig+0x240>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a6c      	ldr	r2, [pc, #432]	; (8005304 <HAL_RCC_OscConfig+0x240>)
 8005154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	e00b      	b.n	8005174 <HAL_RCC_OscConfig+0xb0>
 800515c:	4b69      	ldr	r3, [pc, #420]	; (8005304 <HAL_RCC_OscConfig+0x240>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a68      	ldr	r2, [pc, #416]	; (8005304 <HAL_RCC_OscConfig+0x240>)
 8005162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	4b66      	ldr	r3, [pc, #408]	; (8005304 <HAL_RCC_OscConfig+0x240>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a65      	ldr	r2, [pc, #404]	; (8005304 <HAL_RCC_OscConfig+0x240>)
 800516e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d013      	beq.n	80051a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800517c:	f7ff fa48 	bl	8004610 <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005184:	f7ff fa44 	bl	8004610 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b64      	cmp	r3, #100	; 0x64
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e207      	b.n	80055a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005196:	4b5b      	ldr	r3, [pc, #364]	; (8005304 <HAL_RCC_OscConfig+0x240>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d0f0      	beq.n	8005184 <HAL_RCC_OscConfig+0xc0>
 80051a2:	e014      	b.n	80051ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a4:	f7ff fa34 	bl	8004610 <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051ac:	f7ff fa30 	bl	8004610 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b64      	cmp	r3, #100	; 0x64
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e1f3      	b.n	80055a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051be:	4b51      	ldr	r3, [pc, #324]	; (8005304 <HAL_RCC_OscConfig+0x240>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1f0      	bne.n	80051ac <HAL_RCC_OscConfig+0xe8>
 80051ca:	e000      	b.n	80051ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d063      	beq.n	80052a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051da:	4b4a      	ldr	r3, [pc, #296]	; (8005304 <HAL_RCC_OscConfig+0x240>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 030c 	and.w	r3, r3, #12
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00b      	beq.n	80051fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051e6:	4b47      	ldr	r3, [pc, #284]	; (8005304 <HAL_RCC_OscConfig+0x240>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051ee:	2b08      	cmp	r3, #8
 80051f0:	d11c      	bne.n	800522c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051f2:	4b44      	ldr	r3, [pc, #272]	; (8005304 <HAL_RCC_OscConfig+0x240>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d116      	bne.n	800522c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051fe:	4b41      	ldr	r3, [pc, #260]	; (8005304 <HAL_RCC_OscConfig+0x240>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d005      	beq.n	8005216 <HAL_RCC_OscConfig+0x152>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d001      	beq.n	8005216 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e1c7      	b.n	80055a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005216:	4b3b      	ldr	r3, [pc, #236]	; (8005304 <HAL_RCC_OscConfig+0x240>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	4937      	ldr	r1, [pc, #220]	; (8005304 <HAL_RCC_OscConfig+0x240>)
 8005226:	4313      	orrs	r3, r2
 8005228:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800522a:	e03a      	b.n	80052a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d020      	beq.n	8005276 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005234:	4b34      	ldr	r3, [pc, #208]	; (8005308 <HAL_RCC_OscConfig+0x244>)
 8005236:	2201      	movs	r2, #1
 8005238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523a:	f7ff f9e9 	bl	8004610 <HAL_GetTick>
 800523e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005240:	e008      	b.n	8005254 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005242:	f7ff f9e5 	bl	8004610 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d901      	bls.n	8005254 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e1a8      	b.n	80055a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005254:	4b2b      	ldr	r3, [pc, #172]	; (8005304 <HAL_RCC_OscConfig+0x240>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0f0      	beq.n	8005242 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005260:	4b28      	ldr	r3, [pc, #160]	; (8005304 <HAL_RCC_OscConfig+0x240>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	4925      	ldr	r1, [pc, #148]	; (8005304 <HAL_RCC_OscConfig+0x240>)
 8005270:	4313      	orrs	r3, r2
 8005272:	600b      	str	r3, [r1, #0]
 8005274:	e015      	b.n	80052a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005276:	4b24      	ldr	r3, [pc, #144]	; (8005308 <HAL_RCC_OscConfig+0x244>)
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800527c:	f7ff f9c8 	bl	8004610 <HAL_GetTick>
 8005280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005282:	e008      	b.n	8005296 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005284:	f7ff f9c4 	bl	8004610 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e187      	b.n	80055a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005296:	4b1b      	ldr	r3, [pc, #108]	; (8005304 <HAL_RCC_OscConfig+0x240>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1f0      	bne.n	8005284 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0308 	and.w	r3, r3, #8
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d036      	beq.n	800531c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d016      	beq.n	80052e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052b6:	4b15      	ldr	r3, [pc, #84]	; (800530c <HAL_RCC_OscConfig+0x248>)
 80052b8:	2201      	movs	r2, #1
 80052ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052bc:	f7ff f9a8 	bl	8004610 <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052c4:	f7ff f9a4 	bl	8004610 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e167      	b.n	80055a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052d6:	4b0b      	ldr	r3, [pc, #44]	; (8005304 <HAL_RCC_OscConfig+0x240>)
 80052d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0f0      	beq.n	80052c4 <HAL_RCC_OscConfig+0x200>
 80052e2:	e01b      	b.n	800531c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052e4:	4b09      	ldr	r3, [pc, #36]	; (800530c <HAL_RCC_OscConfig+0x248>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ea:	f7ff f991 	bl	8004610 <HAL_GetTick>
 80052ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052f0:	e00e      	b.n	8005310 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052f2:	f7ff f98d 	bl	8004610 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d907      	bls.n	8005310 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e150      	b.n	80055a6 <HAL_RCC_OscConfig+0x4e2>
 8005304:	40023800 	.word	0x40023800
 8005308:	42470000 	.word	0x42470000
 800530c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005310:	4b88      	ldr	r3, [pc, #544]	; (8005534 <HAL_RCC_OscConfig+0x470>)
 8005312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1ea      	bne.n	80052f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 8097 	beq.w	8005458 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800532a:	2300      	movs	r3, #0
 800532c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800532e:	4b81      	ldr	r3, [pc, #516]	; (8005534 <HAL_RCC_OscConfig+0x470>)
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10f      	bne.n	800535a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800533a:	2300      	movs	r3, #0
 800533c:	60bb      	str	r3, [r7, #8]
 800533e:	4b7d      	ldr	r3, [pc, #500]	; (8005534 <HAL_RCC_OscConfig+0x470>)
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	4a7c      	ldr	r2, [pc, #496]	; (8005534 <HAL_RCC_OscConfig+0x470>)
 8005344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005348:	6413      	str	r3, [r2, #64]	; 0x40
 800534a:	4b7a      	ldr	r3, [pc, #488]	; (8005534 <HAL_RCC_OscConfig+0x470>)
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005352:	60bb      	str	r3, [r7, #8]
 8005354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005356:	2301      	movs	r3, #1
 8005358:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800535a:	4b77      	ldr	r3, [pc, #476]	; (8005538 <HAL_RCC_OscConfig+0x474>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005362:	2b00      	cmp	r3, #0
 8005364:	d118      	bne.n	8005398 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005366:	4b74      	ldr	r3, [pc, #464]	; (8005538 <HAL_RCC_OscConfig+0x474>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a73      	ldr	r2, [pc, #460]	; (8005538 <HAL_RCC_OscConfig+0x474>)
 800536c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005372:	f7ff f94d 	bl	8004610 <HAL_GetTick>
 8005376:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005378:	e008      	b.n	800538c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800537a:	f7ff f949 	bl	8004610 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e10c      	b.n	80055a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800538c:	4b6a      	ldr	r3, [pc, #424]	; (8005538 <HAL_RCC_OscConfig+0x474>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005394:	2b00      	cmp	r3, #0
 8005396:	d0f0      	beq.n	800537a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d106      	bne.n	80053ae <HAL_RCC_OscConfig+0x2ea>
 80053a0:	4b64      	ldr	r3, [pc, #400]	; (8005534 <HAL_RCC_OscConfig+0x470>)
 80053a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a4:	4a63      	ldr	r2, [pc, #396]	; (8005534 <HAL_RCC_OscConfig+0x470>)
 80053a6:	f043 0301 	orr.w	r3, r3, #1
 80053aa:	6713      	str	r3, [r2, #112]	; 0x70
 80053ac:	e01c      	b.n	80053e8 <HAL_RCC_OscConfig+0x324>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	2b05      	cmp	r3, #5
 80053b4:	d10c      	bne.n	80053d0 <HAL_RCC_OscConfig+0x30c>
 80053b6:	4b5f      	ldr	r3, [pc, #380]	; (8005534 <HAL_RCC_OscConfig+0x470>)
 80053b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ba:	4a5e      	ldr	r2, [pc, #376]	; (8005534 <HAL_RCC_OscConfig+0x470>)
 80053bc:	f043 0304 	orr.w	r3, r3, #4
 80053c0:	6713      	str	r3, [r2, #112]	; 0x70
 80053c2:	4b5c      	ldr	r3, [pc, #368]	; (8005534 <HAL_RCC_OscConfig+0x470>)
 80053c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c6:	4a5b      	ldr	r2, [pc, #364]	; (8005534 <HAL_RCC_OscConfig+0x470>)
 80053c8:	f043 0301 	orr.w	r3, r3, #1
 80053cc:	6713      	str	r3, [r2, #112]	; 0x70
 80053ce:	e00b      	b.n	80053e8 <HAL_RCC_OscConfig+0x324>
 80053d0:	4b58      	ldr	r3, [pc, #352]	; (8005534 <HAL_RCC_OscConfig+0x470>)
 80053d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d4:	4a57      	ldr	r2, [pc, #348]	; (8005534 <HAL_RCC_OscConfig+0x470>)
 80053d6:	f023 0301 	bic.w	r3, r3, #1
 80053da:	6713      	str	r3, [r2, #112]	; 0x70
 80053dc:	4b55      	ldr	r3, [pc, #340]	; (8005534 <HAL_RCC_OscConfig+0x470>)
 80053de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e0:	4a54      	ldr	r2, [pc, #336]	; (8005534 <HAL_RCC_OscConfig+0x470>)
 80053e2:	f023 0304 	bic.w	r3, r3, #4
 80053e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d015      	beq.n	800541c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f0:	f7ff f90e 	bl	8004610 <HAL_GetTick>
 80053f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053f6:	e00a      	b.n	800540e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053f8:	f7ff f90a 	bl	8004610 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	f241 3288 	movw	r2, #5000	; 0x1388
 8005406:	4293      	cmp	r3, r2
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e0cb      	b.n	80055a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800540e:	4b49      	ldr	r3, [pc, #292]	; (8005534 <HAL_RCC_OscConfig+0x470>)
 8005410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d0ee      	beq.n	80053f8 <HAL_RCC_OscConfig+0x334>
 800541a:	e014      	b.n	8005446 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800541c:	f7ff f8f8 	bl	8004610 <HAL_GetTick>
 8005420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005422:	e00a      	b.n	800543a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005424:	f7ff f8f4 	bl	8004610 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005432:	4293      	cmp	r3, r2
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e0b5      	b.n	80055a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800543a:	4b3e      	ldr	r3, [pc, #248]	; (8005534 <HAL_RCC_OscConfig+0x470>)
 800543c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1ee      	bne.n	8005424 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005446:	7dfb      	ldrb	r3, [r7, #23]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d105      	bne.n	8005458 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800544c:	4b39      	ldr	r3, [pc, #228]	; (8005534 <HAL_RCC_OscConfig+0x470>)
 800544e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005450:	4a38      	ldr	r2, [pc, #224]	; (8005534 <HAL_RCC_OscConfig+0x470>)
 8005452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005456:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 80a1 	beq.w	80055a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005462:	4b34      	ldr	r3, [pc, #208]	; (8005534 <HAL_RCC_OscConfig+0x470>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 030c 	and.w	r3, r3, #12
 800546a:	2b08      	cmp	r3, #8
 800546c:	d05c      	beq.n	8005528 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	2b02      	cmp	r3, #2
 8005474:	d141      	bne.n	80054fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005476:	4b31      	ldr	r3, [pc, #196]	; (800553c <HAL_RCC_OscConfig+0x478>)
 8005478:	2200      	movs	r2, #0
 800547a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800547c:	f7ff f8c8 	bl	8004610 <HAL_GetTick>
 8005480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005484:	f7ff f8c4 	bl	8004610 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e087      	b.n	80055a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005496:	4b27      	ldr	r3, [pc, #156]	; (8005534 <HAL_RCC_OscConfig+0x470>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1f0      	bne.n	8005484 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	69da      	ldr	r2, [r3, #28]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	431a      	orrs	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	019b      	lsls	r3, r3, #6
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b8:	085b      	lsrs	r3, r3, #1
 80054ba:	3b01      	subs	r3, #1
 80054bc:	041b      	lsls	r3, r3, #16
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c4:	061b      	lsls	r3, r3, #24
 80054c6:	491b      	ldr	r1, [pc, #108]	; (8005534 <HAL_RCC_OscConfig+0x470>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054cc:	4b1b      	ldr	r3, [pc, #108]	; (800553c <HAL_RCC_OscConfig+0x478>)
 80054ce:	2201      	movs	r2, #1
 80054d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d2:	f7ff f89d 	bl	8004610 <HAL_GetTick>
 80054d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054d8:	e008      	b.n	80054ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054da:	f7ff f899 	bl	8004610 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d901      	bls.n	80054ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e05c      	b.n	80055a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ec:	4b11      	ldr	r3, [pc, #68]	; (8005534 <HAL_RCC_OscConfig+0x470>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d0f0      	beq.n	80054da <HAL_RCC_OscConfig+0x416>
 80054f8:	e054      	b.n	80055a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054fa:	4b10      	ldr	r3, [pc, #64]	; (800553c <HAL_RCC_OscConfig+0x478>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005500:	f7ff f886 	bl	8004610 <HAL_GetTick>
 8005504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005506:	e008      	b.n	800551a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005508:	f7ff f882 	bl	8004610 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d901      	bls.n	800551a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e045      	b.n	80055a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800551a:	4b06      	ldr	r3, [pc, #24]	; (8005534 <HAL_RCC_OscConfig+0x470>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1f0      	bne.n	8005508 <HAL_RCC_OscConfig+0x444>
 8005526:	e03d      	b.n	80055a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d107      	bne.n	8005540 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e038      	b.n	80055a6 <HAL_RCC_OscConfig+0x4e2>
 8005534:	40023800 	.word	0x40023800
 8005538:	40007000 	.word	0x40007000
 800553c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005540:	4b1b      	ldr	r3, [pc, #108]	; (80055b0 <HAL_RCC_OscConfig+0x4ec>)
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d028      	beq.n	80055a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005558:	429a      	cmp	r2, r3
 800555a:	d121      	bne.n	80055a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005566:	429a      	cmp	r2, r3
 8005568:	d11a      	bne.n	80055a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005570:	4013      	ands	r3, r2
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005576:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005578:	4293      	cmp	r3, r2
 800557a:	d111      	bne.n	80055a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005586:	085b      	lsrs	r3, r3, #1
 8005588:	3b01      	subs	r3, #1
 800558a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800558c:	429a      	cmp	r2, r3
 800558e:	d107      	bne.n	80055a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800559c:	429a      	cmp	r2, r3
 800559e:	d001      	beq.n	80055a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e000      	b.n	80055a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	40023800 	.word	0x40023800

080055b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e0cc      	b.n	8005762 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055c8:	4b68      	ldr	r3, [pc, #416]	; (800576c <HAL_RCC_ClockConfig+0x1b8>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0307 	and.w	r3, r3, #7
 80055d0:	683a      	ldr	r2, [r7, #0]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d90c      	bls.n	80055f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055d6:	4b65      	ldr	r3, [pc, #404]	; (800576c <HAL_RCC_ClockConfig+0x1b8>)
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	b2d2      	uxtb	r2, r2
 80055dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055de:	4b63      	ldr	r3, [pc, #396]	; (800576c <HAL_RCC_ClockConfig+0x1b8>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0307 	and.w	r3, r3, #7
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d001      	beq.n	80055f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e0b8      	b.n	8005762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d020      	beq.n	800563e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	2b00      	cmp	r3, #0
 8005606:	d005      	beq.n	8005614 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005608:	4b59      	ldr	r3, [pc, #356]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	4a58      	ldr	r2, [pc, #352]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 800560e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005612:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0308 	and.w	r3, r3, #8
 800561c:	2b00      	cmp	r3, #0
 800561e:	d005      	beq.n	800562c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005620:	4b53      	ldr	r3, [pc, #332]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	4a52      	ldr	r2, [pc, #328]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005626:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800562a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800562c:	4b50      	ldr	r3, [pc, #320]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	494d      	ldr	r1, [pc, #308]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 800563a:	4313      	orrs	r3, r2
 800563c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d044      	beq.n	80056d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d107      	bne.n	8005662 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005652:	4b47      	ldr	r3, [pc, #284]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d119      	bne.n	8005692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e07f      	b.n	8005762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	2b02      	cmp	r3, #2
 8005668:	d003      	beq.n	8005672 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800566e:	2b03      	cmp	r3, #3
 8005670:	d107      	bne.n	8005682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005672:	4b3f      	ldr	r3, [pc, #252]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d109      	bne.n	8005692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e06f      	b.n	8005762 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005682:	4b3b      	ldr	r3, [pc, #236]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e067      	b.n	8005762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005692:	4b37      	ldr	r3, [pc, #220]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f023 0203 	bic.w	r2, r3, #3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	4934      	ldr	r1, [pc, #208]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056a4:	f7fe ffb4 	bl	8004610 <HAL_GetTick>
 80056a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056aa:	e00a      	b.n	80056c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056ac:	f7fe ffb0 	bl	8004610 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e04f      	b.n	8005762 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c2:	4b2b      	ldr	r3, [pc, #172]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f003 020c 	and.w	r2, r3, #12
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d1eb      	bne.n	80056ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056d4:	4b25      	ldr	r3, [pc, #148]	; (800576c <HAL_RCC_ClockConfig+0x1b8>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d20c      	bcs.n	80056fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056e2:	4b22      	ldr	r3, [pc, #136]	; (800576c <HAL_RCC_ClockConfig+0x1b8>)
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ea:	4b20      	ldr	r3, [pc, #128]	; (800576c <HAL_RCC_ClockConfig+0x1b8>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0307 	and.w	r3, r3, #7
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d001      	beq.n	80056fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e032      	b.n	8005762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0304 	and.w	r3, r3, #4
 8005704:	2b00      	cmp	r3, #0
 8005706:	d008      	beq.n	800571a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005708:	4b19      	ldr	r3, [pc, #100]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	4916      	ldr	r1, [pc, #88]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005716:	4313      	orrs	r3, r2
 8005718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0308 	and.w	r3, r3, #8
 8005722:	2b00      	cmp	r3, #0
 8005724:	d009      	beq.n	800573a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005726:	4b12      	ldr	r3, [pc, #72]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	490e      	ldr	r1, [pc, #56]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005736:	4313      	orrs	r3, r2
 8005738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800573a:	f000 f821 	bl	8005780 <HAL_RCC_GetSysClockFreq>
 800573e:	4602      	mov	r2, r0
 8005740:	4b0b      	ldr	r3, [pc, #44]	; (8005770 <HAL_RCC_ClockConfig+0x1bc>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	091b      	lsrs	r3, r3, #4
 8005746:	f003 030f 	and.w	r3, r3, #15
 800574a:	490a      	ldr	r1, [pc, #40]	; (8005774 <HAL_RCC_ClockConfig+0x1c0>)
 800574c:	5ccb      	ldrb	r3, [r1, r3]
 800574e:	fa22 f303 	lsr.w	r3, r2, r3
 8005752:	4a09      	ldr	r2, [pc, #36]	; (8005778 <HAL_RCC_ClockConfig+0x1c4>)
 8005754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005756:	4b09      	ldr	r3, [pc, #36]	; (800577c <HAL_RCC_ClockConfig+0x1c8>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4618      	mov	r0, r3
 800575c:	f7fe ff14 	bl	8004588 <HAL_InitTick>

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	40023c00 	.word	0x40023c00
 8005770:	40023800 	.word	0x40023800
 8005774:	0802e4dc 	.word	0x0802e4dc
 8005778:	20000000 	.word	0x20000000
 800577c:	20000010 	.word	0x20000010

08005780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005784:	b090      	sub	sp, #64	; 0x40
 8005786:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005788:	2300      	movs	r3, #0
 800578a:	637b      	str	r3, [r7, #52]	; 0x34
 800578c:	2300      	movs	r3, #0
 800578e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005790:	2300      	movs	r3, #0
 8005792:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005794:	2300      	movs	r3, #0
 8005796:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005798:	4b59      	ldr	r3, [pc, #356]	; (8005900 <HAL_RCC_GetSysClockFreq+0x180>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f003 030c 	and.w	r3, r3, #12
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d00d      	beq.n	80057c0 <HAL_RCC_GetSysClockFreq+0x40>
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	f200 80a1 	bhi.w	80058ec <HAL_RCC_GetSysClockFreq+0x16c>
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <HAL_RCC_GetSysClockFreq+0x34>
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	d003      	beq.n	80057ba <HAL_RCC_GetSysClockFreq+0x3a>
 80057b2:	e09b      	b.n	80058ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057b4:	4b53      	ldr	r3, [pc, #332]	; (8005904 <HAL_RCC_GetSysClockFreq+0x184>)
 80057b6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80057b8:	e09b      	b.n	80058f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057ba:	4b53      	ldr	r3, [pc, #332]	; (8005908 <HAL_RCC_GetSysClockFreq+0x188>)
 80057bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80057be:	e098      	b.n	80058f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057c0:	4b4f      	ldr	r3, [pc, #316]	; (8005900 <HAL_RCC_GetSysClockFreq+0x180>)
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057ca:	4b4d      	ldr	r3, [pc, #308]	; (8005900 <HAL_RCC_GetSysClockFreq+0x180>)
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d028      	beq.n	8005828 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057d6:	4b4a      	ldr	r3, [pc, #296]	; (8005900 <HAL_RCC_GetSysClockFreq+0x180>)
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	099b      	lsrs	r3, r3, #6
 80057dc:	2200      	movs	r2, #0
 80057de:	623b      	str	r3, [r7, #32]
 80057e0:	627a      	str	r2, [r7, #36]	; 0x24
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80057e8:	2100      	movs	r1, #0
 80057ea:	4b47      	ldr	r3, [pc, #284]	; (8005908 <HAL_RCC_GetSysClockFreq+0x188>)
 80057ec:	fb03 f201 	mul.w	r2, r3, r1
 80057f0:	2300      	movs	r3, #0
 80057f2:	fb00 f303 	mul.w	r3, r0, r3
 80057f6:	4413      	add	r3, r2
 80057f8:	4a43      	ldr	r2, [pc, #268]	; (8005908 <HAL_RCC_GetSysClockFreq+0x188>)
 80057fa:	fba0 1202 	umull	r1, r2, r0, r2
 80057fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005800:	460a      	mov	r2, r1
 8005802:	62ba      	str	r2, [r7, #40]	; 0x28
 8005804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005806:	4413      	add	r3, r2
 8005808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800580a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800580c:	2200      	movs	r2, #0
 800580e:	61bb      	str	r3, [r7, #24]
 8005810:	61fa      	str	r2, [r7, #28]
 8005812:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005816:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800581a:	f7fa fcdd 	bl	80001d8 <__aeabi_uldivmod>
 800581e:	4602      	mov	r2, r0
 8005820:	460b      	mov	r3, r1
 8005822:	4613      	mov	r3, r2
 8005824:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005826:	e053      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005828:	4b35      	ldr	r3, [pc, #212]	; (8005900 <HAL_RCC_GetSysClockFreq+0x180>)
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	099b      	lsrs	r3, r3, #6
 800582e:	2200      	movs	r2, #0
 8005830:	613b      	str	r3, [r7, #16]
 8005832:	617a      	str	r2, [r7, #20]
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800583a:	f04f 0b00 	mov.w	fp, #0
 800583e:	4652      	mov	r2, sl
 8005840:	465b      	mov	r3, fp
 8005842:	f04f 0000 	mov.w	r0, #0
 8005846:	f04f 0100 	mov.w	r1, #0
 800584a:	0159      	lsls	r1, r3, #5
 800584c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005850:	0150      	lsls	r0, r2, #5
 8005852:	4602      	mov	r2, r0
 8005854:	460b      	mov	r3, r1
 8005856:	ebb2 080a 	subs.w	r8, r2, sl
 800585a:	eb63 090b 	sbc.w	r9, r3, fp
 800585e:	f04f 0200 	mov.w	r2, #0
 8005862:	f04f 0300 	mov.w	r3, #0
 8005866:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800586a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800586e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005872:	ebb2 0408 	subs.w	r4, r2, r8
 8005876:	eb63 0509 	sbc.w	r5, r3, r9
 800587a:	f04f 0200 	mov.w	r2, #0
 800587e:	f04f 0300 	mov.w	r3, #0
 8005882:	00eb      	lsls	r3, r5, #3
 8005884:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005888:	00e2      	lsls	r2, r4, #3
 800588a:	4614      	mov	r4, r2
 800588c:	461d      	mov	r5, r3
 800588e:	eb14 030a 	adds.w	r3, r4, sl
 8005892:	603b      	str	r3, [r7, #0]
 8005894:	eb45 030b 	adc.w	r3, r5, fp
 8005898:	607b      	str	r3, [r7, #4]
 800589a:	f04f 0200 	mov.w	r2, #0
 800589e:	f04f 0300 	mov.w	r3, #0
 80058a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058a6:	4629      	mov	r1, r5
 80058a8:	028b      	lsls	r3, r1, #10
 80058aa:	4621      	mov	r1, r4
 80058ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058b0:	4621      	mov	r1, r4
 80058b2:	028a      	lsls	r2, r1, #10
 80058b4:	4610      	mov	r0, r2
 80058b6:	4619      	mov	r1, r3
 80058b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ba:	2200      	movs	r2, #0
 80058bc:	60bb      	str	r3, [r7, #8]
 80058be:	60fa      	str	r2, [r7, #12]
 80058c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058c4:	f7fa fc88 	bl	80001d8 <__aeabi_uldivmod>
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	4613      	mov	r3, r2
 80058ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058d0:	4b0b      	ldr	r3, [pc, #44]	; (8005900 <HAL_RCC_GetSysClockFreq+0x180>)
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	0c1b      	lsrs	r3, r3, #16
 80058d6:	f003 0303 	and.w	r3, r3, #3
 80058da:	3301      	adds	r3, #1
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80058e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80058ea:	e002      	b.n	80058f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058ec:	4b05      	ldr	r3, [pc, #20]	; (8005904 <HAL_RCC_GetSysClockFreq+0x184>)
 80058ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80058f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3740      	adds	r7, #64	; 0x40
 80058f8:	46bd      	mov	sp, r7
 80058fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058fe:	bf00      	nop
 8005900:	40023800 	.word	0x40023800
 8005904:	00f42400 	.word	0x00f42400
 8005908:	017d7840 	.word	0x017d7840

0800590c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e041      	b.n	80059a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d106      	bne.n	8005938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7fb facc 	bl	8000ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	3304      	adds	r3, #4
 8005948:	4619      	mov	r1, r3
 800594a:	4610      	mov	r0, r2
 800594c:	f000 f950 	bl	8005bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
	...

080059ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d001      	beq.n	80059c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e03c      	b.n	8005a3e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a1e      	ldr	r2, [pc, #120]	; (8005a4c <HAL_TIM_Base_Start+0xa0>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d018      	beq.n	8005a08 <HAL_TIM_Base_Start+0x5c>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059de:	d013      	beq.n	8005a08 <HAL_TIM_Base_Start+0x5c>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a1a      	ldr	r2, [pc, #104]	; (8005a50 <HAL_TIM_Base_Start+0xa4>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d00e      	beq.n	8005a08 <HAL_TIM_Base_Start+0x5c>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a19      	ldr	r2, [pc, #100]	; (8005a54 <HAL_TIM_Base_Start+0xa8>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d009      	beq.n	8005a08 <HAL_TIM_Base_Start+0x5c>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a17      	ldr	r2, [pc, #92]	; (8005a58 <HAL_TIM_Base_Start+0xac>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d004      	beq.n	8005a08 <HAL_TIM_Base_Start+0x5c>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a16      	ldr	r2, [pc, #88]	; (8005a5c <HAL_TIM_Base_Start+0xb0>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d111      	bne.n	8005a2c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f003 0307 	and.w	r3, r3, #7
 8005a12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2b06      	cmp	r3, #6
 8005a18:	d010      	beq.n	8005a3c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f042 0201 	orr.w	r2, r2, #1
 8005a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a2a:	e007      	b.n	8005a3c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0201 	orr.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	40010000 	.word	0x40010000
 8005a50:	40000400 	.word	0x40000400
 8005a54:	40000800 	.word	0x40000800
 8005a58:	40000c00 	.word	0x40000c00
 8005a5c:	40014000 	.word	0x40014000

08005a60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d101      	bne.n	8005a7c <HAL_TIM_ConfigClockSource+0x1c>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	e0b4      	b.n	8005be6 <HAL_TIM_ConfigClockSource+0x186>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aa2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ab4:	d03e      	beq.n	8005b34 <HAL_TIM_ConfigClockSource+0xd4>
 8005ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aba:	f200 8087 	bhi.w	8005bcc <HAL_TIM_ConfigClockSource+0x16c>
 8005abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac2:	f000 8086 	beq.w	8005bd2 <HAL_TIM_ConfigClockSource+0x172>
 8005ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aca:	d87f      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x16c>
 8005acc:	2b70      	cmp	r3, #112	; 0x70
 8005ace:	d01a      	beq.n	8005b06 <HAL_TIM_ConfigClockSource+0xa6>
 8005ad0:	2b70      	cmp	r3, #112	; 0x70
 8005ad2:	d87b      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x16c>
 8005ad4:	2b60      	cmp	r3, #96	; 0x60
 8005ad6:	d050      	beq.n	8005b7a <HAL_TIM_ConfigClockSource+0x11a>
 8005ad8:	2b60      	cmp	r3, #96	; 0x60
 8005ada:	d877      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x16c>
 8005adc:	2b50      	cmp	r3, #80	; 0x50
 8005ade:	d03c      	beq.n	8005b5a <HAL_TIM_ConfigClockSource+0xfa>
 8005ae0:	2b50      	cmp	r3, #80	; 0x50
 8005ae2:	d873      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x16c>
 8005ae4:	2b40      	cmp	r3, #64	; 0x40
 8005ae6:	d058      	beq.n	8005b9a <HAL_TIM_ConfigClockSource+0x13a>
 8005ae8:	2b40      	cmp	r3, #64	; 0x40
 8005aea:	d86f      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x16c>
 8005aec:	2b30      	cmp	r3, #48	; 0x30
 8005aee:	d064      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x15a>
 8005af0:	2b30      	cmp	r3, #48	; 0x30
 8005af2:	d86b      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x16c>
 8005af4:	2b20      	cmp	r3, #32
 8005af6:	d060      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x15a>
 8005af8:	2b20      	cmp	r3, #32
 8005afa:	d867      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x16c>
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d05c      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x15a>
 8005b00:	2b10      	cmp	r3, #16
 8005b02:	d05a      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x15a>
 8005b04:	e062      	b.n	8005bcc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6818      	ldr	r0, [r3, #0]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	6899      	ldr	r1, [r3, #8]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	f000 f965 	bl	8005de4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	609a      	str	r2, [r3, #8]
      break;
 8005b32:	e04f      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6818      	ldr	r0, [r3, #0]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	6899      	ldr	r1, [r3, #8]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f000 f94e 	bl	8005de4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689a      	ldr	r2, [r3, #8]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b56:	609a      	str	r2, [r3, #8]
      break;
 8005b58:	e03c      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6818      	ldr	r0, [r3, #0]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	6859      	ldr	r1, [r3, #4]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	461a      	mov	r2, r3
 8005b68:	f000 f8c2 	bl	8005cf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2150      	movs	r1, #80	; 0x50
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 f91b 	bl	8005dae <TIM_ITRx_SetConfig>
      break;
 8005b78:	e02c      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6818      	ldr	r0, [r3, #0]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	6859      	ldr	r1, [r3, #4]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	461a      	mov	r2, r3
 8005b88:	f000 f8e1 	bl	8005d4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2160      	movs	r1, #96	; 0x60
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 f90b 	bl	8005dae <TIM_ITRx_SetConfig>
      break;
 8005b98:	e01c      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6818      	ldr	r0, [r3, #0]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	6859      	ldr	r1, [r3, #4]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f000 f8a2 	bl	8005cf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2140      	movs	r1, #64	; 0x40
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 f8fb 	bl	8005dae <TIM_ITRx_SetConfig>
      break;
 8005bb8:	e00c      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	f000 f8f2 	bl	8005dae <TIM_ITRx_SetConfig>
      break;
 8005bca:	e003      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	73fb      	strb	r3, [r7, #15]
      break;
 8005bd0:	e000      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
	...

08005bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a34      	ldr	r2, [pc, #208]	; (8005cd4 <TIM_Base_SetConfig+0xe4>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d00f      	beq.n	8005c28 <TIM_Base_SetConfig+0x38>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c0e:	d00b      	beq.n	8005c28 <TIM_Base_SetConfig+0x38>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a31      	ldr	r2, [pc, #196]	; (8005cd8 <TIM_Base_SetConfig+0xe8>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d007      	beq.n	8005c28 <TIM_Base_SetConfig+0x38>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a30      	ldr	r2, [pc, #192]	; (8005cdc <TIM_Base_SetConfig+0xec>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d003      	beq.n	8005c28 <TIM_Base_SetConfig+0x38>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a2f      	ldr	r2, [pc, #188]	; (8005ce0 <TIM_Base_SetConfig+0xf0>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d108      	bne.n	8005c3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a25      	ldr	r2, [pc, #148]	; (8005cd4 <TIM_Base_SetConfig+0xe4>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d01b      	beq.n	8005c7a <TIM_Base_SetConfig+0x8a>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c48:	d017      	beq.n	8005c7a <TIM_Base_SetConfig+0x8a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a22      	ldr	r2, [pc, #136]	; (8005cd8 <TIM_Base_SetConfig+0xe8>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d013      	beq.n	8005c7a <TIM_Base_SetConfig+0x8a>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a21      	ldr	r2, [pc, #132]	; (8005cdc <TIM_Base_SetConfig+0xec>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00f      	beq.n	8005c7a <TIM_Base_SetConfig+0x8a>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a20      	ldr	r2, [pc, #128]	; (8005ce0 <TIM_Base_SetConfig+0xf0>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d00b      	beq.n	8005c7a <TIM_Base_SetConfig+0x8a>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a1f      	ldr	r2, [pc, #124]	; (8005ce4 <TIM_Base_SetConfig+0xf4>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d007      	beq.n	8005c7a <TIM_Base_SetConfig+0x8a>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a1e      	ldr	r2, [pc, #120]	; (8005ce8 <TIM_Base_SetConfig+0xf8>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d003      	beq.n	8005c7a <TIM_Base_SetConfig+0x8a>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a1d      	ldr	r2, [pc, #116]	; (8005cec <TIM_Base_SetConfig+0xfc>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d108      	bne.n	8005c8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a08      	ldr	r2, [pc, #32]	; (8005cd4 <TIM_Base_SetConfig+0xe4>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d103      	bne.n	8005cc0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	691a      	ldr	r2, [r3, #16]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	615a      	str	r2, [r3, #20]
}
 8005cc6:	bf00      	nop
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	40010000 	.word	0x40010000
 8005cd8:	40000400 	.word	0x40000400
 8005cdc:	40000800 	.word	0x40000800
 8005ce0:	40000c00 	.word	0x40000c00
 8005ce4:	40014000 	.word	0x40014000
 8005ce8:	40014400 	.word	0x40014400
 8005cec:	40014800 	.word	0x40014800

08005cf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b087      	sub	sp, #28
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	f023 0201 	bic.w	r2, r3, #1
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	011b      	lsls	r3, r3, #4
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f023 030a 	bic.w	r3, r3, #10
 8005d2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	621a      	str	r2, [r3, #32]
}
 8005d42:	bf00      	nop
 8005d44:	371c      	adds	r7, #28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b087      	sub	sp, #28
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	60f8      	str	r0, [r7, #12]
 8005d56:	60b9      	str	r1, [r7, #8]
 8005d58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	f023 0210 	bic.w	r2, r3, #16
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	031b      	lsls	r3, r3, #12
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	011b      	lsls	r3, r3, #4
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	621a      	str	r2, [r3, #32]
}
 8005da2:	bf00      	nop
 8005da4:	371c      	adds	r7, #28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b085      	sub	sp, #20
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	f043 0307 	orr.w	r3, r3, #7
 8005dd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	609a      	str	r2, [r3, #8]
}
 8005dd8:	bf00      	nop
 8005dda:	3714      	adds	r7, #20
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
 8005df0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	021a      	lsls	r2, r3, #8
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	431a      	orrs	r2, r3
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	609a      	str	r2, [r3, #8]
}
 8005e18:	bf00      	nop
 8005e1a:	371c      	adds	r7, #28
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d101      	bne.n	8005e3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	e050      	b.n	8005ede <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a1c      	ldr	r2, [pc, #112]	; (8005eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d018      	beq.n	8005eb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e88:	d013      	beq.n	8005eb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a18      	ldr	r2, [pc, #96]	; (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d00e      	beq.n	8005eb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a16      	ldr	r2, [pc, #88]	; (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d009      	beq.n	8005eb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a15      	ldr	r2, [pc, #84]	; (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d004      	beq.n	8005eb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a13      	ldr	r2, [pc, #76]	; (8005efc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d10c      	bne.n	8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	40010000 	.word	0x40010000
 8005ef0:	40000400 	.word	0x40000400
 8005ef4:	40000800 	.word	0x40000800
 8005ef8:	40000c00 	.word	0x40000c00
 8005efc:	40014000 	.word	0x40014000

08005f00 <memset>:
 8005f00:	4402      	add	r2, r0
 8005f02:	4603      	mov	r3, r0
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d100      	bne.n	8005f0a <memset+0xa>
 8005f08:	4770      	bx	lr
 8005f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f0e:	e7f9      	b.n	8005f04 <memset+0x4>

08005f10 <__libc_init_array>:
 8005f10:	b570      	push	{r4, r5, r6, lr}
 8005f12:	4d0d      	ldr	r5, [pc, #52]	; (8005f48 <__libc_init_array+0x38>)
 8005f14:	4c0d      	ldr	r4, [pc, #52]	; (8005f4c <__libc_init_array+0x3c>)
 8005f16:	1b64      	subs	r4, r4, r5
 8005f18:	10a4      	asrs	r4, r4, #2
 8005f1a:	2600      	movs	r6, #0
 8005f1c:	42a6      	cmp	r6, r4
 8005f1e:	d109      	bne.n	8005f34 <__libc_init_array+0x24>
 8005f20:	4d0b      	ldr	r5, [pc, #44]	; (8005f50 <__libc_init_array+0x40>)
 8005f22:	4c0c      	ldr	r4, [pc, #48]	; (8005f54 <__libc_init_array+0x44>)
 8005f24:	f000 f818 	bl	8005f58 <_init>
 8005f28:	1b64      	subs	r4, r4, r5
 8005f2a:	10a4      	asrs	r4, r4, #2
 8005f2c:	2600      	movs	r6, #0
 8005f2e:	42a6      	cmp	r6, r4
 8005f30:	d105      	bne.n	8005f3e <__libc_init_array+0x2e>
 8005f32:	bd70      	pop	{r4, r5, r6, pc}
 8005f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f38:	4798      	blx	r3
 8005f3a:	3601      	adds	r6, #1
 8005f3c:	e7ee      	b.n	8005f1c <__libc_init_array+0xc>
 8005f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f42:	4798      	blx	r3
 8005f44:	3601      	adds	r6, #1
 8005f46:	e7f2      	b.n	8005f2e <__libc_init_array+0x1e>
 8005f48:	0802ea34 	.word	0x0802ea34
 8005f4c:	0802ea34 	.word	0x0802ea34
 8005f50:	0802ea34 	.word	0x0802ea34
 8005f54:	0802ea38 	.word	0x0802ea38

08005f58 <_init>:
 8005f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5a:	bf00      	nop
 8005f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f5e:	bc08      	pop	{r3}
 8005f60:	469e      	mov	lr, r3
 8005f62:	4770      	bx	lr

08005f64 <_fini>:
 8005f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f66:	bf00      	nop
 8005f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f6a:	bc08      	pop	{r3}
 8005f6c:	469e      	mov	lr, r3
 8005f6e:	4770      	bx	lr
